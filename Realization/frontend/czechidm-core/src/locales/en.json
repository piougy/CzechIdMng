{
  "app": {
    "name": "CzechIdM",
    "author": {
      "name": "BCV solutions s.r.o.",
      "homePage": "http://www.bcvsolutions.eu"
    },
    "serviceDesk": "ServiceDesk",
    "helpDesk": "Help",
    "version": {
      "frontend": "Version",
      "backend": "Backend version",
      "releaseDate": "Release date"
    },
    "documentation": {
      "url": "https://wiki.czechidm.com"
    }
  },
  "format": {
    "date": "DD.MM.YYYY",
    "time": "HH:mm",
    "datetime": "DD.MM.YYYY HH:mm:ss",
    "datetimemilis": "DD.MM.YYYY HH:mm:ss.SSS",
    "times": "HH:mm:ss",
    "duration": "DD HH:mm:ss"
  },
  "message": {
    "success": {
      "common": "The operation completed successfully",
      "create": "Creation successfully completed",
      "update": "Update successfully completed",
      "delete": "Deletion successfully completed",
      "upload": "File successfully uploaded"
    },
    "task": {
      "detailNotFound":"This task is not supported!",
      "taskSolvedOrNotFound": "This task doesn't exist or has already been resolved."
    },
    "failed": "Operation failed",
    "notImplemented": "This operation is not available yet"
  },
  "label": {
    "id": "Id",
    "action": "Actions",
    "approved": "Approved",
    "otherAttributes": "Other attributes",
    "selectAll": "Select / unselect all",
    "validFrom": "$t(entity.validFrom)",
    "validTill": "$t(entity.validTill)",
    "select": "Select ...",
    "selected": "Selected record",
    "default": "Default",
    "download": "Download",
    "searchSelect": "Select or type to search ...",
    "enabled": "Enabled",
    "disabled": "Inactive",
    "property": "Attribute",
    "value": "Value",
    "yes": "Yes",
    "no": "No",
    "readOnly": "Read only",
    "removed": "Removed",
    "waiting": "Waiting",
    "next": "Next",
    "warning": "Warning"
  },
  "button": {
    "activate": "Activate",
    "add": "Add",
    "addMore": "Add in bulk",
    "back": "Back",
    "cancel": "Cancel",
    "close": "Close",
    "apply": "Apply",
    "confirm": "Confirm",
    "create": "Create",
    "createContinue": "Create and edit",
    "createNew": "Create and add another",
    "deactivate": "Deactivate",
    "deactivatePrepare": "Preparing deactivation ...",
    "delete": "Delete",
    "detail": "Detail",
    "download": "$t(label.download)",
    "edit": "Edit",
    "enable": {
      "label": "Enable"
    },
    "evict": "Evict",
    "evictAll": "Evict all",
    "filter": {
      "toogle": "Filter",
      "use": "Filter",
      "cancel": "Cancel filter"
    },
    "logout": "Log Out",
    "no": "No",
    "refresh": "Refresh",
    "select": "Select",
    "send": "Send",
    "sending": "Sending",
    "save": "Save",
    "saveAndClose": "Save and exit",
    "saveAndContinue": "Save and continue",
    "saveAndNew": "Save and add another",
    "saving": "Saving",
    "yes": "Yes",
    "set": "Set",
    "crop": "Crop & save",
    "preview": {
      "title": "Show preview",
      "disabled": "Preview is not available"
    },
    "clear": {
      "title": "Clear"
    },
    "verify": {
      "label": "Verify"
    }
  },
  "filter": {
    "dateFrom": {
      "label": "from",
      "placeholder": "Date from"
    },
    "dateTill": {
      "label": "To",
      "placeholder": "Date to"
    },
    "date": {
      "placeholder": "Date"
    },
    "text": {
      "help": {
        "header": "Filtering",
        "body": "<div>Filter is using <strong>like</strong> operator:<br /><ul><li>looking for any occurrence of the specified string,</li><li>available wildcard characters:<ul><li><strong>%</strong> - matches zero or more characters,</li><li><strong>_</strong> - single character.</li></ul></li></ul>If we want to look for special characters, we add a backslash <strong>\\%,\\_</strong></div>",
        "uuid": "<div>Given <strong>uuid</strong> short dentifiers cannot contain dashes (dashes can be removed or whole uuid identifier can be given).</div>"
      }
    },
    "module": {
      "label": "Modul",
      "placeholder": "Modul"
    },
    "transactionId": {
      "placeholder": "$t(entity.transactionId.label) (uuid)"
    },
    "entityId": {
      "placeholder": "Entity identifier (uuid)",
      "codeable": "Entity identifier (uuid or code)",
      "help": "If <strong>entity type</strong> is selected and entity has unique code, then this code can be used instead uuid identifier. For example <strong>role code</strong> (for type IdmRole), <strong>username</strong> (for type IdmIdentity) could be used etc."
    }
  },
  "action": {
    "delete": {
      "action": "Delete",
      "icon": "fa:trash",
      "header": "Delete record",
      "header_plural": "Delete records",
      "message": "Do you want to delete selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to delete <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while deleting [{{record}}].",
      "success": "Selected record [{{record}}] successfully deleted",
      "success_plural": "Selected records [{{records}}] were successfully deleted",
      "approve": "Record deletion [{{record}}] has to be approved, task successfully created",
      "approve_plural": "Records deletion [{{records}}] have to be approved, tasks successfully created",
      "accepted": "Record deletion [{{record}}] run asynchronously (deletion has to be approved or run as long running task)",
      "accepted_plural": "Records deletion [{{records}}] run asynchronously (deletion has to be approved or run as long running task)"
    },
    "activate": {
      "action": "Activate",
      "header_0": "N/A",
      "header": "Activate record",
      "header_plural": "Activate records",
      "message_0": "N/A",
      "message" : "Do you really want to activate selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br />Do you really want to activate <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while activating [{{record}}]",
      "success_0": "N/A",
      "success": "Selected record [{{record}}] successfully activated",
      "success_plural": "Selected records [{{records}}] were successfully activated"
    },
    "deactivate": {
      "action": "Deactivate",
      "header_0": "N/A",
      "header": "Deactivate record",
      "header_plural": "Deactivate records",
      "message_0": "N/A",
      "message": "Do you want to deactivate selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br />Do you want to deactivate <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while removing [{{record}}]",
      "success_0": "N/A",
      "success": "Selected record [{{record}}] were successfully deactivated",
      "success_plural": "Selected records [{{records}}] were successfully deactivated"
    },
    "evict": {
      "action": "Evict",
      "header": "Evict cache",
      "message_0": "N/A",
      "message": "Do you want to evict cache [{{record}}]?",
      "message_plural": "Do you want to evict all caches?",
      "success_0": "N/A",
      "success": "Cache [{{record}}] was successfuly evicted.",
      "success_plural": "All caches  were successfuly evicted.",
      "error": "Cache does not exist"
    },
    "redeploy": {
      "action": "Recover from disk (redeploy)",
      "icon": "fa:upload",
      "header_0": "N/A",
      "header": "Recover record from disk",
      "header_plural": "Recover records from disk",
      "message_0": "N/A",
      "message": "Do you want to recover selected record [<strong>{{record}}</strong>] from disk? This action is not possible to undo.",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br />Do you want to recover <strong>{{count}}</strong> selected records from disk? This action is not possible to undo.",
      "error": "An error occurred while recover [{{record}}]",
      "success_0": "N/A",
      "success": "N/A",
      "success_plural": "Selected record [{{record}}] were successfully recovered",
      "failed_0": "Selected record [{{records}}] failed recover, XML file don't exist on disk.",
      "failed": "Selected record [{{records}}] failed recover, XML file don't exist on disk.",
      "failed_plural": "Selected records [{{records}}] failed recover, XML file don't exist on disk."
    },
    "backup": {
      "action": "Backup",
      "icon": "fa:download",
      "header_0": "N/A",
      "header": "Backup record",
      "header_plural": "Backup records",
      "message_0": "N/A",
      "message": "Do you want to backup  [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br />Do you want to backup <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while backup selected record",
      "success_0": "N/A",
      "success": "Selected record [{{record}}] were successfully backup",
      "success_plural": "Selected records [{{records}}] were successfully backup",
      "failed_0": "Selected record [{{records}}] were not successfully backup",
      "failed": "Selected record [{{records}}] were not successfully backup",
      "failed_plural": "Selected records [{{records}}] were not successfully backup"
    },
    "duplicate": {
      "action": "Duplicate",
      "header_0": "N/A",
      "header": "Duplicate record",
      "header_plural": "Duplicate records",
      "message_0": "N/A",
      "message": "Do you want to duplicate selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to duplicate <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while duplicating [{{record}}].",
      "success": "Selected record [{{record}}] successfully duplicated",
      "success_plural": "Selected records [{{records}}] were successfully duplicated",
      "failed": "Selected record [{{records}}] were not successfully duplicated",
      "failed_plural": "Selected records [{{records}}] were not successfully duplicated"
    },
    "save": {
      "success_0": "N/A",
      "success": "Record [{{record}}] successfully saved"
    },
    "cancel": {
      "action": "Cancel",
      "header_0": "N/A",
      "header": "Cancel record",
      "header_plural": "Cancel records",
      "message_0": "N/A",
      "message": "Do you want to cancel selected record [<strong>{{record}}</strong>]?",
      "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to cancel <strong>{{count}}</strong> selected records?",
      "error": "An error occurred while canceling [{{record}}].",
      "success_0": "N/A",
      "success": "Selected record [{{record}}] successfully canceled",
      "success_plural": "Selected records [{{records}}] were successfully canceled",
      "approve": "Record cancel [{{record}}] has to be approved, task successfully created",
      "approve_plural": "Records cancel [{{records}}] have to be approved, tasks successfully created",
      "accepted": "Record cancel [{{record}}] run asynchronously (cancel has to be approved or run as long running task)",
      "accepted_plural": "Records cancel [{{records}}] run asynchronously (cancel has to be approved or run as long running task)"
    }
  },
  "bulkAction": {
    "selectAllRecordsWarning": "Performing a bulk operation [{{action}}] on currently filtered items. To this date <strong>{{date}}</strong> is actual count <strong class=\"highlight\">{{count}}</strong>. Processed items may be different.",
    "removedRecord": "The following entity will not be counted in the bulk job processing: <b>[{{entities}}]</b>.",
    "removedRecord_plural": "The following entities will not be included in the bulk job processing: <b>[{{entities}}]</b>.",
    "created": "Bulk action [{{name}}] was successfully run as a long running task.",
    "message_empty": "Performing the bulk action [{{name}}].",
    "message": "Performing the bulk action [{{name}}] on select record: <b>[{{entities}}]</b>.",
    "message_plural": "Performing the bulk action [{{name}}] on {{count}} records: <b>[{{entities}}]</b>",
    "button": {
      "execute": "Execute",
      "next": "Next operation",
      "all": "All operations"
    },
    "insufficientReadPermission": "You don't have sufficient rights to view the progress of the bulk operation."
  },
  "environment": {
    "development": {
      "short": "D",
      "label": "Development",
      "title": "Development"
    },
    "test": {
      "short": "T",
      "label": "Test",
      "title": "Test"
    },
    "production": {
      "short": "P",
      "label": "Production",
      "title": "Production"
    }
  },
  "navigation" : {
    "toogle": "Toggle navigation",
    "collapse": {
      "label": "Collapse menu"
    },
    "expand": {
      "label": "Expand menu"
    },
    "menu": {
      "home": "Dashboard",
      "profile": {
        "label": "$t(navigation.menu.home)",
        "title": "$t(navigation.menu.profile.label)"
      },
      "dashboard": {
        "label": "$t(navigation.menu.home)",
        "title": "$t(navigation.menu.home)"
      },
      "subordinates": {
        "label": "My subordinates",
        "title": "My subordinates"
      },
      "roles": {
        "label": "User roles",
        "title": "Assigned roles"
      },
      "tasks": {
        "label" : "Tasks",
        "title" : "My tasks"
      },
      "task" : "Task",
      "identities": {
        "label": "Users",
        "title": "List of users"
      },
      "messages": "Messages history",
      "configuration": "Configuration",
      "monitoring": "Monitoring",
      "userLabel": "{{loggedUsername}}",
      "login": "$t(content.login.header)",
      "logout": "Log Out",
      "system": "Settings",
      "workflow": {
        "definitions": "Workflow definitions",
        "historicProcess": "Workflow history",
        "title": "Workflow"
      },
      "audit": {
        "profile": "Audit of user"
      },
      "separator": {
        "system": "System settings"
      },
      "notifications": {
        "label": "Notifications",
        "title": "Notifications"
      }
    }
  },
  "component" : {
    "basic": {
      "HelpIcon" : {
        "title": "Help"
      },
      "SelectBox" : {
        "noResultsText": "No result",
        "searchPromptText": "Start typing ...",
        "searchingText": "Searching ...",
        "results": "Shown <strong>{{count}}</strong> of <strong>{{total}}</strong> records ...",
        "emptyOption": {
          "label": "-- not selected --"
        }
      },
      "Table" : {
        "Pagination" : {
          "recordInfo": "<strong title='First record on page'>{{minRecord}}</strong> - <strong title='Last record on page'>{{maxRecord}}</strong> of <strong title='Total number of records'>{{totalRecords}}</strong> records",
          "size": "Number of records",
          "page": {
            "title": "Page",
            "select": "Go to page {{page}}"
          },
          "from": "of"
        },
        "select": {
          "remove": "Clear selection",
          "add": "Select record",
          "addAll": "Select records"
        },
        "noData": "No results found",
        "draggable": {
          "button": {
            "title": "Change order"
          },
          "message": {
            "success": "Order of records successfully changed"
          }
        }
      },
      "ProgressBar": {
        "start": "Processing",
        "processed": "Processed",
        "label": "$t(component.basic.ProgressBar.processed) {{now}} / {{max}}"
      },
      "Dropzone": {
        "infoText": "Drag files here, or click to select files.",
        "infoTextSingle": "Drag file here, or click to select file.",
        "readOnly": "Preview is not available."
      },
      "TextField": {
        "confidential": {
          "edit": "Set new value"
        },
        "password": {
          "show": {
            "title": "Show password"
          },
          "hide": {
            "title": "Hide password"
          }
        }
      },
      "Wizard": {
        "defaultHeader": "Wizard",
        "button": {
          "next": "Next",
          "previous": "Previous",
          "finish": "Finish",
          "skip": "Skip"
        }
      }
    },
    "advanced": {
      "EntityInfo": {
        "link": {
          "detail": {
            "label": "Show full detail"
          },
          "popover": {
            "title": "Show info card"
          }
        }
      },
      "UuidInfo": {
        "copy": {
          "message": "Identifier copied into clipboard."
        }
      },
      "IdentityInfo": {
        "link": {
          "detail": {
            "label": "Show full detail",
            "default": {
              "label": "Show default full detail"
            }
          },
          "switchUser": {
            "label": "Login as user"
          },
          "profile": {
            "label": "Show profile"
          },
          "popover": {
            "title": "Show info card"
          },
          "projection": {
            "label": "Show form by user type"
          }
        }
      },
      "AuditableInfo": {
        "header": "System information",
        "link": {
          "title": "Show system information"
        }
      },
      "EntitySelectBox": {
        "componentNotFound": "Select box component for type [{{entityType}}] is not registered. Fix component descriptor.",
        "defaultHelpBlock": "Searching is done in the following attributes: {{searchInFields}}."
      },
      "Filter": {
        "option": {
          "yes": "Yes",
          "no": "No"
        },
        "FilterDate": {
          "face": {
            "placeholder": "$t(filter.date.placeholder)"
          },
          "from": {
            "placeholder": "$t(filter.dateFrom.placeholder)"
          },
          "till": {
            "placeholder": "$t(filter.dateTill.placeholder)"
          }
        }
      },
      "Table": {
        "bulk-action": {
          "selection_empty": "Select operation",
          "selection_0": "Select operation",
          "selection": "Operation with selected record",
          "selection_plural": "Operation with ({{count}}) selected records",
          "notImplemented": "Sorry, this operation is not available yet."
        },
        "error": {
          "load": "Error during loading records to the table."
        },
        "button": {
          "refresh": "Reload records",
          "transactionId" : {
            "label": "Show in audit",
            "title": "Show all audit records with given user transaction identifier."
          },
          "entityId" : {
            "label": "Show in audit",
            "title": "Show all audit records with given internal entity identifier."
          }
        },
        "noData": "$t(component.basic.Table.noData)",
        "filter": {
          "notEmpty": "Filter is set",
          "empty": "Filter is not set"
        }
      },
      "Tree": {
        "header": "Structure",
        "loading": "Loading ...",
        "reload": "Tree reload",
        "showTree": {
          "link": {
            "title": "Select from structure"
          }
        },
        "parent": {
          "link": {
            "label": "..",
            "title": "Show parent folder"
          }
        },
        "root": {
          "link": {
            "label": "/..",
            "title": "Select root folder"
          }
        },
        "detail": {
          "link": {
            "title": "Show selected record detail"
          }
        },
        "moreRecords": "<span title='Load next records'>Shown <strong>{{counter}}</strong> of <strong>{{total}}</strong> records ...</span>",
        "noData": "No results found",
        "expand": {
          "expand": "Expand",
          "collapse": "Collapse",
          "cycle": "Node is already expanded"
        }
      },
      "EavForm": {
        "multiple": {
          "label": "multi",
          "title": "Supports entering multiple values. Each value to new line.",
          "unsupported": {
            "title": "Attribute persistent type [{{name}}] with face [{{face}}] cannot be multiple",
            "formDefinition": {
              "title": "Form definition has to be fixed",
              "type": "Type",
              "name": "Name",
              "code": "Code"
            }
          }
        },
        "single": {
          "unsupported": {
            "title": "Attribute persistent type [{{name}}] with face [{{face}}] cannot be single value",
            "formDefinition": {
              "title": "Form definition has to be fixed",
              "type": "Type",
              "name": "Name",
              "code": "Code"
            }
          }
        },
        "persistentType": {
          "unsupported": {
            "title": "Unsupported persistent type [{{name}}] with face [{{face}}]",
            "confidential": "Confidential for type [{{name}}] with face [{{face}}] is not supported"
          }
        },
        "faceType": {
          "CHAR": "$t(enums.PersistentTypeEnum.CHAR)",
          "TEXT": "$t(enums.PersistentTypeEnum.TEXT)",
          "SHORTTEXT": "$t(enums.PersistentTypeEnum.SHORTTEXT)",
          "INT": "$t(enums.PersistentTypeEnum.INT)",
          "LONG": "$t(enums.PersistentTypeEnum.LONG)",
          "DOUBLE": "$t(enums.PersistentTypeEnum.DOUBLE)",
          "BOOLEAN": "$t(enums.PersistentTypeEnum.BOOLEAN)",
          "DATE": "$t(enums.PersistentTypeEnum.DATE)",
          "DATETIME": "$t(enums.PersistentTypeEnum.DATETIME)",
          "BYTEARRAY": "$t(enums.PersistentTypeEnum.BYTEARRAY)",
          "UUID": "$t(enums.PersistentTypeEnum.UUID)",
          "CURRENCY": "Currency",
          "TEXTAREA": "TextArea",
          "RICHTEXTAREA": "WYSIWYG editor",
          "SCRIPTAREA": "Script editor",
          "IDENTITY-SELECT": "Select identity (SelectBox)",
          "IDENTITY-CONTRACT-SELECT": "Select contracts (SelectBox)",
          "IDENTITY-ALLOW-DISABLED-SELECT": "Select identity, disabled included (SelectBox)",
          "ROLE-SELECT": "Select role (SelectBox)",
          "CAN-BE-REQUESTED-ROLE-SELECT": "Select role available for request (SelectBox)",
          "FORM-DEFINITION-SELECT": "Select form definition (SelectBox)",
          "FORM-PROJECTION-SELECT": "Select form projection (SelectBox)",
          "CODE-LIST-SELECT": "Select codelist (SelectBox)",
          "TREE-NODE-SELECT": "Select tree node (SelectBox)",
          "TREE-TYPE-SELECT": "Select tree type (SelectBox)",
          "SCRIPT-SELECT": "Select script (SelectBox)",
          "ROLE-CATALOGUE-SELECT": "Select folder in role catalogue (SelectBox)",
          "BOOLEAN-SELECT": "$t(enums.PersistentTypeEnum.BOOLEAN) (SelectBox)",
          "ATTACHMENT": "$t(enums.PersistentTypeEnum.ATTACHMENT)",
          "CODELIST": "$t(enums.PersistentTypeEnum.CODELIST)",
          "ENUMERATION": "$t(enums.PersistentTypeEnum.ENUMERATION)",
          "AUTOMATIC-ROLE-TREE-SELECT": "Select automatic role by tree structure (SelectBox)",
          "AUTOMATIC-ROLE-ATTRIBUTE-SELECT": "Select automatic role by attribute (SelectBox)",
          "BASE-PERMISSION-ENUM": "Base IdM permission",
          "OPERATION-STATE-ENUM": "Operation state",
          "WORKFLOW-DEFINITION-SELECT": "Select workflow definition (SelectBox)"
        },
        "attributes": {
          "empty": "Form definition was found, but doesn't contain editable attributes.",
          "link": {
            "label": "Manage attributes",
            "title": "Edit attributes setting in form definition"
          }
        },
        "showChanges":{
          "newValue": "(New value)",
          "originalValue": "(Original value)"
        }
      },
      "Recaptcha": {
        "required": "Check 'you are not a robot' please"
      },
      "PasswordField":{
        "newPassword": {
          "label": "New password"
        },
        "newPasswordAgain": {
          "label": "Re-enter new password"
        },
        "password": {
          "label": "Password"
        },
        "passwordAgain": {
          "label": "Re-enter password"
        }
      },
      "OperationResult": {
        "link": {
          "detail": {
            "label": "Show full detail"
          },
          "popover": {
            "title": "Show info card"
          }
        },
        "result": {
          "header": "Result",
          "code": "Code"
        }
      },
      "CreatableSelectBox": {
        "textCreator": "Create a new filtering option: [{{value}}]?",
        "noResultsText": "Create new values for filtering",
        "searchPromptText": "Start typing for create new options for filtering ..."
      },
      "CloseButton": {
        "title": "Close detail"
      },
      "NavigationSearch": {
        "search": {
          "placeholder": "Seach user or role"
        },
        "button": {
          "title": "Search"
        },
        "message": {
          "notFound": {
            "title": "Not found",
            "message": "Record by given text [{{text}}] not found."
          },
          "foundMore": {
            "title": "More records found",
            "message": "More records [{{counter}}] by given text [{{text}}] found. Expand the entered text to show record detail."
          }
        }
      }
    }
  },
  "enums" : {
    "ApiOperationTypeEnum" : {
      "CREATE" : "create",
      "UPDATE" : "edit",
      "GET" : "get",
      "DELETE" : "delete"
    },
    "RoleTypeEnum": {
      "SYSTEM": "System"
    },
    "TwoFactorAuthenticationTypeEnum": {
      "APPLICATION": "Application (TOTP)",
      "NOTIFICATION": "Notification (sms notification)",
      "helpBlock": {
        "APPLICATION": "Authentication code from your TOTP application (e.g. Google Authenticator).",
        "NOTIFICATION": "Authentication code from a text message (notification)."
      }
    },
    "TokenTypeEnum": {
      "CIDMST": "CIDMST",
      "SYSTEM": "SYSTEM",
      "helpBlock": {
        "CIDMST": "User authentication.",
        "SYSTEM": "System authentication."
      }
    },
    "AutomaticRoleRequestTypeEnum": {
      "TREE": "Role by tree structure",
      "ATTRIBUTE": "Role by attribute"
    },
    "ScriptCategoryEnum": {
      "DEFAULT": "Standard",
      "TRANSFORM_FROM": "Transformation from a system",
      "TRANSFORM_TO": "Transformation to a system",
      "SYSTEM": "System",
      "MAPPING_CONTEXT": "Build a provisioning context"
    },
    "RoleAssignTypeEnum": {
      "UNASSIGNED": "not assigned",
      "WAIT_ASSIGN": "not assigned (waiting for assign)",
      "WAIT_APPROVE": "not assigned (waiting for approval)",
      "ASSIGNED": "Assign",
      "FINITE_ASSIGNMENT": "Assign (with expiration)",
      "QUARANTINE": "Assign (in quarantine)",
      "WAIT_CHANGE_APPROVE": "Assign (update waiting for approval)",
      "WAIT_REMOVE_APPROVE": "Assign (removing waiting for approval)"
    },
    "OperationResultEnum": {
      "SUCCESS": "success",
      "FAILED": "failed"
    },
    "OperationTypeEnum": {
      "ADD": "ADD",
      "APPROVE": "APPROVE",
      "CHANGE": "CHANGE",
      "CREATE": "CREATE",
      "DENY": "DENY",
      "DISABLE": "DISABLE",
      "ENABLE": "ENABLE",
      "MOVE": "MOVE",
      "REMOVE": "REMOVE",
      "RENAME": "RENAME",
      "SET": "SET",
      "UNLINK": "UNLINK",
      "UPDATE": "UPDATE",
      "WANT_ADD": "WANT_ADD"
    },
    "PersistentTypeEnum": {
      "CHAR": "Char",
      "TEXT": "Text",
      "SHORTTEXT": "Short text (2000 chars)",
      "INT": "Integer",
      "LONG": "Long",
      "DOUBLE": "Double",
      "BOOLEAN": "Boolean",
      "DATE": "Date",
      "DATETIME": "Date + time",
      "BYTEARRAY": "Byte array",
      "UUID": "Uuid identifier",
      "ATTACHMENT": "Attachment",
      "CODELIST": "Code list",
      "ENUMERATION": "Enumeration"
    },
    "ObjectClassEnum": {
      "Identity": "Identity",
      "Role": "Role",
      "Organisation": "Organization",
      "Resource": "Resource",
      "WorkflowDefinition": "WorkflowDefinition"
    },
    "TaskStateEnum": {
      "APPROVED": "Approved",
      "DENIED": "Denied",
      "PENDING": "Waiting",
      "ESCALATED": "Escalated"
    },
    "DelegateStateEnum": {
      "PENDING": "Waiting for approval",
      "DENIED": "Denied",
      "APPROVED": "Approved"
    },
    "NotificationStateEnum": {
      "ALL": "Sent",
      "PARTLY": "Partly",
      "NOT": "Not sent"
    },
    "AccessTypeEnum": {
      "DENY_ALL": "Access denied to all",
      "PERMIT_ALL": "Allowed access to all",
      "NOT_AUTHENTICATED": "Not authenticated",
      "IS_AUTHENTICATED": "Login required",
      "HAS_ANY_AUTHORITY": "At least one of the privileges",
      "HAS_ALL_AUTHORITIES": "Assigned all the permissions"
    },
    "LogTypeEnum":  {
      "INFO": "INFO",
      "DEBUG": "DEBUG",
      "TRACE": "TRACE",
      "WARN": "WARN",
      "ERROR": "ERROR"
    },
    "AuditModificationEnum": {
      "ADD": "create",
      "MOD": "update",
      "DEL": "delete"
    },
    "PasswordPolicyTypeEnum": {
      "VALIDATE": "validation",
      "GENERATE": "generation"
    },
    "PasswordPolicyGenerateTypeEnum": {
      "RANDOM": "Random",
      "PASSPHRASE": "Passphrase",
      "PREFIX_AND_SUFFIX": "Prefix and suffix"
    },
    "PasswordPolicyIdentityAttributeEnum": {
      "USERNAME": "User name",
      "LASTNAME": "Last name",
      "FIRSTNAME": "First Name",
      "EMAIL": "E-mail",
      "TITLESBEFORE": "Titles before",
      "TITLESAFTER": "Titles after",
      "EXTERNALCODE": "Personal number"
    },
    "NotificationLevelEnum": {
      "SUCCESS": "SUCCESS",
      "INFO": "INFO",
      "WARNING": "WARNING",
      "ERROR": "ERROR"
    },
    "OperationStateEnum":{
      "CREATED": "Created",
      "RUNNING": "Running",
      "EXECUTED": "Executed",
      "EXCEPTION": "Failed",
      "NOT_EXECUTED": "Not executed",
      "BLOCKED": "Blocked",
      "CANCELED": "Canceled"
    },
    "TriggerTypeEnum": {
      "SIMPLE": "One-time start",
      "REPEAT": "Repeated start",
      "CRON": "Cron",
      "DEPENDENT": "Other task"
    },
    "IntervalTypeEnum": {
      "MINUTE": "minutes",
      "HOUR": "hours",
      "DAY": "day",
      "WEEK": "week",
      "MONTH": "month"
    },
    "WeekDayEnum": {
      "MONDAY": "mon",
      "TUESDAY": "tue",
      "WEDNESDAY": "wed",
      "THURSTDAY": "thu",
      "FRIDAY": "fri",
      "SATURDAY": "sat",
      "SUNDAY": "sun"
    },
    "CronMinuteEnum": {
      "ONE": "1",
      "TWO": "2",
      "THREE": "3",
      "FIVE": "5",
      "SIX": "6",
      "TEN": "10",
      "TWELVE": "12",
      "FIFTEEN": "15",
      "TWENTY": "20",
      "THIRTY": "30"
    },
    "CronHourEnum": {
      "ONE": "1",
      "TWO": "2",
      "THREE": "3",
      "FOUR": "4",
      "SIX": "6",
      "EIGHT": "8",
      "TWELVE": "12"
    },
    "RolePriorityEnum": {
      "NONE": "None (0)",
      "MINOR": "Minor (2)",
      "MAJOR": "Major (3)",
      "CRITICAL": "Critical (4)",
      "TRIVIAL": "Trivial (1)"
    },
    "RoleRequestStateEnum": {
      "CREATED": "Created",
      "CONCEPT": "Concept",
      "EXECUTED": "Executed",
      "CANCELED": "Canceled",
      "APPROVED": "Approved",
      "DISAPPROVED": "Disapproved",
      "IN_PROGRESS": "In progress",
      "EXCEPTION": "Exception",
      "DUPLICATED": "Duplicated"
    },
    "ConceptRoleRequestStateEnum": {
      "ADD": "Add",
      "UPDATE": "Update",
      "REMOVE": "Remove"
    },
    "RecursionTypeEnum": {
      "NO": "Without recursion",
      "DOWN": "Down by structure",
      "UP": "Up by structure"
    },
    "ScriptAuthorityTypeEnum": {
      "CLASS_NAME": "Class",
      "SERVICE": "Service"
    },
    "ContractStateEnum": {
      "EXCLUDED": "Excluded",
      "DISABLED": "$t(label.disabled)"
    },
    "AutomaticRoleAttributeRuleTypeEnum": {
      "IDENTITY": "Identity attribute",
      "IDENTITY_EAV": "Extended attribute of identity",
      "CONTRACT": "Contract attribute",
      "CONTRACT_EAV": "Extended attribute of contract"
    },
    "AutomaticRoleAttributeRuleComparisonEnum": {
      "EQUALS": "Equals",
      "NOT_EQUALS": "Not Equals",
      "START_WITH": "Start with",
      "NOT_START_WITH": "Not start with",
      "END_WITH": "End with",
      "NOT_END_WITH": "Not end with",
      "IS_EMPTY": "Is empty",
      "IS_NOT_EMPTY": "Is not empty",
      "CONTAINS": "Contains",
      "NOT_CONTAINS": "Not contains",
      "LESS_THAN_OR_EQUAL": "Less or equal than",
      "GREATER_THAN_OR_EQUAL": "Greater or equal than",
      "helpBlock": {
        "LESS_THAN_OR_EQUAL": "This option can only be used with numeric types.",
        "GREATER_THAN_OR_EQUAL": "This option can only be used with numeric types."
      }
    },
    "IdentityAttributeEnum": {
      "USERNAME": "User name (String)",
      "EXTERNAL_CODE": "Personal number (String)",
      "DISABLED": "Disabled (boolean)",
      "FIRSTNAME": "First name (String)",
      "LASTNAME": "Surname (String)",
      "TITLE_BEFORE": "Title before (String)",
      "TITLE_AFTER": "Title after (String)",
      "DESCRIPTION": "Description (String)",
      "PHONE": "Phone (String)",
      "EMAIL": "Email (String)",
      "STATE": "State (IdentityState)",
      "PASSWORD": "Password (GuardedString)",
      "ASSIGNED_ROLES": "User assigned roles",
      "ASSIGNED_ROLES_FOR_SYSTEM": "User assigned roles (for this system)",
      "FORM_PROJECTION": "User type (IdmFormProjectionDto)",
      "helpBlock": {
        "USERNAME": "",
        "EXTERNAL_CODE": "",
        "DISABLED": "",
        "FIRSTNAME": "",
        "LASTNAME": "",
        "TITLE_BEFORE": "",
        "TITLE_AFTER": "",
        "DESCRIPTION": "",
        "PHONE": "",
        "EMAIL": "",
        "STATE": "Default transformation is able to deduce (case insensitive) following states - CREATED, VALID, NO_CONTRACT, FUTURE_CONTRACT, LEFT, DISABLED, DISABLED_MANUALLY",
        "PASSWORD": "",
        "ASSIGNED_ROLES": "Input for transforming into the system (<strong>attributeValue</strong>) is a list of all <strong>valid</strong> user roles (list of AssignedRoleDto). This attribute is only for <strong>provisioning</strong> and for default strategy (SET).",
        "ASSIGNED_ROLES_FOR_SYSTEM": "Input for transforming into the system (<strong>attributeValue</strong>) is a list of all <strong>valid</strong> user roles which <strong>assigned this system</strong> (list of AssignedRoleDto). This attribute is only for <strong>provisioning</strong> and for default strategy (SET).",
        "FORM_PROJECTION": "<strong>Sync - </strong> You can use an identifier or <strong>projection code</strong> to get a user-type (projection).<br/><strong>Provisioning - </strong> Input value in transformation to the system (<strong> attributeValue </strong>) is the entire user-type object (IdmFormProjectionDto)."
      }
    },
    "ContractAttributeEnum": {
      "IDENTITY": "Owner (IdmIdentity - Id or username)",
      "VALID_FROM": "Valid from (LocalDate)",
      "VALID_TILL": "Valid till (LocalDate)",
      "WORK_POSITION": "Work position (IdmTreeNode - Id or code)",
      "POSITION": "Name of position (String)",
      "EXTERNE": "Externe (boolean)",
      "MAIN": "Main relation (boolean)",
      "DESCRIPTION": "Description (String)",
      "DISABLED": "Disabled (boolean)",
      "GUARANTEES": "Guarantees (IdmIdentity - List of ids or usernames)",
      "POSITIONS": "Other positions (IdmTreeNode - List of ids or codes)",
      "STATE": "State (ContractState - String)",
      "helpBlock": {
        "IDENTITY": "",
        "VALID_FROM": "",
        "VALID_TILL": "",
        "WORK_POSITION": "",
        "POSITION": "",
        "EXTERNE": "",
        "MAIN": "",
        "DESCRIPTION": "",
        "DISABLED": "",
        "GUARANTEES": "",
        "POSITIONS": "",
        "STATE": ""
      }
    },
    "ContractSliceAttributeEnum": {
      "IDENTITY": "Owner (IdmIdentity - Id or username)",
      "VALID_FROM": "Valid from of slice (LocalDate)",
      "CONTRACT_VALID_FROM": "Valid from of contract (LocalDate)",
      "CONTRACT_VALID_TILL": "Valid till of contract (LocalDate)",
      "WORK_POSITION": "Work position (IdmTreeNode - Id or code)",
      "POSITION": "Name of position (String)",
      "EXTERNE": "Externe (boolean)",
      "MAIN": "Main relation (boolean)",
      "DESCRIPTION": "Description (String)",
      "DISABLED": "Disabled (boolean)",
      "GUARANTEES": "Guarantees (IdmIdentity - List of ids or usernames)",
      "STATE": "State (ContractState - String)",
      "CONTRACT_CODE": "Code of the parent contract (String - same for all slices)",
      "helpBlock": {
        "IDENTITY": "",
        "VALID_FROM": "",
        "CONTRACT_VALID_FROM": "",
        "CONTRACT_VALID_TILL": "",
        "WORK_POSITION": "",
        "POSITION": "",
        "EXTERNE": "",
        "MAIN": "",
        "DESCRIPTION": "",
        "DISABLED": "",
        "GUARANTEES": "",
        "STATE": "",
        "CONTRACT_CODE": ""
      }
    },
    "IdentityStateEnum": {
      "CREATED": "Created",
      "NO_CONTRACT": "No contract",
      "FUTURE_CONTRACT": "Future contract",
      "VALID": "Valid",
      "PASSWORD_EXPIRED": "Password expired",
      "LEFT": "Left",
      "DISABLED": "$t(enums.ContractStateEnum.EXCLUDED)",
      "DISABLED_MANUALLY": "$t(label.disabled) - manually"
    },
    "PriorityTypeEnum": {
      "IMMEDIATE": "Immediate",
      "HIGH": "High",
      "NORMAL": "Normal"
    },
    "ExportImportEnum": {
      "EXPORT": "Export",
      "IMPORT": "Import"
    },
    "DateFaceEnum": {
      "TODAY": "Today",
      "YESTERDAY": "Yesterday",
      "THIS_WEEK": "This week",
      "THIS_MONTH": "This month",
      "LAST_WEEK": "Last week",
      "LAST_TWO_WEEKS": "Last 2 weeks",
      "LAST_SEVEN_DAYS": "Last 7 days",
      "LAST_MONTH": "Last month",
      "LAST_THIRTY_DAYS": "Last 30 days",
      "THIS_YEAR": "This year",
      "BETWEEN": "Between"
    }
  },
  "dashboard": {
    "profileDashboard" : {
      "header": "Your basic information",
      "goToProfil": "Go to profile"
    },
    "longRunningTaskDashboard": {
      "header": "Created long running tasks"
    },
    "role-request": {
      "header": "Requests for change roles",
      "creator": {
        "header": "Requests, which I created",
        "identity": "Requests, which user created"
      },
      "applicant": {
        "header": "Requests for me",
        "identity": "Requests for user"
      }
    }
  },
  "permission": {
    "base" : {
      "ADMIN": "Administration (all)",
      "COUNT": "Number of records",
      "AUTOCOMPLETE": "View in select box (autocomplete)",
      "READ": "Read",
      "CREATE": "Create",
      "UPDATE": "Update",
      "DELETE": "Delete",
      "EXECUTE": "Execute",
      "PASSWORDCHANGE": "Password change",
      "CHANGEPERMISSION": "Change roles",
      "MANUALLYDISABLE": "Deactivate user manually",
      "MANUALLYENABLE": "Activate user manually",
      "CANBEREQUESTED": "Can be requested",
      "CHANGEPROJECTION": "Change user type (projection)",
      "CHANGEUSERNAME": "Change login",
      "CHANGENAME": "Change first name, surname and titles",
      "CHANGEPHONE": "Change phone",
      "CHANGEEMAIL": "Change email",
      "CHANGEEXTERNALCODE": "Change personal number",
      "CHANGEDESCRIPTION": "Change note",
      "SWITCHUSER": "Login as user (switch user)",
      "DELEGATOR": "Delegator",
      "DELEGATE": "Delegate"
    },
    "group": {
      "AUTHORIZATIONPOLICY": "Permissions",
      "APP": "App configuration",
      "AUDIT": "Audit",
      "CONFIGURATION": "Configuration (app)",
      "IDENTITY": "Users",
      "IDENTITYROLE": "Assigned roles",
      "IDENTITYCONTRACT": "Contracted positions",
      "PROFILE": "User profile (picture)",
      "CONTRACTSLICE": "Time slices",
      "CONTRACTGUARANTEE": "Contracted position's guarantees",
      "CONTRACTPOSITION": "Other contract positions",
      "CONTRACTSLICEGUARANTEE": "Time slices 's guarantees",
      "MODULE": "Modules",
      "NOTIFICATION": "Notifications",
      "ROLE": "Roles",
      "ROLECATALOGUE": "Role catalog",
      "ROLECATALOGUEROLE": "Role catalog - assigned roles",
      "ROLEGUARANTEE": "$t(entity.Role.guarantees) - by identity",
      "ROLEGUARANTEEROLE": "$t(entity.Role.guarantees) - by role",
      "ROLEFORMATTRIBUTE": "Role attributes",
      "ROLECOMPOSITION": "Business roles definition",
      "INCOMPATIBLEROLE": "Incompatible roles definition (Segregation of Duties)",
      "ROLETREENODE": "Automatic roles (organization structure)",
      "TREENODE": "Tree nodes",
      "TREETYPE": "Structure types",
      "SCRIPT": "Scripts",
      "FORMDEFINITION": "Forms - definitions",
      "FORMPROJECTION": "Forms - projections",
      "FORMATTRIBUTE": "Forms - attributes",
      "FORMVALUE": "Forms - values",
      "CODELIST": "Code lists",
      "CODELISTITEM": "Code lists - items",
      "NOTIFICATIONCONFIGURATION": "Notifications - configuration",
      "NOTIFICATIONTEMPLATE": "Notifications - templates",
      "PASSWORDPOLICY": "Password policy",
      "ROLEREQUEST": "Requests for change roles",
      "REQUEST": "Requests (universal)",
      "REQUESTITEM": "Requests - items (universal)",
      "SCHEDULER": "Scheduler and long running tasks",
      "WORKFLOWDEFINITION": "Workflow - definitions",
      "CONFIDENTIALSTORAGEVALUE": "Confidential storage",
      "WORKFLOWTASK": "Workflow - tasks",
      "AUTOMATICROLEATTRIBUTE": "Automatic roles (attributes)",
      "AUTOMATICROLEATTRIBUTERULE": "Rules for automatic roles (attributes)",
      "AUTOMATICROLEREQUEST": "Requests for automatic roles",
      "AUTOMATICROLEATTRIBUTERULEREQUEST": "Requests for automatic roles (rules of the attributes)",
      "TOKEN": "Token",
      "GENERATEVALUE": "Value generate",
      "PASSWORD": "Users passwords",
      "EXPORTIMPORT": "Export/Import",
      "DELEGATIONDEFINITION": "Delegation",
      "ENTITYEVENT": "Entity events",
      "ENTITYSTATE": "Entity states"
    }
  },
  "content": {
    "error": {
      "401": {
        "title": "401",
        "description": "To access must be logged."
      },
      "403": {
        "title": "403",
        "description": "Insufficient access rights."
      },
      "404": {
        "title": "404",
        "description": "Page not found.",
        "record": "Record ID <strong>{{id}}</strong> does not exist."
      },
      "500": {
        "title": "Oups, this is embarrassing"
      },
      "503": {
        "title": "503",
        "description": "The service is currently not available.",
        "note": "Please, try it later."
      },
      "syntax-error": {
        "message": "Server communication failed, try to execute operation again. If the issue persists, please contact your application administrator."
      }
    },
    "about": {
      "header": "About app",
      "title": "$t(content.about.header)",
      "sourceCodeOn": "Project source available at",
      "link": "$t(content.about.header)"
    },
    "login": {
      "header": "Log in",
      "title": "$t(content.login.header)",
      "username": "$t(entity.Identity.username)",
      "password": "Password",
      "admin": "Administrator",
      "button": {
        "login": "$t(content.login.header)",
        "passwordChange": "$t(content.password.change.button.passwordChange)",
        "logout": {
          "value": "Logout",
          "title": "Log out completely and continue on new logging"
        }
      },
      "twoFactor": {
        "header": "Two-factor authentication",
        "verificationCode": {
          "label": "Authentication code",
          "placeholder": "6-digit code"
        },
        "help": {
          "header": "How to get authentication code",
          "content": "<p>After you sign in to $t(app.name) using your username and password, you will be prompted to provide an authentication code from a text message (notification) or your TOTP application (e.g. Google Authenticator).</p><p>$t(app.name) will only ask you to provide your two-factor authentication code again if you have logged out, are using a new device, or your session expires.</p>"
        }
      }
    },
    "logout": {
      "header": "Log Out",
      "title": "$t(content.logout.header)",
      "message": {
        "logout": "Log Out."
      }
    },
    "password": {
      "header": "Information about password",
      "label": "$t(content.password.header)",
      "title": "$t(content.password.header)",
      "noData": "Selected user doesn't have a password. Password will be created after is changed on the first time.",
      "created": {
        "label": "Created",
        "help": "Date of created password"
      },
      "creator": {
        "label": "Creator",
        "help": "Username of create password."
      },
      "unsuccessfulAttempts": {
        "label": "Number of unsuccessful attempts",
        "help": "Current number of failed login attempts against IdM."
      },
      "validFrom": {
        "label": "Valid from",
        "help": "The valid from is used to check minimum number of days, after expiration of which the password can be changed again. If it is empty, then the check is skipped during the password change attempt."
      },
      "validTill": {
        "label": "Valid till",
        "help": "The valid till is composed from the password policy setting."
      },
      "lastSuccessfulLogin": {
        "label": "Last successful login",
        "help": "Date of last successful login to IdM. It is possible update last successful login by authenticate by another system."
      },
      "blockLoginDate": {
        "label": "Login block date",
        "help": "Date of block login and password change."
      },
      "passwordNeverExpires": {
        "label": "Password never expires",
        "help": "The password will never expire. Valid till will never setup."
      },
      "blockLoginDateInfo": "$t(content.identity.profile.blockLoginDate)",
      "passwordNeverExpiresAndValidTillInfo": "For passwords that can never expire, it cannot be set valid till.",
      "change": {
        "header": "Change password",
        "title": "Change password",
        "passwordOld": "Old password",
        "password": "New password",
        "passwordChangeTooltip": "Password strength:",
        "passwordAgain": {
          "label": "Re-enter new password",
          "placeholder": "Password again"
        },
        "button": {
          "passwordChange": "Change password"
        },
        "message": {
          "passwordChange": {
            "info": "This form can be used to change the password for your user identity",
            "link": "Show form to change password",
            "required": "Required to change password CzechIdM",
            "idmNotEnabled": "Password change for CzechIdM is not allowed",
            "success": {
              "title": "Changing the password is OK",
              "message": "Your password was successfully changed on all your accounts."
            }
          },
          "passwordMustChange": {
            "success": {
              "title": "Changing the password is OK",
              "message": "Your CzechIdM password was successfully changed."
            }
          }
        },
        "help": {
          "header": "Change password",
          "body": "<div class=\"alert alert-info\">The change password form is only for external employees. An internal employee can change his password after signing in to his profile.</div>To change your password, fill out the form. In this form, you enter your username, your existing password, the new password you want, and finally your new password for review. You can then confirm the change by clicking the <button class=\"btn btn-xs btn-success disabled soft-disabled\">Change password</button> button."
        }
      },
      "strength" : {
        "weak": "weak",
        "okay": "normal",
        "strong": "strong",
        "great": "perfect"
      },
      "save": {
        "success": "Matadata about password was successfully saved"
      }
    },
    "messages": {
      "header": "Messages history",
      "title": "Messages",
      "empty": "No messages found.",
      "button": {
        "removeAll": "Remove all messages."
      },
      "help": {
        "header": "Messages history",
        "body": "The list shows the history of the messages displayed in the user interface. If the message is closed earlier, it can be found, checked, copied, and so on. <br /> <br /> The list is sorted by date when the message is displayed in descending order and displays the last <strong> 25 </ strong>."
      }
    },
    "passwordPolicies": {
      "header": "Password policies",
      "title": "Password policies",
      "edit": {
        "header": "Password policy details",
        "title": "Password policy details"
      },
      "basic": {
        "header": "Settings",
        "title": "Settings"
      },
      "advanced": {
        "header": "Enhanced control",
        "title": "Enhanced control"
      },
      "characters": {
        "header": "Characters",
        "title": "Characters"
      },
      "create": {
        "title": "New configuration of password policies",
        "header": "New configuration of password policies"
      },
      "validation": {
        "maxLength": "Maximum password length: {{0}}",
        "minLength": "Minimum password length: {{0}}",
        "minNumber": "Minimum number of digits: {{0}}",
        "minUpperChar": "Minimum number uppercase characters: {{0}}",
        "prohibited": "Password contains illegal characters: {{0}}",
        "beginProhibited": "Password starts with forbidden character: {{0}}",
        "endProhibited": "Password ends with forbidden character: {{0}}",
        "minLowerChar": "Minimum number of lowercase characters: {{0}}",
        "minSpecialChar": "Minimum number of special characters: {{0}}",
        "policiesNames": "Password does not meet these password policies: {{0}}",
        "policiesNamesPreValidation": "Password have to meet these password policies: {{0}}",
        "minRulesToFulfillCount": "Minimum mandatory rules to fulfill: {{0}}",
        "minRulesToFulfill": "Fill in at least {{count}} of the following rules: {{0}}",
        "passwordSimilarUsername": "Password cannot be similar to login: {{0}}",
        "passwordSimilarEmail": "Password cannot be similar to email: {{0}}",
        "passwordSimilarFirstName": "Password cannot be similar to first name: {{0}}",
        "passwordSimilarLastName": "Password cannot be similar to surname: {{0}}",
        "passwordSimilarTitlesBefore": "Password cannot be similar to title: {{0}}",
        "passwordSimilarTitlesAfter": "Password cannot be similar to title: {{0}}",
        "passwordSimilarExternalCode": "Password cannot be similar to personal number: {{0}}",
        "date": "Password can not be change now, try again: {{0}}",
        "advancedControlValidateType": "Enhanced control is available only for validate policies.",
        "specialCharacterBase":{
          "list": "List of special characters for password policies: {{0}}",
          "text": "Special characters: {{0}}"
          },
        "forbiddenCharacterBase": {
          "list": "List of forbidden characters for password policies: {{0}}",
          "text": "Forbidden characters: {{0}}"
          },
        "forbiddenBeginCharacterBase": {
          "list": "List of characters passwrods must not start with: {{0}}",
          "text": "Forbidden initial characters: {{0}}"
          },
        "forbiddenEndCharacterBase": {
          "list": "List of characters passwrods must not end with: {{0}}",
          "text": "Forbidden final characters: {{0}}"
          },
        "passwordSimilarUsernamePreValidate": "login",
        "passwordSimilarEmailPreValidate": "email",
        "passwordSimilarFirstNamePreValidate": "first name",
        "passwordSimilarLastNamePreValidate": "surname",
        "passwordSimilarTitlesBeforePreValidate": "title before name",
        "passwordSimilarTitlesAfterPreValidate": "title after name",
        "passwordSimilarExternalCodePreValidate": "personal number",
        "passwordSimilarPreValidate": "Password cannot be similar to",
        "passwordHintPreValidate": "Hint for a ",
        "passwordHintPreValidatePwd": "new password",
        "passwordHintPreValidateHeader": "Password have to meet this requirements:",
        "maxHistorySimilar": "The password must be different from the last {{0}} passwords.",
        "prevalidationLink": {
          "title": "Rules for new password"
        }
      },
      "save": {
        "success": "Password policy [{{name}}] successfully saved."
      },
      "rulesHelp": "Select which rules are required set number of how many additional rules newly created password must fulfill at least.",
      "emptyValues": "To omit any field, leave it empty.",
      "prefixAndSuffixGeneratedHelp": "Prefix and suffix are not counted in the total length and another validation during the password generation. For example, using prefix and suffix may generate a password longer than the maximum length."
    },
    "configuration": {
      "header": "Configuration",
      "title": "Configuration",
      "edit": {
        "header": "{{name}} <small>detail configuration items</small>"
      },
      "create": {
        "header": "New configuration item"
      },
      "save": {
        "success": "Configuration item [{{name}}] successfully saved",
        "sucessBulk": "Configuration items were successfully saved"
      },
      "addMore":{
        "header": "Add more configuration items",
        "configurationArea": {
          "header": "Configuration items",
          "helpBlock": "Can be added more configuration items. Comments after character '#' are ignored."
        }
      },
      "configurable": "Configurable items <small>editable, can override static items</small>",
      "environment": "Static environment configuration items <small>$t(label.readOnly)</small>",
      "fromFile": "Application configuration from configuration files <small>application.properties</small>",
      "fromEnvironment": "Environment configuration <small>backend</small>",
      "guarded": "If item key contains values: [<strong>{{guarded}}</strong>] the item is automatically confidential and non-public. Items with key beginning with [<strong>idm.sec.</strong>] can not be public.",
      "confidential": {
        "help": "Item is stored in encrypted repository"
      },
      "secured": {
        "notAllowed": "You do not have permission to edit the system configuration",
        "help": "Public items are accessible without logging. Confidential items can be public."
      },
      "nameDoesntContainPrefixAlert": "Be careful, you may be inserting a configuration option that does not have the prefix <strong>'{{prefix}}'</strong>. This option may not work correctly. For more information, visit <a href='$t(app.documentation.url)/devel/documentation/application_configuration/dev/backend' target='_blank'> app configuration </a>.",
      "forceSave": {
        "header": "Overwrite configurable item",
        "message": "Configurable item [<strong>{{name}}</strong>] is already existing with value [<strong>{{value}}</strong>]. Do you want to overwrite it?"
      }
    },
    "monitoring": {
      "header": "Monitoring",
      "title": "Monitoring",
      "type": {
        "monitoring-database": {
          "name": "Number of records in selected database tables"
          }
        }
      },
    "tasks-summary": {
      "summary": "Tasks list",
      "approvalTasks": "Approved tasks",
      "filter": {
        "createdDateFrom": {
          "label": "Created from",
          "placeholder": "Created from"
        },
        "createdDateTill": {
          "label": "Created till",
          "placeholder": "Created till"
        },
        "closeDateFrom": {
          "label": "Closed by",
          "placeholder": "The task was finished by"
        },
        "closeDateTill": {
          "label": "Ended till",
          "placeholder": "The task was completed till"
        },
        "approvedBy": {
          "label": "Approver",
          "placeholder": "Who approved the task"
        },
        "taskState": {
          "label": "State",
          "placeholder": "Task state"
        },
        "taskName": {
          "label": "Task name",
          "placeholder": "Task name"
        },
        "taskId": {
          "label": "ID",
          "placeholder": "Task ID"
        },
        "note": {
          "label": "Note",
          "placeholder": "Task note"
        }
      }
    },
    "tasks-assigned": {
      "assigned": "Assigned tasks",
      "empty": {
        "message": "All assigned tasks are resolved."
      },
      "action": {
        "approve": {
          "action": "Approve task",
          "header": "Task to approve",
          "header_plural": "Tasks to approve",
          "message": "Do you really want to approve the selected task?",
          "message_plural": "Do you really want to approve <strong>{{count}}</strong> the selected tasks?",
          "error": "When approving the task {{task}} task error occurred.",
          "success": "The task successfully approved",
          "success_plural": "Tasks were successfully approved"
        },
        "disapprove": {
          "action": "Reject",
          "header": "Reject task",
          "header_plural": "Reject tasks",
          "message": "Do you really want to reject the selected task?",
          "message_plural": "Do you really want to reject <strong>{{count}}</strong> the selected tasks?",
          "error": "When rejecting the task {{task}} task error occurred",
          "success": "Task successfully approved",
          "success_plural": "Tasks were successfully approved"
        }
      }
    },
    "task":{
      "instances": {
        "header": "Unresolved tasks",
        "title": "Unresolved tasks"
      },
      "instance": {
        "header": "Task details",
        "title": "Task details",
        "name": "Activity name",
        "description": "Task name",
        "createdDate": "Created on",
        "applicantFullName": "Applicant name",
        "applicant": "Requested for",
        "implementerIdentifier": "Applicant",
        "successComplete": "Task {{name}} successfully solved.",
        "completeTaskConfirmTitle": "Confirmation of task completion",
        "completeTaskConfirmDetail": "Do you really want to settle this task?",
        "role": {
          "currentRoles": "Currently assigned roles",
          "conceptIdentityRoles": "Applicant's roles"
        },
        "delegation": {
          "header": "Delegated task",
          "text": "This task was delegated to you."
        },
        "decision": {
          "placeholder": "Insert the reason",
          "validationMessage": "Reason has to be provided"
        }
      },
      "historicInstance": {
        "name": "<strong>This task has already been solved.</strong>",
        "assignee": "Resolved by",
        "originalImplementer": "Original implementer",
        "endTime": "Date of resolution",
        "result": "Result",
        "process": "The task is part of the process"
      },
      "DefaultTaskDetail": {
        "applicant": "Requested for",
        "implementerIdentifier": "Applicant",
        "createdDate": "Created date",
        "approvers": "Approvers of this task",
        "note": "$t(entity.ApprovalTask.note)",
        "taskState": "$t(entity.ApprovalTask.taskState)",
        "approve": "Accept",
        "disapprove": "Reject",
        "messages": {
          "approved":"Task successfully approved",
          "disapproved": "Task successfully rejected",
          "confirmTaskApproveTitle": "Task approve confirmation",
          "confirmTaskApprove": "Do you really want to approve this task?",
          "confirmTaskDisapprove": "Do you really want to reject this task?",
          "confirmTaskDisapproveTitle": "Task reject confirmation"
        }
      },
      "RoleApprovalTaskDetail": {
        "roleName" : "Role name"
      },
      "IdentityRoleConceptTable": {
        "oldValue": "Old value [{{oldValue}}]",
        "oldValueNotExist": "Old value was empty",
        "switchShowChangesOnly": "Show changes only",
        "systemState": "System state",
        "create": {
          "header": "Add roles",
          "headerByIdentity": "Add roles by user"
        },
        "edit": {
          "header": "Edit roles"
        },
        "selectRoleCatalogue": {
          "header": "Selection roles from folders of catalog"
        },
        "duplicate": {
          "button": {
            "remove": {
              "label": "Remove duplicate"
            }
          }
        },
        "action": {
          "deleteAdded": {
            "header": "Delete added roles",
            "message": "Do you really want to delete added roles?"
          },
          "deleteChanged": {
            "header": "Delete changed roles",
            "message": "Do you really want to delete changed roles?"
          },
          "deleteRemoved": {
            "header": "Delete removed roles",
            "message": "Do you really want to delete removed roles?"
          }
        },
        "identityRoleAttributes": {
          "header": "Role attributes"
        },
        "addByIdentity": {
          "header": "Add by user",
          "source": {
            "header": "Source user"
          },
          "target": {
            "header": "Target user"
          },
          "selectUser": {
            "label": "User select",
            "help": "Select the user from whom the roles will be copied."
          },
          "copyRoleParameters": {
            "label": "Copy including role parameters",
            "help": "After check, will be copied parameter values filled in roles."
          },
          "selectIdentityContract": {
            "label": "Source user contract",
            "help": "Select contract of user. Select contract filtering roles of selected user.",
            "placeholder": "Select contract"
          },
          "targetIdentityContract": {
            "label": "Target user contract"
          },
          "environment": {
            "help": "Filtering roles of selected user by environment."
          },
          "roleSelectionHeader": "Selection of roles",
          "roleSelect": "Roles select from user {{username}}",
          "selectedIdentityRoles": "Selected roles",
          "noIdentity": "Select source user.",
          "noIdentityRoles": "No assigned roles exist",
          "noSelectedIdentityRoles": "No newly assigned roles",
          "buttons": {
            "addAllIdentityRoles": "Add all roles",
            "addSelectedIdentityRoles": "Add only selected roles",
            "removeSelectedIdentityRoles": "Remove selected roles",
            "removeAllIdentityRoles": "Remove all roles"
          },
          "showOnlyDirectRoles": {
            "label": "Display the list <strong>without sub roles</strong>, which are assigned indirectly by business role",
            "help": "After checked, only directly assigned roles will be displayed."
          },
          "legend": {
            "header":"Legend",
            "role-types": {
              "role": "Directly assigned application role.",
              "business-role": "Directly assigned business role. Defined sub roles will be assigned together with this role.",
              "automatic-role": "Role assigned by automatic role configuration (by tree structure or attribute).",
              "sub-role": "Role assigned by business role (sub role).",
              "disabled": "Role can be selected, when role is active and can be requested."
            }
          }
        },
        "alert": {
          "invalidConcept": "Request is invalid. For more informations go to the detail."
        }
      }
    },
    "tasks": {
      "all": {
        "title": "All tasks",
        "label": "All tasks"
      },
      "identity": {
        "title": "My tasks",
        "label": "My tasks"
      }
    },
    "identities": {
      "header": "Users",
      "title": "Users",
      "filter": {
        "name": {
          "placeholder": "Login, personal number, surname, name, e-mail or note"
        },
        "organization": {
          "label": "Org. structure",
          "placeholder": "Element in organization structure",
          "option": {
            "withoutWorkPosition": {
              "label": "-- without work position in organization structure --"
            }
          }
        },
        "recursively": {
          "label": "Recursively",
          "placeholder": "Recursively by tree structure down",
          "yes": "Recursively by tree structure down",
          "no": "On selected tree node only"
        },
        "role": {
          "label": "Role",
          "placeholder": "Assigned role"
        },
        "disabled": {
          "label": "$t(label.disabled)",
          "placeholder": "$t(label.disabled)"
        },
        "identifiers": {
          "label": "Identifiers",
          "placeholder": "Own group search by usernames, surnames or personal numbers. $t(content.identities.filter.identifiers.tooltip)",
          "tooltip": "Enter individual values of your group, separated by a comma."
        },
        "state": {
          "label": "State",
          "placeholder": "Identity state"
        },
        "formProjection": {
          "placeholder": "$t(entity.Identity.formProjection.label)",
          "option": {
            "withoutFormProjection": {
              "label": "-- without user type --"
            }
          }
        }
      },
      "action": {
        "deactivate": {
          "action": "Deactivate manually",
          "header": "Deactivate user manually",
          "header_plural": "Deactivate users manually",
          "message": "Do you really want to deactivate the selected user <strong>{{username}}</strong> manually? Manually deactivated user can be activated manually only.",
          "message_plural": "Do you really want to deactivate <strong>{{count}}</strong> selected users manually? Manually deactivated users can be activated manually only.",
          "error": "When you deactivate a user {{username}} an error occurred",
          "success": "Selected users [{{usernames}}] are deactivated"
        },
        "activate": {
          "action": "Activate manually",
          "header_0": "N/A",
          "header": "Activate user manually",
          "header_plural": "Activate users manually",
          "message": "Do you really want to activate the selected user <strong>{{username}}</strong> manually? Only manually deactivated user can be activated.",
          "message_plural": "Do you really want to activate <strong>{{count}}</strong> selected users? Only manually deactivated users can be activated.",
          "error": "When you activate a user {{username}} an error occurred",
          "success": "Selected users [{{usernames}}] are activated"
        },
        "remove": {
          "action": "Remove"
        },
        "add": {
          "header": "Create user - choose form type",
          "or": "or",
          "default": "use default form"
        }
      },
      "info": {
        "warningTooMuchIds": "Only first [{{limit}}] users out of [{{count}}] are shown!"
      }
    },
    "tree": {
      "header": "Tree structures",
      "title": "Tree structures",
      "filter": {
        "parentId": {
          "label": "Superior element"
        }
      },
      "typeNotFound": "Structure type not found.",
      "newType": {
        "label": "Create new type",
        "title": "Please, continue creating a new structure type."
      },
      "typePick": "Select the element",
      "typePickPlaceHolder": "Select the element.",
      "nodes": {
        "header": "Structure elements",
        "title": "Structure elements",
        "addType": "Add element",
        "reloadTree": "Cancel the filter and reload the tree",
        "tab": {
          "identities": "Users",
          "nodes": "Structure elements"
        }
      },
      "node": {
        "detail": {
          "header": "Element details",
          "title": "Element details",
          "label": "Basic information",
          "edit": {
            "title": "Element details",
            "header": "{{name}} element details"
          },
          "create": {
            "title": "New element",
            "header": "New element"
          },
          "save": {
            "success": "Element [{{name}}] successfully saved"
          }
        },
        "eav": {
          "header": "More information",
          "title": "More information",
          "save": {
            "success": "Extended attributes for element [{{name}}] was successfully saved."
          },
          "error" : {
            "notFound": "Extended attributes definition for element not found."
          }
        },
        "roles": {
          "header": "Automatic roles",
          "title": "Automatic roles",
          "label": "Automatic roles",
          "edit": {
            "header": "{{name}} <small>automatic role detail</small>"
          },
          "create": {
            "header": "New automatic role"
          },
          "save": {
            "success": "Automatic role [{{record}}] successfully saved"
          }
        },
        "identities": {
          "header": "Users",
          "title": "Users",
          "label": "Users"
        }
      },
      "types": {
        "header": "Structure types",
        "title": "Structure types",
        "edit": "structure type detail",
        "create": "New type of tree structure",
        "save": {
          "success": "Type [{{name}}] successfully saved."
        },
        "configuration": {
          "button": {
            "rebuild": "Reindex"
          },
          "action": {
            "rebuild" : {
              "header": "Reindex",
              "message": "Do you really want to rebuild index for tree type structure [{{record}}]",
              "success": "Rebuild index for tree type structure [{{record}}] was scheduled."
            }
          },
          "index": {
            "valid": "Tree type structure index is valid.",
            "invalid": "Tree type structure index is invalid. Index rebuild is needed. Search on invalid index will not return relevant results.",
            "rebuild": "Index rebuild is in progress <small>Tree nodes editing is not possible for now</small>"
          }
        }
      }
    },
    "rolesMenu": {
      "header": "Roles",
      "title": "Roles"
    },
    "roleCatalogues": {
      "header": "Role catalog",
      "title": "Role catalog",
      "edit": {
        "title": "Folder details",
        "header": "{{name}} folder details"
      },
      "create": {
        "header": "New folder",
        "title": "New folder"
      },
      "save": {
        "success": "Folder [{{name}}] successfully saved to role catalog."
      },
      "parentPick": "Select folder",
      "reloadTree": "Reload tree catalog roles",
      "addRoleCatalogue": "Add now folder",
      "filter": {
        "name": "Name",
        "namePlaceHolder": "Folder name",
        "parent": "Folder parent",
        "parentPlaceHolder": "Folder parent",
        "niceName": "Name for users",
        "code": "Code",
        "text": "Code or name"
      },
      "tabs": {
        "basic": "Basic information"
      },
      "roles": {
        "title": "Roles",
        "header": "Roles"
      }
    },
    "automaticRoles": {
      "title": "Automatic roles",
      "header": "Automatic roles",
      "tree": {
        "header": "Automatic roles from organizational structure",
        "title": "By organizational structure"
      },
      "universalRequestNotSupported": {
        "title": "Automatic roles can not be managed within this request.",
        "text": "Automatic roles have their own agenda of requests, use them for their management.",
        "gotToRequests": {
          "label": "Automatic roles agenda"
        }
      },
      "emptyRules": "No rules found. The automatic role will not be assigned to any users.",
      "attribute": {
        "header": "Automatic roles based on the attribute",
        "title": "Based on the attribute",
        "create": {
          "header": "New automatic roles based on the attribute",
          "title": "New automatic roles based on the attribute"
        },
        "edit": {
          "header": "Edit automatic roles based on the attribute",
          "title": "Edit automatic roles based on the attribute"
        },
        "rules": {
          "header": "Rules",
          "title": "Rules"
        },
        "basic": {
          "header": "Basic informations",
          "title": "Basic informations"
        },
        "identities":{
          "header": "Users with assigned role",
          "title": "Users with role",
          "filter": {
            "text": "Name of user or value"
          }
        },
        "automaticRoleAttributeSaveFirst": "To add individual rules, you need to save the automatic role first.",
        "rule": {
          "create": {
            "header": "New rule",
            "title": "New rule"
          },
          "edit": {
            "header": "Rule edit",
            "title": "Rule edit"
          },
          "filter": {
            "text": "Name of attribute or value"
          }
        },
        "save": {
          "success": "Save new automatic role based on the attribute was successfully.",
          "recalculate": "Automatic role [{{name}}] will be recalculated. Assign role to identities run asynchronously. You can see progress in long running tasks agenda."
        },
        "filter": {
          "text": "Name of automatic role or role name"
        },
        "attributeCantBeUsed": {
          "text": "Attribute [{{name}}] can't be used for create new rule",
          "confidential": "$t(content.automaticRoles.attribute.attributeCantBeUsed.text), attribute is marked as confidential.",
          "persistentTypeText": "$t(content.automaticRoles.attribute.attributeCantBeUsed.text), attribute has persistent type TEXT.",
          "multivaluedCantBeUsed": "$t(content.automaticRoles.attribute.attributeCantBeUsed.text), with multivalued attribute can't be used this comparsion."
        }
      },
      "recalculate": {
        "label": "Recalculation",
        "header": "Recalculate the automatic role based on attributes?",
        "message": "<b>Yes:</b> Role assignment to users will start now as a new long running task.<br /><b>No:</b> This configuration will be saved as a concept."
      },
      "button": {
        "change": {
          "label": "Change automatic role",
          "header": "Change this automatic role",
          "text": "Creates a request to change this automatic role. The request may require approval."
        }
      },
      "request":{
        "header": "Change request for automatic role"
      }
    },
    "formDefinitions": {
      "header": "Form definitions",
      "title": "Form definitions",
      "edit": {
        "title": "Form definition detail"
      },
      "create": {
        "title": "New form definition",
        "header": "New form definition"
      },
      "filter": {
        "text": "Code, name, type or description"
      },
      "attributes": {
        "title": "Form Attributes"
      },
      "detail": {
        "title": "Basic information"
      },
      "save": {
        "success": "Form definition [{{name}}] successfully saved"
      },
      "localization": {
        "header": "Form localization",
        "label": "Localization",
        "title": "Form localization",
        "check": {
          "found": "Form localization exists. Localization found in localization file.",
          "not-found": "Form localization doesn't exist. Define her by the example bellow in module localization files.",
          "attributes-not-found": "Form definition attributes <strong class=\"highlight\">{{attributes}}</strong> are not localized. Add localization into module localization files."
        },
        "how-to": {
          "header": "How to",
          "message": "Form localization can be defined in module <strong class=\"highlight\">{{name}}</strong> (in the <strong>eav</strong> section):"
        }
      }
    },
    "form-projections": {
      "header": "Form projections",
      "title": "Form projections",
      "edit": {
        "title": "Form projection detail"
      },
      "create": {
        "title": "New form projection",
        "header": "New form projection"
      },
      "filter": {
        "text": {
          "placeholder": "Code or owner type"
        }
      },
      "detail": {
        "title": "Basic information"
      },
      "save": {
        "success": "Form projection [{{code}}] successfully saved"
      },
      "identities": {
        "label": "Users",
        "header": "Users with projection",
        "title": "Users with projection"
      },
      "localization": {
        "header": "Localization",
        "title": "Localization",
        "check": {
          "found": "Form projection localization exists. Localization found in localization file.",
          "not-found": "Form projection localization doesn't exist. Define her by the example bellow in module localization files."
        },
        "how-to": {
          "header": "How to",
          "message": "Form projection localization can be defined in module <strong class=\"highlight\">{{name}}</strong> (in the <strong>eav</strong> section):"
        }
      }
    },
    "delegation-definitions": {
      "header": "Delegations",
      "title": "Definitions of delegation",
      "label": "Delegations",
      "detailHeader": "Delegation <small>({{delegator}} <strong class=\"highlight\">></strong> {{delegate}})</small>",
      "edit": {
        "title": "Detail for definition of delegation"
      },
      "create": {
        "title": "New definition of delegation",
        "header": "New definition of delegation"
      },
      "filter": {
        "delegator": {
          "placeholder": "Delegator"
        },
        "delegate": {
          "placeholder": "Delegate"
        }
      },
      "detail": {
        "title": "Basic information"
      },
      "save": {
        "success": "Definition of delegation was successfully saved"
      },
      "delegations": {
        "label": "Delegated tasks",
        "header": "Delegated tasks",
        "title": "Delegated tasks",
        "filter": {
          "delegator": {
            "placeholder": "Delegator"
          },
          "delegate": {
            "placeholder": "Delegate"
          }
        }
      },
      "types": {
        "default-delegation-type": {
          "label": "Default delegation for all tasks",
          "info": {
            "header": "Default delegation for all tasks",
            "text": "It will be used for all tasks for which no other delegation is defined (with a more specific type)."
          }
        },
        "approve-role-by-manager-delegation-type": {
          "label": "Tasks approving role assignments by a manager",
          "info": {
            "header": "Delegation for role assignment according to the manager",
            "text": "Tasks related to the contract."
          }
        },
        "manual-task-delegation-type": {
          "label": "Manual task delegation",
          "info": {
            "header": "Manual task delegation",
            "text": "It is created automatically on using the delegate operation over the agenda of assigned tasks."
          }
        }
      },
      "identity-is-delegator": "Who am I delegating to",
      "identity-is-delegate": "Who delegates to me",
      "button": {
        "add-delegation": {
          "label": "Create a delegation",
          "header": "New delegation",
          "text": "Creates a new rule for delegating your tasks to someone else.",
          "title": {
            "disabled": "You do not have permission to create delegations.",
            "tooltip": "Creates a new rule for delegating your tasks to someone else."
          }
        }
      }
    },
    "formAttributes": {
      "header": "Form attributes",
      "title": "Form attributes",
      "edit": {
        "title": "Form attribute detail",
        "header": "{{name}} form attribute detail"
      },
      "create": {
        "title": "New attribute",
        "header": "New attribute"
      },
      "save": {
        "success": "Attribute [{{name}}] successfully saved"
      },
      "filter": {
        "code": "Code",
        "text": {
          "label": "Text",
          "placeholder": "Code / Name / Description"
        }
      },
      "detail": {
        "title": "Basic information"
      },
      "form-values": {
        "header": "Attribute values",
        "title": "Attribute values"
      }
    },
    "form-values": {
      "header": "Attribute values",
      "title": "Attribute values",
      "filter": {
        "text": {
          "label": "Text",
          "placeholder": "Code / Name"
        },
        "type": {
          "placeholder": "Select attribute type"
        },
        "value": {
          "placeholder": "Attribute value"
        }
      }
    },
    "code-lists": {
      "header": "Code lists",
      "title": "Code lists",
      "edit": {
        "title": "Code list detail"
      },
      "create": {
        "title": "New code list",
        "header": "new code list"
      },
      "filter": {
        "text": {
          "placeholder": "Code or name"
        }
      },
      "attributes": {
        "title": "Attributes"
      },
      "detail": {
        "title": "Basic information"
      },
      "save": {
        "success": "Code list [{{record}}] successfully saved"
      },
      "items": {
        "header": "Code list items",
        "title": "Code list items",
        "edit": {
          "title": "Code list value detail",
          "header": "{{record}} <small>code list value detail</small>"
        },
        "create": {
          "title": "New code list value",
          "header": "New code list value"
        },
        "filter": {
          "text": {
            "placeholder": "Code or value"
          }
        },
        "save": {
          "success": "Code list value [{{record}}] successfully saved"
        }
      },
      "attributes": {
        "header": "Attributes",
        "title": "Attributes"
      }
    },
    "confidentialStorage": {
      "header": "Confidential storage",
      "title": "Confidential storage",
      "label": "Confidential storage",
      "filter": {
        "text": "Key / Owner type",
        "ownerId": "Owner Id",
        "key": "Key",
        "ownerType": "Owner type",
        "value": "Value"
      },
      "edit": {
        "title": "Detail of storage",
        "header": "Detail encrypted value"
      }
    },
    "export-imports": {
      "header": "Export/Import",
      "title": "Export/Import",
      "fileUploaded": "Import batch successfully uploaded.",
      "link": {
        "longRunningTask": {
          "title": "Show long running task",
          "deleted": {
            "label": "Task deleted",
            "title": "Task (LRT) was deleted."
          }
        }
      },
      "actions": "Actions",
      "action": {
        "download": {
          "title": "Download"
        },
        "dry-run": {
          "title": "Execute import in demo mode",
          "header": "Execute import in demo mode",
          "message": "Starts the selected import batch in demo mode. No changes will be applied. Import will start asynchronously in the background.",
          "success": "Demo import started successfully."
        },
        "execute": {
          "title": "Execute import",
          "header": "Execute import",
          "message": "Starts the selected import batch. Import will start asynchronously in the background.",
          "success": "Import started successfully."
        }
      },
      "filter": {
        "text": {
          "placeholder": "Name of batch"
        },
        "textLog": {
          "placeholder": "Type of entity"
        },
        "operation": {
          "placeholder": "Operation"
        },
        "operationState": {
          "placeholder": "Result"
        }
      },
      "dropzone": {
        "infoText": "Drag import batches (ZIP) here, or click to select files."
      },
      "detail": {
        "header": "Batch detail",
        "tab": "Batch result"
      },
      "treeLogs": {
        "name": "All modifications (tree)"
      },
      "tableLogs": {
        "name": "All modifications"
      },
      "ImportDescriptor": {
        "operation": "Operation",
        "dto": "Entity",
        "result": "Result",
        "type": "Type"
      }
    },
    "scripts": {
      "header": "Script definitions",
      "title": "Script definitions",
      "edit": {
        "title": "Script detail",
        "header": "{{name}} script detail"
      },
      "scriptAuthoritySaveFirst": "You can add script authorities only after saving.",
      "create": {
        "title": "New script",
        "header": "New script"
      },
      "save": {
        "success": "Script [{{name}}] successfully saved."
      },
      "filter": {
        "text": "Code / Name / Description"
      },
      "detail": {
        "header" : "Basic informations",
        "title" : "Basic informations"
      },
      "authorities": {
          "header": "Script authorities",
          "title": "Script authorities",
          "edit": {
            "header": "Edit authority for script <small>{{name}}</small>"
          },
          "create": {
            "header": "Create new authority for script <small>{{name}}</small>"
          },
          "save": {
            "header": "Authority for script successfully saved",
            "success": "Authority for script successfully saved"
          }
      },
      "references": {
        "header" : "Script usage",
        "title" : "Script usage"
      },
      "dropzone": {
        "infoText": "Drag scripts in archive (ZIP) or single scripts (XML) here, or click to select files."
      },
      "fileUploaded": "File [{{name}}] was successfully uploaded."
    },
    "roles": {
      "menu-title": "Roles",
      "header": "Roles",
      "title": "Roles administration",
      "button": {
        "allRoles": "All roles",
        "createRequest": {
          "header": "Role changes are subject to approval.",
          "label": "Create request for changes",
          "text": "If do you want to make a changes, then create the request first."
        }
      },
      "edit": {
        "title": "Role details",
        "header": "{{name}} Role details"
      },
      "filter": {
        "text": {
          "placeholder": "Name, code, environment or description"
        },
        "roleCatalogue": {
          "option": {
            "withoutCatalogue": {
              "label": "-- without catalogue --"
            }
          }
        }
      },
      "roleCataloguePick": "Select folder",
      "create": {
        "header": "New role"
      },
      "save": {
        "success": "Role [{{name}}] successfully saved."
      },
      "select": {
        "chooseFolder": "Choose folder",
        "showRoleCatalogue": "Select from catalog"
      },
      "processRoleChange": {
        "roleName": "Role name",
        "roleValidFrom": "$t(entity.validFrom)",
        "roleValidTill": "$t(entity.validTill)",
        "currentActivity": "application status",
        "candicateUsers": "Can solve",
        "wfProcessId": "WF"
      },
      "processPermissionChange": {
        "currentActivity": "Status",
        "processInstanceName": "Request subject"
      },
      "setting": {
        "basic": {
          "header": "Default role settings"
        },
        "system": {
          "info": "System roles are used for application processes. For system roles its possible to change just settings independent on application logic."
        },
        "authority": {
          "header": "Granted permissions <small>(category)</small>",
          "select": {
            "none": "Remove all permissions in category",
            "all": "Add all permissions on category"
          },
          "group": {
            "hide": "Hide settings of basic permissions in category",
            "show": "Show settings of basic permissions in category"
          }
        },
        "approval": {
          "header": "Approval workflows"
        }
      },
      "tabs": {
        "basic": "Basic information"
      },
      "delete": {
        "identityAssigned": {
          "title": "Removing role is assign on users",
          "message": "Role [{{role}}] is assign to users. Before removing the role you need to take it from users."
        }
      },
      "action": {
        "createRequest": {
          "header": "Do you want to create a new role request?",
          "message": "Enter a new role name",
          "name": "Name of role"
        }
      }
    },
    "roleRequests": {
      "header": "Requests for change roles",
      "title": "Requests for roles",
      "applicant": "Applicant",
      "create": {
        "header": "Create new request to change assigned roles"
      },
      "button": {
        "createRequest": "Create request",
        "start": "Execute request"
      },
      "action": {
        "startRequest": {
          "header": "Do you really want execute this request",
          "message": "Do you really want execute this request and start approval process?",
          "started": "Request was started and is executing on the background.",
          "executed": "Request was successfully executed.",
          "exception": "Error occurred during submitting request. Request was not submitted!",
          "duplicated": "Request was not submitted because it is duplicate with another request created on [{{created}}]."
        }
      },
      "filter": {
        "applicant":{
          "placeholder": "Search by whole username applicant."
        },
        "states":{
          "placeholder": "States in IdM"
        },
        "dateCreatedFrom":{
          "placeholder": "Created from"
        },
        "dateCreatedTill":{
          "placeholder": "Created to"
        },
        "applicants":{
          "placeholder": "Applicants"
        },
        "systemStates":{
          "placeholder": "States in systems"
        }
      }
    },
    "roleRequestDetail": {
      "header": "Request to change roles",
      "title": "Change assigned roles",
      "conceptHeader": "Requested change of assigned roles",
      "conceptWithCurrentRoleHeader": "Current assigned roles (includes requested changes)",
      "save": {
        "success": "Request to change assigned roles successfully saved",
        "start": "Execute request"
      },
      "button": {
        "createRequest":{
          "header": "Submit a request for approval",
          "label": "Submit a request",
          "tooltip": "Start request for change assigned roles."
        },
        "saveConcept":{
          "label": "Save concept",
          "tooltip": "Save the concept of this request. Request will be not started."
        }
      },
      "confirm-incompatible-role": {
        "header": "Request contains incompatible roles",
        "message": "Request contains incompatible roles, which have to be approved additonally. <strong>Do you really want execute request with included incompatible roles?</strong>"
      }
     },
     "automaticRoleRequests": {
       "header": "Requests for automatic roles",
       "title": "Requests for automatic roles",
       "role": "Request for role",
       "name": "Name",
       "create": {
         "header": "Create new request for automatic role"
       },
       "button": {
         "createRequest": "Create request",
         "start": "Execute request"
       },
       "action": {
         "startRequest": {
           "header": "Do you really want execute this request",
           "message": "Do you really want execute this request and start approval process?",
           "started": "Request was started",
           "exception": "Error occurred during submitting request. Request was not submitted!",
           "duplicated": "Request was not submitted because it is duplicate with another request created on [{{created}}]."
         }
       },
       "filter": {
         "role":{
           "placeholder": "Search by whole username applicant."
         },
         "states":{
           "placeholder": "Search by states"
         }
       }
     },
     "automaticRoleRequestDetail": {
       "header": "Request for automatic role",
       "title": "Change automatic role",
       "conceptHeader": "Requested change of rules",
       "conceptWithCurrentRulesHeader": "Approved rules (includes required changes)",
       "save": {
         "success": "Request to change automatic role successfully saved",
         "start": "Execute request"
       },
       "button": {
         "createRequest":{
           "label": "Submit a request",
           "tooltip": "Start request for change automatic role"
         }
       },
       "create": {
         "header": "Create the rule"
       },
       "edit": {
         "header": "Edit the rule"
       },
       "rulesIsAnd": {
         "title": "All rules must be met.",
         "text": "To assign a role, the entity must meet all the (below defined) rules at the same time."
       }

      },
     "requests": {
       "header": "Requests",
       "title": "Requests",
       "role": "Request",
       "name": "Name",
       "create": {
         "header": "Create new request"
       },
       "button": {
         "createRequest": "Create request",
         "start": "Execute request"
       },
       "action": {
         "startRequest": {
           "header": "Do you really want execute this request",
           "message": "Do you really want execute this request and start approval process?",
           "started": "Request was started",
           "exception": "Error occurred during submitting request. Request was not submitted!",
           "duplicated": "Request was not submitted because it is duplicate with another request created on [{{created}}]."
         }
       },
       "filter": {
         "states":{
           "placeholder": "Search by states"
         },
         "text":{
           "placeholder": "Search by target object code, type and description"
         }
       }
     },
     "requestInfo": {
       "title": "You are on the request preview",
       "text": "Any changes you make will only be written to this request.",
       "button": {
         "goToRequest": {
           "label": "Go to the request detail"
         },
         "showChanges": {
           "label": "Show changes",
           "tooltip": "Shows the changes made to this request in this detail."
         }
       }
     },
     "requestDetail": {
       "header": "Request",
       "title": "Request",
       "conceptHeader": "Requested changes",
       "save": {
         "success": "Request successfully saved",
         "start": "Execute request"
       },
       "button": {
         "createRequest":{
           "label": "Submit a request",
           "tooltip": "Start request"
         },
         "saveConcept":{
           "label": "Save concept",
           "tooltip": "Save the concept of this request. Request will be not started."
         },
         "previewDetailByRequest":{
           "label": "Show preview",
           "tooltip": "Show preview with all requested changes."
         },
         "showItemChanges": {
           "tooltip": "Show changed attributes for this object."
         }
       },
       "create": {
         "header": "Create the request change"
       },
       "edit": {
         "header": "Edit the request change"
       },
       "itemDetail": {
         "header": "Requested changes",
         "title": {
           "add": "Request for create new object",
           "remove": "Request for delete that object",
           "update": "Request for change that object"
         },
         "nochanges": {
           "title": "No changes found.",
           "text": "No requested changes was found for this object."
         },
         "changes": {
           "property": "Attribute name",
           "oldValue": "Current value",
           "newValue": "New value"
        }
       }
      },
    "role": {
      "identities": {
        "header": "Users with assigned role",
        "title": "Users with role"
      },
      "guarantees": {
        "header": "$t(entity.Role.guarantees)",
        "title": "$t(entity.Role.guarantees)",
        "create": {
          "header": "Create role authorizer"
        },
        "edit": {
          "header": "{{name}} <small>role authorizer detail</small>"
        },
        "role": {
          "header": "$t(entity.RoleGuaranteeRole._type)",
          "title": "$t(entity.RoleGuaranteeRole._type)"
        },
        "identity": {
          "header": "$t(entity.RoleGuarantee._type)",
          "title": "$t(entity.RoleGuarantee._type)"
        },
        "save": {
          "success": "Authorizer [{{record}}] successfully saved."
        }
      },
      "formAttributes": {
        "header": "Role attributes",
        "title": "Role attributes",
        "create": {
          "header": "Create role attribute"
        },
        "edit": {
          "header": "{{name}} <small>role attribute detail</small>"
        },
        "save": {
          "success": "Role attribute [{{record}}] successfully saved."
        }
      },
      "eav": {
        "header": "More information",
        "title": "More information",
        "save": {
          "success": "Extended attributes for role [{{name}}] successfully saved.",
          "start": "Execute request"
        },
        "error" : {
          "notFound": "Extended attributes definition for role not found."
        }
      },
      "tree-nodes": {
        "header": "Automatic roles",
        "title": "Automatic roles",
        "label": "Automatic roles",
        "filter": {
          "text": {
            "placeholder": "Name of automatic role or role name"
          },
          "treeNodeId": {
            "placeholder": "Tree node"
          }
        },
        "edit": {
          "header": "{{name}} <small>automatic role detail</small>"
        },
        "create": {
          "header": "New automatic role"
        },
        "save": {
          "success": "Automatic role [{{record}}] successfully saved. Assign role to identities run asynchronously. You can see progress in long running tasks agenda."
        },
        "action": {
          "delete": {
            "action": "Remove",
            "header": "Remove automatic role",
            "header_plural": "Remove automatic roles",
            "message": "Do you want to remove selected roles [<strong>{{record}}</strong>]? All assigned roles dependent on removed automatic role will be removed too.",
            "message_plural": "Select records: [<strong>{{records}}</strong>].<br /><br />Do you want to remove <strong>{{count}}</strong> selected records? All assigned roles dependent on removed automatic role will be removed too.",
            "error": "An error occurred while removing [{{record}}].",
            "success": "Selected record [{{record}}] successfully deleted",
            "success_plural": "Selected records [{{records}}] successfully deleted"
          }
        }
      },
      "authorization-policies": {
        "header": "Permissions",
        "title": "Permissions",
        "label": "Permissions",
        "filter": {
          "text": {
            "placeholder": "Entity type, evaluator type or description"
          }
        },
        "edit": {
          "header": "{{name}} <small>permission detail</small>"
        },
        "create": {
          "header": "New permission"
        },
        "save": {
          "success": "Permission [{{record}}] successfully saved"
        },
        "evaluator": {
          "default": "Default evaluator will be used. Agenda doesn't support other evaluator types."
        }
      },
      "catalogues": {
        "header": "Role catalogue",
        "title": "Role catalogue",
        "create": {
          "header": "Assign role to catalogue"
        },
        "edit": {
          "header": "{{name}} <small>role asigned to catalogue</small>"
        },
        "save": {
          "success": "Role was assigned to catalogue [{{record}}]."
        }
      },
      "compositions": {
        "header": "Business role",
        "title": "Business role",
        "create": {
          "header": "New"
        },
        "edit": {
          "header": "{{name}} <small>detail</small>"
        },
        "superior": {
          "header": "Superior roles"
        },
        "sub": {
          "header": "Subroles"
        },
        "save": {
          "success": "Business role [{{record}}] successfully saved. Role will be assigned to the users on the background asynchronously."
        },
        "action": {
          "delete": {
            "success": "Business role [{{record}}] successfully removed. Assigned role will be removed from the users on the background asynchronously."
          }
        }
      },
      "incompatible-roles": {
        "header": "Incompatible roles",
        "title": "Incompatible roles - Segregation of Duties",
        "create": {
          "header": "New"
        },
        "edit": {
          "header": "{{name}} <small>detail</small>"
        },
        "superior": {
          "header": "Roles, which defines this role as incompatible"
        },
        "sub": {
          "header": "Incompatible roles"
        },
        "save": {
          "success": "Incompatible role [{{record}}] successfully saved."
        },
        "action": {
          "delete": {
            "success": "Incompatible role [{{record}}] successfully removed."
          }
        }
      }
    },
    "identity": {
      "sidebar": {
        "profile": "Personal data",
        "password": "Password",
        "roles": "Roles",
        "approve": "Approver of roles",
        "subordinates": "Subordinates",
        "positions": "Contracted positions"
      },
      "dashboard": {
        "header": "$t(navigation.menu.dashboard.label)",
        "title": "$t(content.identity.dashboard.header)"
      },
      "profile": {
        "header": "Personal data",
        "title": "My profile",
        "userDetail": "User details",
        "username": "$t(entity.Identity.username)",
        "externalCode": "$t(entity.Identity.externalCode)",
        "lastName": "$t(entity.Identity.lastName)",
        "firstName": "$t(entity.Identity.firstName)",
        "fileRejected": "$t(entity.Identity.fileRejected)",
        "fileUploaded": "$t(entity.Identity.fileUploaded)",
        "deleteImage": {
          "title": "Delete profile image",
          "message": "Do you really want to delete profile image?"
        },
        "twoFactor": {
          "application": {
            "help": "Scan this Barcode using TOTP application (e.g. Google Authenticator) on your phone to use it in login.",
            "code": {
              "enter": "Or enter",
              "code": "this code",
              "instead": "instead."
            },
            "verificationCode": {
              "label": "Enter the six-digit code from the application",
              "placeholder": "123456",
              "help": "After scanning the barcode image, the app will display a six-digit code that you can enter."
            }
          },
          "notification": {
            "help": "Notification was sent.",
            "disabled": "Configure sms notifications to enable this method.",
            "verificationCode": {
              "label": "Enter the six-digit code from the received notification",
              "placeholder": "123456",
              "help": ""
            }
          },
          "confirmDelete": {
            "title": "Cancel two factor authentication",
            "message": "Do you really want to cancel two factor authentication? Username and password will be needed for login into application."
          }
        },
        "email": {
          "label": "$t(entity.Identity.email)",
          "placeholder": "Users e-mail"
        },
        "phone": {
          "label": "$t(entity.Identity.phone)",
          "placeholder": "Phone number"
        },
        "description": {
          "label": "$t(entity.Identity.description)",
          "placeholder": "Notes to user"
        },
        "active": "Active",
        "blockLoginDate": "Identity has a blocked login to the application due to exceeding unsuccessful login attempts. Login will be possible after {{date}}.",
        "validation": {
          "passwordsNotMatch": "Passwords do not match.",
          "newIdmManagerIsTheSame": {
            "title": "User {{username}} is identical with inactive user",
            "message": "Please select another user, who will be set as new manager"
          },
          "newIdmManagerIsRequired": {
            "title": "Please select user",
            "message": "Please select user, which will be new authorizer"
          }
        },
        "messages": {
          "deactiveDisabled": "You cannot inactivate yourself.",
          "subordinatesCount": "User <strong>{{username}}</strong>, which is to be deactivate is manager of <strong>{{subordinatesCount}}</strong> users. <br/> Please, select a new manager for displayed users.",
          "saved": "User {{username}} successfully saved",
          "deactivated": "User {{username}} user successfully deactivated.",
          "deactivateBreak": {
            "title": "Setting of new manager was interrupted",
            "message": "New manager was successfully set for {{deactivateCounter}} users. Than the operation was interrupted. The operation can continue."
          },
          "switchedIdmManager": {
            "title": "Setting new manager",
            "message": "Setting a new manager {{newIdmManager}} instead of previous {{previousIdmManager}} was successful."
          },
          "switchIdmManagerFailed": {
            "title": "Error during saving user {{identity.username}} (continues processing)"
          }
        },
        "deactivate": {
          "proceed": "Processing setting new manager...",
          "selectIdmManager": "Select new manager",
          "confirm": {
            "header": "Confirm deactivation of user",
            "message": "User <strong>{{username}}</strong> doesn't have any subordinates. Do you really want to deactivate user <strong>{{username}}</strong>?"
          },
          "form": {
            "newIdmManager": "Please, select new manager"
          },
          "button": {
            "break": {
              "title": "Aborting processing - Processed users remain adjust",
              "label": "Abort operation",
              "proceed": "Aborting operation ..."
            }
          }
        },
        "organizationPosition": {
          "title": "Position in organizational structure"
        }
      },
      "projection": {
        "create": {
          "title": "$t(content.identity.create.title)",
          "insufficientPermission": "Insufficient permissions to create identity with contract.<br /><strong>Create contract authority</strong> is missing. Contract is created together with created user."
        },
        "edit": {
          "title": "$t(content.identity.profile.userDetail)",
          "insufficientPermission": "Insufficient permissions to update identity with contract.<br /><strong>Update contract permission</strong> is missing."
        },
        "button": {
          "close": {
            "label": "Back to list of users"
          },
          "formProjection": {
            "label": "Edit form projection"
          },
          "editContract": {
            "label": "Add contract for this organization unit"
          },
          "cancelContract": {
            "label": "Cancel creating contract for this organization unit"
          }
        },
        "identity": {
          "username": {
            "label": "User login"
          }
        },
        "contract": {
          "validFrom": {
            "label": "Valid from"
          },
          "validTill": {
            "label": "Valid till"
          },
          "workPosition": {
            "label": "Organizational positon"
          }
        },
        "primeContract": {
          "label": "Prime contract"
        },
        "otherContracts": {
          "label": "Other contracts"
        },
        "allContracts": {
          "label": "Contracts"
        },
        "otherPosition": {
          "workPosition": {
            "label": "Other organizational positon"
          }
        },
        "roles": {
          "header": {
            "new": "$t(content.identity.roles.directRoles.header)",
            "edit": "$t(content.identity.roles.header)"
          }
        }
      },
      "profile-setting": {
        "header": "User setting",
        "title": "User setting"
      },
      "switch-user": {
        "header": "Login as other user",
        "title": "Login as other user",
        "username": {
          "label": "User",
          "help": "Target user."
        },
        "switched": {
          "label": "Logged as different user",
          "title": "User [{{originalUsername}}] logged as [{{username}}]."
        },
        "button": {
          "save": "Swith user",
          "saving": "Login ...",
          "logout": "Login back as"
        },
        "message": {
          "success": "User [{{username}}] login."
        }
      },
      "roles": {
        "header": "$t(navigation.menu.roles.label)",
        "title": "$t(navigation.menu.roles.label)",
        "filter": {
          "role": {
            "placeholder": "$t(content.identities.filter.role.placeholder)"
          },
          "identity": {
            "placeholder": "$t(entity.Identity._type)"
          }
        },
        "changePermissions": "Request to change roles",
        "authorities": "Granted authorizations <small>from assigned roles</small>",
        "automaticRefreshSwitch": "Automatic refresh",
        "changeRoleProcesses": {
          "header": "Roles pending approval",
          "deleteConfirm": "Do you really want to delete selected request?",
          "deleteSuccess": "Request successfully deleted."
        },
        "changePermissionRequests": {
          "label": "Requests",
          "header": "Requests for change roles"
        },
        "conceptPermissionRequests": {
          "header": "Concepts of requests for change roles"
        },
        "create": {
          "header": "Assign new role",
          "success": "Role [{{role}}] successfully assigned to user [{{username}}].",
          "accepted": "Role [{{role}}] for user [{{username}}] was successfully submitted to approval. Assignment must be approve first."
        },
        "edit": {
          "header": "{{role}} <small>assignment details</small>",
          "success": "Role [{{role}}] of user [{{username}}] successfully edited."
        },
        "delete": {
          "success": "Role [{{role}}] of user [{{username}}] successfully removed."
        },
        "detail": {
          "directRole": {
            "subRoles": {
              "header": "Roles assigned by this role"
            }
          },
          "tabs": {
            "basic": "Basic informations",
            "attributes": "Role's attributes"
          }
        },
        "contracts": {
          "empty": {
            "message": "User doesn't have any valid contracted positions, on which you can assign roles. Please, add valid contracted position.",
            "button": "Add contracted position"
          }
        },
        "directRoles": {
          "header": "Directly assigned roles"
        },
        "subRoles": {
          "header": "Roles assigned by business roles"
        }
      },
      "authorities": {
        "label": "Authorities",
        "header": "Granted authorities <small>by assigned roles</small>",
        "title": "Granted authorities",
        "help": {
          "header": "Granted authorities",
          "body": {
            "title": "Authority base permissions are divided into categories. After associating the active role, the user will get assigned permissions (according to the assignment validity). Persmissions are evaluated in different parts of the application.",
            "checkbox": {
              "title": "The checkbox for the category name shows whether some of the basic permissions in that category are assigned:",
              "none": "No permissions are assigned to the category,",
              "some": "some of the permissions in the given category are assigned - you can expand the category to view specific assignments,",
              "all": "all permissions in that category are assigned."
            }
          }
        }
      },
      "authorization-policies": {
        "label": "Permissions",
        "header": "Permissions <small>by assigned roles</small>",
        "title": "Permissions"
      },
      "passwordChange": {
        "header": "Password change",
        "title": "Password change",
        "password": {
          "old": "Current password",
          "new": "New password",
          "newAgain": "Re-enter new password",
          "strength": "Password strength:"
        },
        "permission": {
          "failed": "You do not have permissions to change password."
        },
        "changeType": {
          "DISABLED": "Password change is not allowed in this environment.",
          "CUSTOM": "Password change can be done separately on each account.",
          "ALL_ONLY": "Password can be change only  for all accounts at once."
        },
        "accounts": {
          "label": "On systems",
          "placeholder": "Select end system on which you want to change password"
        },
        "message": {
          "wrongUser": "Change password to subordinates is not allowed",
          "success": "Password on accounts [{{accounts}}] for users [{{username}}] successfully changed.",
          "failed": "Password was not changed, password provisioning on accounts [{{accounts}}] for users [{{username}}] failed.",
          "notChanged": "Password was not changed. $t(content.identity.passwordChange.message.noAccounts)",
          "isAdmin": "You are logged in as administrator. Original password is not required for password change. Password can be changed on selected systems. Number of changes is not limited.",
          "noContent": "You do not have permissions to change password.",
          "noAccounts": "There are no accounts where you can change password."
        },
        "button": {
          "change": "Change password"
        },
        "identity": {
          "username": "$t(entity.Identity.username)"
        }
      },
      "identityRoleDetail": {
        "label": "Record details"
      },
      "identityContracts": {
        "header": "Contracted positions",
        "title": "$t(content.identity.identityContracts.header)",
        "identityContracts": {
          "empty": "Contracted positions not found."
        },
        "delete": {
          "success": "Contracted position [{{position}}] for user [{{username}}] successfully removed."
        }
      },
      "contractSlices": {
        "header": "Contracted positions (time slices)",
        "title": "$t(content.identity.contractSlices.header)",
        "contractSlices": {
          "empty": "Contracted positions (time slices) not found."
        },
        "delete": {
          "success": "Contracted position [{{position}}] (time slice) for user [{{username}}] successfully removed."
        }
      },
      "approve": {
        "header": "Role approver",
        "title": "$t(content.identity.approve.header)"
      },
      "create": {
        "header": "Creating a new user",
        "title": "New user",
        "button": {
          "generate": "Generate password",
          "add": "Create user"
        },
        "message": {
          "success": "User [{{username}}] successfully created."
        }
      },
      "subordinates": {
        "header": "Subordinates",
        "title": "$t(content.identity.subordinates.header)"
      },
      "eav": {
        "header": "More information",
        "title": "More information",
        "save": {
          "success": "Extended attributes for identity [{{name}}] successfully saved."
        },
        "error" : {
          "notFound": "Extended attributes definition for identity not found."
        }
      },
      "garanted-roles": {
        "header": "Authorizer <small>User is authorizer of these roles</small>",
        "title": "Authorize roles"
      }
    },
    "identity-contract": {
      "detail": {
        "header": "Contracted position detail",
        "title": "Contracted position detail",
        "label": "Basic information",
        "invalidContract":"Invalid contracted position detail",
        "validContract":"Contracted position detail",
        "edit": {
          "title": "Contracted position detail",
          "header": "{{position}} <small>contracted position detail</small>",
          "success": "Contracted position [{{position}}] successfully saved."
        },
        "create": {
          "title": "New contracted position",
          "header": "New contracted position",
          "success": "Contracted position [{{position}}] successfully saved.",
          "accepted": "Contracted position [{{position}}] was accepted. Contracted position has to be approved at first."
        },
        "save": {
          "success": "Contracted position [{{name}}] successfully saved."
        },
        "alert": {
          "controlledBySlices": "This contract is controlled by time slices. Cannot be modified directly!"
        }
      },
      "eav": {
        "header": "More information",
        "title": "More information",
        "label": "More information",
        "save": {
          "success": "Extended attributes for contracted position [{{name}}] successfully saved."
        },
        "error" : {
          "notFound": "Extended attributes definition for contracted position not found."
        }
      },
      "guarantees": {
        "header": "Guarantees and managers",
        "title": "Guarantees",
        "label": "Guarantees",
        "guarantees": {
          "direct": "Direct guarantees <small>on this contracted position</small>",
          "byTree": "Managers <small>by tree structures</small>"
        },
        "edit": {
          "title": "Guarantee detail",
          "header": "Guarantee detail"
        },
        "create": {
          "title": "Add guarantee",
          "header": "Add guarantee",
          "endedContract": "New guarantee can be added to valid or future valid contact"
        },
        "action": {
          "save": {
            "success": "For contracted position was successfully saved authorizer [{{record}}]"
          }
        },
        "endedContract": {
          "warning": {
            "message": "Contract ended in the past. Is possible to remove previously defined direct guarantees only."
          }
        }
      },
      "positions": {
        "header": "Other positions",
        "title": "Other positions",
        "label": "Other positions",
        "edit": {
          "title": "Position detail",
          "header": "Position detail"
        },
        "create": {
          "title": "Add position",
          "header": "Add position"
        }
      }
    },
    "contract-slice": {
      "detail": {
        "header": "Time slice of contracted position detail",
        "title": "Time slice of contracted position detail",
        "label": "Basic information",
        "labelContract": "Basic information of contract",
        "labelSlice": "Basic information of time slice",
        "invalidContract":"Invalid time slice of contracted position detail",
        "validContract":"Time slice of contracted position detail",
        "edit": {
          "title": "Time slice of contracted position detail",
          "header": "{{position}} <small>time slice of contracted position detail</small>",
          "success": "Time slice of contracted position [{{position}}] successfully saved.",
          "notEditable": "Time slices cannot be editing or adding manually."
        },
        "create": {
          "title": "New time slice of contracted position",
          "header": "New time slice of contracted position",
          "success": "Time slice of contracted position [{{position}}] successfully saved.",
          "accepted": "Time slice of contracted position [{{position}}] was accepted. Time slice of contracted position has to be approved at first."
        },
        "save": {
          "success": "Time slice of contracted position [{{name}}] successfully saved."
        }
      },
      "eav": {
        "header": "More information",
        "title": "More information",
        "label": "More information",
        "save": {
          "success": "Extended attributes for time slice of contracted position [{{name}}] successfully saved."
        },
        "error" : {
          "notFound": "Extended attributes definition for time slice of contracted position not found."
        }
      },
      "guarantees": {
        "header": "Guarantees and managers",
        "title": "Guarantees",
        "label": "Guarantees",
        "guarantees": {
          "direct": "Direct guarantees <small>on this time slice</small>",
          "byTree": "Managers <small>by tree structures</small>"
        },
        "edit": {
          "title": "Guarantee detail",
          "header": "Guarantee detail"
        },
        "create": {
          "title": "Add guarantee",
          "header": "Add guarantee"
        },
        "action": {
          "save": {
            "success_0": "N/A",
            "success_1": "For time slice was successfully saved authorizer [{{record}}]"
          }
        }
      }
    },
    "organizations": {
      "header": "Organizational structure",
      "title": "Organizational structure",
      "label": "Organization",
      "defaultTreeType": {
        "empty": {
          "message": "Default tree type is not configured.",
          "button": "Define default type"
        }
      }
    },
    "system": {
      "modules": {
        "header": "Application modules and components",
        "title": "Modules"
      },
      "fe-modules": {
        "header": "Application modules and components",
        "title": "Modules (frontend)",
        "components": {
          "header": "Components",
          "priority": "Priority",
          "type": "Type",
          "order": "Order",
          "overriden": "Component overridden in module: {{moduleId}}"
        },
        "activate": {
          "disabled": "Frontend module depends on backend module [{{backendId}}]. Activate backend module at first."
        }
      },
      "be-modules": {
        "header": "Modules <small>backend</small>",
        "title": "Modules (backend)",
        "result-codes": {
          "button-show": "Result codes",
          "title": "List of result codes [{{moduleName}}]",
          "status": "Status",
          "code": "Code",
          "message": "Message",
          "filter": {
            "text": {
              "placeholder": "Code"
            }
          }
        }
      },
      "cache": {
        "header": "Cache",
        "title": "Cache"
      },
      "entity-event-processors": {
        "header": "Processors",
        "title": "Processors",
        "filter": {
          "text": {
            "placeholder": "Name, description or content type (entity type)"
          },
          "entityType": {
            "placeholder": "Select entity type"
          },
          "eventTypes": {
            "placeholder": "Select event type (processor has to support all of them)"
          }
        }
      },
      "filter-builders": {
        "header": "Filters",
        "title": "Filters",
        "filter": {
          "text": {
            "placeholder": "Property name, entity or filter type, description (like)"
          },
          "module": {
            "placeholder": "Module"
          },
          "entityClass": {
            "placeholder": "Entity type"
          }
        }
      },
      "bulk-actions": {
        "header": "Bulk actions",
        "title": "Bulk actions",
        "filter": {
          "text": {
            "placeholder": "Name, entity or action type, description (like)"
          },
          "module": {
            "placeholder": "Module"
          },
          "entityClass": {
            "placeholder": "Entity type"
          }
        },
        "emptyEntityClass": {
          "header": "Common action <small>action can be executed for different entity types</small>"
        }
      },
      "available-services": {
        "header": "Available services",
        "title": "Available services",
        "filter": {
          "text": {
            "placeholder": "Service name (like)"
          }
        }
      }
    },
    "scheduler": {
      "header": "Scheduler",
      "title": "Task scheduler",
      "running-tasks": {
        "header": "Running tasks",
        "title": "Running tasks",
        "empty": "No running tasks found",
        "button": {
          "cancel": "End task",
          "interrupt": "Interrupt task"
        },
        "refresh": "Refresh running tasks",
        "action": {
          "task-cancel": {
            "header": "Cancel running task",
            "message": "Do you really was to cancel task [<strong>{{record}}</strong>]?",
            "success": "Task [{{record}}] will be canceled as soon is possible (after current item is processed)."
          },
          "task-interrupt": {
            "header": "Interrupt running task",
            "message": "Do you really was to interrupt task [<strong>{{record}}</strong>]?",
            "success": "Task [{{record}}] was interrupted."
          }
        }
      },
      "schedule-tasks": {
        "header": "Scheduled tasks",
        "title": "Scheduled tasks",
        "button": {
          "run": "Run manually",
          "dryRun": "Run as dryRun (demo process)"
        },
        "filter": {
          "text": {
            "label": "Type (class) / Description",
            "placeholder": "Task type (class) or description of task"
          }
        },
        "action": {
          "trigger-delete": {
            "header": "Remove scheduled run",
            "message": "Do you really want to remove scheduled run?",
            "success": "Scheduled run was removed."
          },
          "trigger-create": {
            "header": "New scheduled run",
            "success": "Scheduled run successfully added."
          },
          "task-create": {
            "header": "Create task",
            "success": "Task [{{record}}] successfully created."
          },
          "task-edit": {
            "header": "Task details",
            "success": "Task [{{record}}] successfully updated.",
            "parameters": "Task parameters"
          },
          "task-run": {
            "header": "Run record manually",
            "header_plural": "Run records manually",
            "message": "Do you want to run selected record [<strong>{{record}}</strong>] manually?",
            "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to run <strong>{{count}}</strong> selected records manually?",
            "error": "An error occurred while running [{{record}}] manually.",
            "success": "Selected record [{{record}}] successfully ran manually",
            "success_plural": "Selected records [{{records}}] were successfully run"
          },
          "task-dry-run": {
            "header": "Run record as dryRun (demo process)",
            "header_plural": "Run records as dryRun (demo process)",
            "message": "Do you want to run selected record [<strong>{{record}}</strong>] as dryRun (demo process)?",
            "message_plural": "Selected records: [<strong>{{records}}</strong>].<br /><br /> Do you want to run <strong>{{count}}</strong> selected records as dryRun (demo process)?",
            "error": "An error occurred while running [{{record}}] as dryRun (demo process).",
            "success": "Selected record [{{record}}] successfully ran as dryRun (demo process)",
            "success_plural": "Selected records [{{records}}] were successfully run as dryRun (demo process)"
          },
          "task-delete": {
            "header": "Remove task",
            "message": "Do you really want to remove tasks [<strong>{{record}}</strong>]?",
            "success": "Task [{{record}}] successfully removed."
          },
          "save": {
            "success": "Task [{{record}}] successfully saved ."
          }
        }
      },
      "all-tasks": {
        "header": "All tasks",
        "title": "All tasks",
        "button": {
          "run": "Run task",
          "recover": {
            "title": "Run task again",
            "disabled": "Task cannot be executed again"
          },
          "cancel": "Cancel task"
        },
        "filter": {
          "text": {
            "label": "Type (class) / Description",
            "placeholder": "Task type (class) or description of task"
          },
          "operationState": {
            "label": "State",
            "placeholder": "Task state"
          }
        },
        "detail": {
          "header": "Task details",
          "result": "Result",
          "resultCode": "Code",
          "scheduledTask": {
            "empty": "Selected long running task was executed without scheduler, queue is not available."
          }
        },
        "action": {
          "processCreated": {
            "button": "Run all created tasks",
            "success": "Created task will be executed.",
            "selectedButton": "Run selected tasks"
          },
          "task-run": {
            "header": "Run task",
            "message": "Do you want to run selected task [<strong>{{record}}</strong>]?",
            "error": "An error occurred while running task [{{record}}].",
            "success": "Selected task [{{record}}] successfully ran."
          },
          "task-recover": {
            "header": "Run task again",
            "message": "Do you want to run selected task [<strong>{{record}}</strong>] again?",
            "warning": {
              "base": "New task will be created and executed with the same configuration as this task."
            },
            "error": "An error occurred while running task [{{record}}].",
            "success": "Selected task [{{record}}] successfully ran."
          },
          "task-cancel": {
            "header": "Cancel task",
            "message": "Do you want to cancel selected task [<strong>{{record}}</strong>]?",
            "error": "An error occurred while canceling task [{{record}}].",
            "success": "Selected task [{{record}}] will be canceled on background."
          }
        },
        "tabs": {
          "basic": "Basic information",
          "items": "Processed items",
          "queue": "Queue",
          "audit": "Audit"
        }
      },
      "audit": {
        "header": "Audit <small>entities modified by this task</small>",
        "title": "Audit"
      }
    },
    "notifications": {
      "header": "Notifications history",
      "label": "Notifications history",
      "title": "Records of sent notifications",
      "filter": {
        "dateFrom": {
          "label": "From",
          "placeholder": "Date from"
        },
        "dateTill": {
          "label": "To",
          "placeholder": "Date to"
        },
        "text": {
          "label": "Message",
          "placeholder": "Subject, content, topic"
        },
        "sender": {
          "label": "Sender",
          "placeholder": "Sender ..."
        },
        "recipient": {
          "label": "Recipient",
          "placeholder": "Recipient ..."
        },
        "sent": {
          "label": "Sent",
          "placeholder": "Sending status ..."
        },
        "topic": {
          "label": "$t(entity.Notification.topic)",
          "placeholder": "$t(entity.Notification.topic)"
        }
      }
    },
    "notification": {
      "headerNew": "Notification",
      "header": "Notification details",
      "title": "Notification details",
      "titleNew": "Notification",
      "relatedNotifications": "Records from sender",
      "label": {
        "notSent": "Not sent",
        "sentPartly": "Partially sent"
      },
      "sent": {
        "success": "Notifications were successfully sent"
      },
      "attachments": {
        "header": "Attachments"
      }
    },
    "notificationTemplate": {
      "headerNew": "New template",
      "header": "Template",
      "title": "Templates ",
      "titleNew": "New template",
      "save": {
        "success": "Template [{{name}}] was successfully saved."
      },
      "edit": {
        "header": "template detail"
      },
      "filter": {
        "text": "Name / Subject / Code"
      },
      "dropzone": {
        "infoText": "Drag templates in archive (ZIP) or single templates (XML) here, or click to select files."
      },
      "fileUploaded": "File [{{name}}] was successfully uploaded."
    },
    "emails": {
      "header": "E-mails history",
      "title": "E-mails history"
    },
    "email": {
      "header": "E-mail details",
      "title": "E-mail details",
      "relatedNotifications": "Records from sender",
      "label": {
        "notSent": "Not sent",
        "sentPartly": "Partially sent"
      }
    },
    "websockets": {
      "header": "Websocket history",
      "title": "Websocket history"
    },
    "sms": {
      "header": "SMS history",
      "title": "SMS history"
    },
    "websocket": {
      "header": "Websocket message details",
      "title": "Websocket message details"
    },
    "notificationConfigurations": {
      "label": "Configuration",
      "header": "Notifications configuration",
      "title": "Notifications configuration",
      "edit": {
        "header": "{{name}} <small>item configuration details</small>"
      },
      "create": {
        "header": "New configuration item"
      },
      "save": {
        "success": "Configuration item [{{name}}] was successfully saved"
      }
    },
    "workflow" : {
      "definition": {
        "title": "Workflow definition details",
        "header": "Workflow definition details",
        "name": "Name",
        "key": "Key",
        "version": "Version",
        "description": "Description",
        "resourceName": "Resource name",
        "category": "Category",
        "diagramResourceName": "Scheme name",
        "deploymentId": "Deployment Id",
        "id":"Identificator",
        "diagram": "Process preview",
        "fullscreenDiagram": "Process preview"
      },
      "definitions": {
        "title": "Workflow definitions management",
        "header": "Workflow definitions management",
        "name": "$t(content.workflow.definition.name)",
        "key": "$t(content.workflow.definition.key)",
        "version": "$t(content.workflow.definition.version)",
        "description": "$t(content.workflow.definition.description)",
        "resourceName": "$t(content.workflow.definition.resourceName)",
        "fileRejected": "Workflow definition file must be of type bpmn20.xml ({{name}})!",
        "filesRejected": "Workflow definition types must be of type bpmn20.xml!",
        "fileUploaded": "Workflow definition ({{name}}) was successfully uploaded.",
        "id":"$t(content.workflow.definition.id)"
      },
      "history":{
        "processes":{
          "title": "History of worfklow processes",
          "header": "History of worfklow processes <small>approving, tasks</small>"
        },
        "process":{
          "title": "History of process",
          "header": "History of process",
          "diagram": "Process diagram",
          "fullscreenDiagram": "Process diagram",
          "startTime": "$t(entity.WorkflowHistoricProcessInstance.startTime)",
          "endTime": "$t(entity.WorkflowHistoricProcessInstance.endTime)",
          "deleteReason": "$t(entity.WorkflowHistoricProcessInstance.deleteReason)",
          "processVariables": "$t(entity.WorkflowHistoricProcessInstance.processVariables)",
          "name": "$t(entity.WorkflowHistoricProcessInstance.name)",
          "startActivityId": "$t(entity.WorkflowHistoricProcessInstance.startActivityId)",
          "superProcessInstanceId": "$t(entity.WorkflowHistoricProcessInstance.superProcessInstanceId)",
          "processDefinitionKey": "$t(entity.WorkflowHistoricProcessInstance.processDefinitionKey)",
          "id": "$t(entity.WorkflowHistoricProcessInstance.id)",
          "applicant": "$t(entity.WorkflowHistoricProcessInstance.applicant)",
          "tasks": "User tasks in  process",
          "subprocesses": "Sub-processes",
          "nextProcessOptions": "Next process options",
          "filter": {
            "processDefinition":{
              "label": "Definition",
              "placeholder": "Workflow definition"
            }
          }
        },
        "task":{
          "title": "User tasks in process",
          "header": "User tasks in process",
          "startTime": "$t(entity.WorkflowHistoricTaskInstance.startTime)",
          "endTime": "$t(entity.WorkflowHistoricTaskInstance.endTime)",
          "deleteReason": "$t(entity.WorkflowHistoricTaskInstance.deleteReason)",
          "name": "$t(entity.WorkflowHistoricTaskInstance.name)",
          "priority": "$t(entity.WorkflowHistoricTaskInstance.priority)",
          "createTime": "$t(entity.WorkflowHistoricTaskInstance.createTime)",
          "id": "$t(entity.WorkflowHistoricTaskInstance.id)",
          "assignee": "$t(entity.WorkflowHistoricTaskInstance.assignee)",
          "completeTaskDecision": "$t(entity.WorkflowHistoricTaskInstance.completeTaskDecision)"
        }
      }
    },
    "audit": {
      "header": "Audit",
      "title": "Audit",
      "label": "$t(content.audit.title)",
      "title-entities": "Entities",
      "title-identities": "Users",
      "title-identity-roles": "Audit for added roles",
      "title-identity-login": "Login audit",
      "title-identity-password-change": "Password change audit",
      "modifier": "Action executor",
      "date": "Date of change",
      "empty": "Without records",
      "pickRevision": "Select revision",
      "detail": "Revision details",
      "id": "Id",
      "noPreviousRevision": "No previous revision",
      "profile": {
        "userDetail": "{{revision}}. revision, {{name}}, {{date}}"
      },
      "identityRoles": {
        "label": "Audit of roles",
        "role": "Role",
        "modification": {
          "ADD": "Add",
          "MOD": "Update",
          "DEL": "$t(content.audit.revision.modificationType.DEL)"
        }
      },
      "identityLogin": {
        "label": "Audit of login",
        "loginType": "Login type",
        "unsuccessfulAttempts": "Number of unsuccessful attempts",
        "mustChange": "Required password change",
        "validTill": "Valid password to",
        "validFrom": "Valid password from",
        "blockLoginDate": "Password blocked to",
        "modification": {
          "ADD": "Password create",
          "MODFAILED": "Failed",
          "MODSUCCESS": "Success"
        }
      },
      "identityPasswordChange": {
        "label": "Audit of password change",
        "created": "Password change date",
        "creator": "Password change made",
        "idmOnlyInfo": "<strong>Audit records for password change</strong> are shown here only when password change is made against the  <strong>CzechIdM application</strong>. If the change of password against the CzechIdM system is disabled or the CzechIdM system is not selected during password change. Isn't possible audit the password change."
      },
      "logging-event": {
        "title": "Logging events",
        "label": "Logging events",
        "header": "Logging events",
        "header-detail": "Logging event",
        "detail": "detail",
        "exceptions": "Error message",
        "rawSource": "Show copyable content"
      },
      "revision": {
        "id": "Revision Id",
        "modifier": "Modified by",
        "type": "Entity type",
        "modification": "Modification type",
        "revisionDate": "Date of revision",
        "deleted": "Entity was deleted",
        "created": "Entity was created",
        "entityId": "Entity Id",
        "modificationType": {
          "ADD": "Added",
          "MOD": "Modified",
          "DEL": "Deleted"
        }
      },
      "filter": {
        "dateFrom": {
          "label": "from",
          "placeholder": "Date from"
        },
        "dateTill": {
          "label": "Till",
          "placeholder": "Date till"
        }
      },
      "identities": {
        "username": "Login",
        "modifier": "Modifier",
        "identityId": "Identity Id",
        "entityType": "Entity type"
      }
    },
    "entityStates": {
      "header": "Entity states",
      "title": "Entity states",
      "label": "$t(content.entityStates.title)",
      "filter": {
        "text": {
          "placeholder": "$t(entity.EntityState.ownerType.label) / Entity identifier / $t(entity.EntityState.resultCode.label) (like)"
        },
        "operationStates": {
          "placeholder": "$t(entity.EntityState.operationState.label)"
        },
        "states": {
          "placeholder": "$t(entity.EntityState.result.label)"
        },
        "resultCode": {
          "placeholder": "$t(entity.EntityState.resultCode.label)"
        },
        "ownerType": {
          "placeholder": "$t(entity.EntityState.ownerType.label)"
        },
        "ownerId": {
          "placeholder": "$t(entity.EntityState.ownerId.label) (uuid)"
        }
      }
    },
    "entityEvents": {
      "header": "Entity events",
      "title": "Entity events",
      "label": "$t(content.entityEvents.title)",
      "filter": {
        "text": {
          "placeholder": "$t(entity.EntityEvent.ownerType.label) / Entity or event identifier (like)"
        },
        "ownerType": {
          "placeholder": "$t(entity.EntityEvent.ownerType.label)"
        },
        "ownerId": {
          "placeholder": "$t(entity.EntityEvent.ownerId.label) (uuid)"
        },
        "rootId": {
          "placeholder": "$t(entity.EntityEvent.rootId.label) (uuid)"
        },
        "parent": {
          "placeholder": "$t(entity.EntityEvent.parent.label) (uuid)"
        }
      },
      "counter": {
        "info": "Count of unprocessed events",
        "error": "Count of events with exception"
      },
      "event": {
        "header": "Entity events",
        "detail": {
          "header": "Event detail"
        }
      },
      "state": {
        "header": "Entity states",
        "detail": {
          "header": "State detail"
        }
      },
      "action": {
        "deleteAll": {
          "button": {
            "label": "Delete all entity events",
            "title": "Delete all entity events"
          },
          "header": "Delete entity events",
          "message": "Do you want to delete all persisted entity events and their states? <strong>All entity events in all states will be deleted!</strong>",
          "success": "Entity events successfully deleted."
        }
      }
    },
    "generateValues": {
      "header": "Generate values",
      "title": "Generate values",
      "create": {
        "header": "Create new generator"
      },
      "edit": {
        "header": "Edit generator"
      },
      "noGenerators": "The selected entity type doesn't contain any generators",
      "noProperties": "The selected generator doesn't have any settings.",
      "selectGenerator": "For display the settings, you must first select the generator.",
      "generatorProperties": {
        "title": "Generator settings"
      },
      "filter": {
        "dtoType": "Entity type"
      }
    },
    "tokens": {
      "header": "Tokens",
      "title": "Tokens",
      "help": "Token can be used to access the <a href='$t(app.documentation.url)/devel/documentation/security/dev/security#authorization_and_jwt_token' target='_blank'>CzechIdM API</a>.",
      "create": {
        "header": "Generate new token",
        "help": "Token can be used instead of a basic authentication to authenticate to the <a href='$t(app.documentation.url)/devel/documentation/security/dev/security#authorization_and_jwt_token' target='_blank'>CzechIdM API</a>.",
        "success": "Make sure to copy your new authentication token now. You won’t be able to see it again!<br />Token you have generated can be used to access the <a href='$t(app.documentation.url)/devel/documentation/security/dev/security#authorization_and_jwt_token' target='_blank'>CzechIdM API</a>."
      },
      "edit": {
        "header": "Token detail"
      },
      "button": {
        "add": {
          "label": "Generate new token"
        },
        "generate": {
          "label": "Generate token"
        },
        "copy": {
          "label": "Copy token into clipboard",
          "success": "Token copied into clipboard."
        }
      }
    }
  },
  "entity": {
    "id": {
      "short": "ID",
      "label": "Id",
      "title": "Identifier",
      "help": "Internal entity identifier"
    },
    "transactionId": {
      "short": "TI",
      "label": "Transaction identifier",
      "help": "User transaction identifier - entity was saved in this context (batch)."
    },
    "name": {
      "label": "Name"
    },
    "type": "Type",
    "created": "Created",
    "modified": {
      "short": "Changed",
      "label": "Last changed",
      "title": "Last changed"
    },
    "creator": "Creator",
    "modifier": {
      "short": "Modifier",
      "label": "Last modifier",
      "title": "Last modified by user"
    },
    "validFrom": "Valid from",
    "validTill": "Valid till",
    "code": {
      "label": "Code",
      "placeholder": "Unique code"
    },
    "description": {
      "label": "Description"
    },
    "Identity": {
      "_type": "User",
      "username": "Login",
      "externalCode": "Personal number",
      "firstName": "First name",
      "lastName": "Surname",
      "fullName": "Name",
      "email": "E-mail",
      "phone": "Phone",
      "description": "Note",
      "password": "Password",
      "passwordAgain": "Re-enter password",
      "homeOrganisation": "Home organization",
      "disabled": "$t(label.disabled)",
      "internist": "Employee",
      "externe": "External contractor",
      "titleBefore": "Titles before",
      "titleAfter": "Titles after",
      "fileRejected": "Profile picture file ({{name}}) must be of image type - jpg, jpeg, png, gif.",
      "fileUploaded": "Profile picture ({{name}}) was successfully uploaded.",
      "state": {
        "label": "State",
        "help": "Identity state. It's controlled by contracted positions or can be manually deactivated from the table actions.",
        "title": "$t(entity.Identity.state.help)"
      },
      "disabledReadonly": {
        "label": "$t(label.disabled)",
        "help": "$t(label.disabled) identity cannot log in. It's controlled by the state."
      },
      "formProjection": {
        "label": "User type",
        "help": "User type defines, which form will be used for user detail and editation."
      },
      "passwordExpiration": {
        "label": "Password expiration",
        "title": "Password expiration",
        "help": "Password expiration",
        "blockLoginDate": {
          "title": "$t(content.identity.profile.blockLoginDate)"
        },
        "valid": {
          "title": "Password is valid (expiration is not set)."
        },
        "validTill": {
          "title": "Password is valid till {{date}}."
        },
        "expired": {
          "title": "Password expired {{date}}."
        },
        "empty": {
          "title": "Password is not set."
        }
      }
    },
    "Profile": {
      "_type": "User profile - setting",
      "image": {
        "label": "Profile image"
      },
      "preferredLanguage": {
        "label": "Prefered language",
        "help": "This localization will be chosen after save and right after user log in."
      },
      "navigationCollapsed": {
        "label": "Collapse side menu",
        "help": "Side menu will be collapsed, icons will be shown only."
      },
      "defaultPageSize": {
        "label": "Default page size",
        "help": "Tables will show given count of records by default, default application setting will be used otherwise. Application refresh is needed (F5) after change (initialize tables state)."
      },
      "systemInformation": {
        "label": "Show system information",
        "help": "Show internal entity identifiers, user transactions, logs and other system information."
      },
      "twoFactorAuthenticationType": {
        "label": "Two-factor authentication",
        "help": "Two-factor authentication method."
      }
    },
    "Password": {
      "_type": "User password",
      "mustChange": {
        "label": "Password change is required",
        "help": "Password change is required after first login."
      }
    },
    "RoleCatalogue": {
      "_type": "Catalog folder",
      "code": {
        "name": "Code",
        "help": "Folder code is unique in catalog."
      },
      "name": {
        "name": "Folder name",
        "help": "Descriptive attribute for users. Unique in catalog level."
      },
      "url": "URL",
      "urlTitle": "URL title",
      "description": "description",
      "parent": {
        "name": "Parent folder in catalog"
      }
    },
    "RoleCatalogueRole": {
      "_type": "Role assigned into catalogue",
      "role": {
        "label": "$t(entity.Role._type)",
        "title": "Role in selected catalogue folder.",
        "help": "Role in selected catalogue folder."
      },
      "roleCatalogue": {
        "label": "$t(entity.RoleCatalogue._type)",
        "help": "Role will be in selected catalogue folder."
      }
    },
    "RoleComposition": {
      "_type": "Business role",
      "superior": {
        "label": "Superior role",
        "help": ""
      },
      "sub": {
        "label": "Subrole",
        "help": ""
      }
    },
    "IncompatibleRole": {
      "_type": "Incompatible role definition",
      "superior": {
        "label": "Owner role",
        "help": ""
      },
      "sub": {
        "label": "Incompatible role",
        "help": ""
      }
    },
    "RoleGuarantee": {
      "_type": "Role authorizer - defined by identity",
      "role": {
        "label": "Role"
      },
      "guarantee": {
        "label": "Authorizer - identity",
        "help": "Selected identity will be the role authorizer."
      },
      "type": {
        "label": "Authorizer type",
        "help": ""
      }
    },
    "RoleGuaranteeRole": {
      "_type": "Role authorizer - defined by role",
      "role": {
        "label": "Role"
      },
      "guaranteeRole": {
        "label": "Authorizer - role",
        "help": "Identities with the selected role assigned will be the role authorizers."
      },
      "type": {
        "label": "Authorizer type",
        "help": ""
      }
    },
    "ConfidentialStorageValue": {
      "ownerId": "Owner Id",
      "key": "Key",
      "ownerType": "Owner type",
      "serializableValue": "Value",
      "created": "$t(entity.created)",
      "creator": "$t(entity.creator)"
    },
    "Script": {
      "_type": "Script",
      "name": "Script name",
      "category": "Category",
      "code": "Code",
      "script": {
        "help": "Body of script in groovy.",
        "label": "Script"
      },
      "select": {
        "help": "",
        "button": "Insert script",
        "label": "Selection of available scripts"
      },
      "description": "Script description"
    },
    "ScriptAuthority": {
      "type": {
        "label": "Authority type",
        "help": ""
      },
      "name": "Name",
      "className": "Class name",
      "service": "Service name"
    },
    "FormDefinition" : {
      "_type": "Form definition",
      "type": "Type",
      "code": "Code",
      "name": "Name",
      "unmodifiable": {
        "label": "System definition",
        "help": "System definition can't be deleted and can't be edited some of her attributes."
      },
      "main": {
        "label": "Main definition",
        "help": "Main / default definition"
      },
      "description": "Description",
      "module": {
        "label": "Module",
        "help": "Module is defined or used in given module. Module is used for example for resolving the localization. 'core' module is used as default."
      }
    },
    "FormProjection" : {
      "_type": "Form projection",
      "code": {
        "label": "Code",
        "help": "Unique projection code. Code is used e.q. for resolving the localization."
      },
      "ownerType": {
        "label": "Owner type"
      },
      "route": {
        "label": "Frontend target",
        "help": "Form (component) on frontend."
      },
      "description": {
        "label": "Description"
      },
      "module": {
        "label": "Module",
        "help": "Module is defined or used in given module. Module is used for example for resolving the localization. 'core' module is used as default."
      },
      "disabled": {
        "label": "$t(label.disabled)",
        "help": "Projection will not be available for creating new user."
      },
      "formDefinitions": {
        "label": "Form definitions",
        "help": "Form definitions and attributes to show.",
        "empty": "Form definitions and attributes are not defined.",
        "placeholder": "Select form definition ...",
        "button": {
          "add": {
            "label": "Add form definition",
            "title": "Add another form definition into form projection"
          },
          "remove": {
            "title": "Remove form definition"
          }
        },
        "attributes": {
          "placeholder": "All attributes in selected form definition or select ..."
        }
      },
      "basicFields": {
        "label": "Basic attributes for user",
        "help": "Basic user attributes to show. All basic user attributes will be shown by default.",
        "placeholder": "All basic attributes or select ..."
      },
      "basicContractFields": {
        "label": "Basic attributes for contract",
        "help": "Basic contract attributes to show. All supported basic contract attributes will be shown by default.",
        "placeholder": "All supported basic attributes or select ..."
      },
      "formValidations": {
        "label": "Basic attributes validation / setting",
        "help": "Validations / setting for shown basic attributes.",
        "empty": "Validations  / setting for shown basic attributes are not defined.",
        "placeholder": "Select basic attribute ...",
        "attribute": {
          "label": "Attribute",
          "help": "Define attribute validation / setting for supported user or contract basic fields."
        },
        "button": {
          "add": {
            "label": "Add attribute validation / setting",
            "title": "Add basic field validation / setting for this form projection."
          },
          "remove": {
            "title": "Remove attribute validation / setting"
          }
        },
        "create": {
          "header": "Add attribute validation / setting",
          "message": {
            "contains": "Validation / setting for given basic filed is already set."
          }
        },
        "edit": {
          "header": "Edit attribute validation / setting"
        }
      },
      "properties": {
        "label": "Properties",
        "help": "Additional projection properties."
      }
    },
    "DelegationDefinition" : {
      "_type": "Definition of delegation",
      "type": {
        "label": "Delegation type",
        "help": "Defines in which situation this delegation will be used."
      },
      "validFrom": {
        "label": "$t(entity.validFrom)"
      },
      "validTill": {
        "label": "$t(entity.validTill)"
      },
      "delegator": {
        "label": "Delegator"
      },
      "delegatorContract": {
        "label": "Delegator's contract"
      },
      "delegate": {
        "label": "Delegate"
      },
      "description": {
        "label": "Description"
      }
    },
    "Delegation" : {
      "_type": "Delegation",
      "definition": {
        "label": "Definition of the delegation"
      },
      "ownerId": {
        "label": "Task"
      },
      "ownerType": {
        "label": "Delegation target type"
      },
      "ownerState": {
        "label": "Task state"
      }
    },
    "FormAttribute" : {
      "_type": "Form attribute",
      "code": {
        "label": "Code",
        "help": "Attribute key."
      },
      "name": {
        "label": "Name",
        "help": "Will be shown on form detail."
      },
      "formDefinition": {
        "label": "Definition name"
      },
      "seq": {
        "label": "Order",
        "help": "Attribute order on form detail."
      },
      "persistentType": "Attribute type",
      "faceType": {
        "label": "Face type",
        "placeholder": "Select face type or leave it default ...",
        "help": "Choose attribute renderer. Default renderer is chosen by attribute type."
      },
      "codeList": {
        "label": "Code list",
        "placeholder": "Select code list ...",
        "help": ""
      },
      "description": "Description",
      "required": "Required",
      "readonly": "$t(label.readOnly)",
      "confidential": "Confidential",
      "multiple": "Multivalued",
      "placeholder": {
        "label": "Placeholder",
        "help": "Will be shown in empty attribute input as help text."
      },
      "defaultValue": "Default value",
      "unmodifiable": {
        "help": "System attribute cannot be deleted. Some of its configurations are not editable.",
        "label": "System attribute"
      },
      "unique": {
        "short": "Unique",
        "label": "Unique value",
        "title": "Unique value"
      },
      "regex": {
        "short": "Regex",
        "label": "Regular expression",
        "title": "Validate a value with the regular expression.",
        "help": "Validate a value with the regular expression."
      },
      "min": {
        "short": "Min",
        "label": "Minimal value",
        "title": "Minimal value"
      },
      "max": {
        "short": "Max",
        "label": "Maximum value",
        "title": "Maximum value"
      },
      "minDate": {
        "short": "Min",
        "label": "Minimum date in days",
        "title": "Number of days related to current date.",
        "help": "Number of days related to current date."
      },
      "maxDate": {
        "short": "Max",
        "label": "Maximum date in days",
        "title": "Number of days related to current date.",
        "help": "Number of days related to current date."
      },
      "minLength": {
        "short": "Min",
        "label": "Minimum character length",
        "title": "Minimum character length.",
        "help": ""
      },
      "maxLength": {
        "short": "Max",
        "label": "Maximum character length",
        "title": "Maximum character length.",
        "help": ""
      },
      "validationMessage": {
        "label": "Validation message",
        "help": "Custom validation message. If message is not defined, then default message by invalid validation type will be shown. Can contain localization key (e.g. 'core:validationError.invalid.unique')."
      }
    },
    "FormValue": {
      "ownerId": {
        "label": "Owner"
      },
      "value": {
        "label": "Attribute's value"
      },
      "persistentType": {
        "label": "Attribute type"
      }
    },
    "Role": {
      "_type": "Role",
      "code": {
        "label": "Code",
        "help": "Technical name."
      },
      "baseCode": {
        "label": "Code",
        "help": "Technical name."
      },
      "environment": {
        "label": "Environment",
        "help": "Environment for which the role is intended.",
        "helpCode": "$t(entity.Role.environment.help) Full role's code will have value <strong>{{ code }}</strong>. This unique code will be used as role identifier."
      },
      "name": "Name",
      "roleType": "Type",
      "priority": "Priority",
      "priorityEnum": "Priority level",
      "disabled": "$t(label.disabled)",
      "approvable": "Approval required",
      "superiorRoles": "Superior roles",
      "subRoles": "Subordinate roles",
      "authorities": "Authorizations",
      "approveRemove": "Role removal approval",
      "identityRoleAttributeDefinition": {
        "label": "Definition of assigned attributes",
        "help": "First select (and save) the main definition. From this definition, you can select attributes that should be filled in during role assignment."
      },
      "canBeRequested": "Can be requested",
      "description": "Description",
      "guarantees": "Role authorizers",
      "roleCatalogue": {
        "name": "Folder in catalog"
      }
    },
    "RoleTreeNode": {
      "_type": "Automatic role",
      "role": "Role",
      "treeNode": "Tree node",
      "recursionType": "Recursion type"
    },
    "AutomaticRole": {
      "name": {
          "label": "Name",
          "help": "The name is used to easily identify the automatic role."
      },
      "role": {
        "label": "Role",
        "help": "Selected role will be assigned to identities base on specified Rules."
      },
      "attribute": {
        "type": {
          "label": "Type of checked attribute",
          "help": "For this attribute type, the value of the rule will be checked"
        },
        "concept": {
          "label": "Concept",
          "info": "Concept",
          "help": "This automatic role is a Concept. Push 'Recalculation' to assign the role to the users."
        },
        "attributeName": "Attribute name",
        "comparison": "Comparison type",
        "formAttribute": "Form attribute",
        "value": {
            "label": "Value",
            "help": "The value with which the value in the attribute will be compared."
          }
      }
    },
    "AuthorizationPolicy": {
      "_type": "Permission",
      "role": "Role",
      "disabled": {
        "label": "$t(label.disabled)",
        "help": "Inactive policy will not be applied"
      },
      "description": {
        "label": "Description"
      },
      "seq": {
        "label": "Order",
        "help": "Only for optimalization reasons. Order is used in permission evaluation on single record / entity. Simplest policy should have lower order, then it will be evaluated at first."
      },
      "evaluatorType": {
        "label": "Evaluator type"
      },
      "authorizableType": {
        "label": "Entity type",
        "placeholder": "Select entity type or leave it empty for all types",
        "help": "If entity type is not selected, then all types will be evaluating"
      },
      "evaluatorProperties": {
        "label": "Configuration",
        "title": "Evaluator configuration"
      },
      "basePermissions": {
        "label": "Permissions",
        "title": "Granted permission",
        "placeholder": "Select permissions",
        "help": "Permissions will be granted by evaluator configuration"
      }
    },
    "IdentityRole": {
      "_type": "Assigned role",
      "role" : "Role",
      "identityContract": {
        "label": "Contracted position",
        "title": "Contracted position",
        "placeholder": "Contracted position",
        "help": "Connection to organization or another tree structure"
      },
      "contractPosition": {
        "label": "Other positon",
        "title": "Other contracted positon"
      },
      "automaticRole": {
        "label": "Automatic role",
        "title": "Automatic role",
        "placeholder": "Automatic role",
        "help": "Role is assigned automatically (by contracted position or attribute value)"
      },
      "roleCataloguePicker": "Select a folder from the catalog",
      "directRole": {
        "label": "Assigned by role",
        "title": "Directly assigned role, which assigned this role as well (business role).",
        "help": "$t(entity.IdentityRole.directRole.title)"
      },
      "duplicate": {
        "label": "Requested role is duplicate",
        "header": "Requested role is duplicate with role:"
      }
    },
    "ExportImport": {
      "_type": "Export/Import batches",
      "name": {
        "label": "Description"
      },
      "executorName": {
        "label": "Batch content"
      },
      "type": {
        "label": "Batch type"
      },
      "creator": {
        "label": "$t(core:entity.creator)"
      },
      "created": {
        "label": "$t(core:entity.created)"
      },
      "modified": {
        "label": "Modified"
      },
      "result": {
        "state": "State"
      }
    },
    "IdentityAccount": {
      "attribute": {
        "name": "Attribute",
        "value": "Value"
      }
    },
    "Attachment": {
      "name": "Name",
      "description": "Description",
      "mimetype": "Type",
      "encoding": "Coding",
      "filesize": "Size [B]",
      "versionLabel": "Version"
    },
    "ApprovalTask": {
      "taskId": "Identifier",
      "taskName": "Task name",
      "createdDate": "Created",
      "closedDate": "Closed",
      "relatedTaskId": "ID of WF instance",
      "approvedBy": "Approved by",
      "taskState": "State",
      "note": "Note"
    },
    "IdentityContract": {
      "_type": "Positions",
      "id": "Internal position id",
      "treeType": "Structure type",
      "workPosition": "Position",
      "position": "Name of the position",
      "identity": "User",
      "validFrom": "$t(entity.validFrom)",
      "validTill": "$t(entity.validTill)",
      "guarantee": "Authorizer",
      "externe": "External contractor",
      "managers": {
        "label": "Authorizers",
        "title": "Authorizer and all managers for position in structure",
        "total": "Total number of authorizers"
      },
      "disabled": {
        "label": "$t(label.disabled)",
        "help": "Invalid work position. Roles cannot be assigned to invalid position. Depends on position's state."
      },
      "description": "Note",
      "main": {
        "short": "M",
        "label": "Main position",
        "help": "Main / prime work position.",
        "title": "Main position"
      },
      "state": {
        "label": "State",
        "help": "Contract's state"
      }
    },
    "ContractSlice": {
      "_type": "Time slices",
      "parentContract": "Parent contract relationship",
      "contractCode": "Code of contract relationship",
      "code": "Code of slice",
      "code": {
        "label": "Code of slice",
        "help": "Identifier of the time slice (typically external identifier from source system)."
      },
      "usingAsContract": {
        "label": "Currently used",
        "help": "If checked, this time slot is currently used as the source of the parent contract (the values on the parent contract are copied from this slice)."
      },
      "id": "$t(entity.IdentityContract.id)",
      "treeType": "$t(entity.IdentityContract.treeType)",
      "workPosition": "$t(entity.IdentityContract.workPosition)",
      "position": "$t(entity.IdentityContract.position)",
      "identity": "$t(entity.IdentityContract.identity)",
      "contractValidFrom": "$t(entity.validFrom)",
      "contractValidTill": "$t(entity.validTill)",
      "validFrom": "Valid from (slice)",
      "validTill": "Valid till (slice)",
      "guarantee": "$t(entity.IdentityContract.guarantee)",
      "externe": "$t(entity.IdentityContract.externe)",
      "managers": {
        "label": "$t(entity.IdentityContract.managers.label)",
        "title": "$t(entity.IdentityContract.managers.title)"
      },
      "disabled": {
        "label": "$t(entity.IdentityContract.disabled.label)",
        "help": "$t(entity.IdentityContract.disabled.help)"
      },
      "description": "$t(entity.IdentityContract.description)",
      "main": {
        "label": "$t(entity.IdentityContract.main.label)",
        "help": "$t(entity.IdentityContract.main.help)",
        "title": "$t(entity.IdentityContract.main.title)"
      },
      "state": {
        "label": "$t(entity.IdentityContract.state.label)",
        "help": "$t(entity.IdentityContract.state.help)"
      }
    },
    "TreeNode": {
      "_type": "Tree node",
      "id": "Identifier",
      "code": "Code",
      "name": "Name",
      "disabled": "$t(label.disabled)",
      "shortName": "Name",
      "parentId": "Superior element",
      "parent": {
        "name": "Superior element",
        "false": "Does not have parent"
      },
      "treeType": {
        "label": "$t(entity.TreeNode.treeType.name)",
        "name": "Structure type"
      },
      "defaultTreeNode": {
        "label": "Default tree element",
        "true": "Yes",
        "false": "No"
      }
    },
    "TreeType": {
      "_type": "Structure",
      "code": "Code",
      "name": "Name",
      "defaultTreeType": {
        "label": "Default tree",
        "help": "This tree type will be used as default organization structure.",
        "true": "Yes",
        "false": "No"
      },
      "defaultTreeNode": {
        "label": "Default tree element",
        "help": "This tree element will be used as default, e.g. for default work position."
      }
    },
    "Delegate": {
      "_type": "Delegation",
      "id": "Internal id",
      "identity": "User",
      "delegate": "To user",
      "from": "from",
      "till": "to",
      "state": "Delegation state",
      "isDateUnlimited": "Unlimited date"
    },
    "WorkflowTaskInstance": {
      "taskDescription": "Subject",
      "taskCreated": "Created on",
      "id": "Task Id",
      "taskAssignee": "Assigned",
      "filter": {
        "created": "Tasks created",
        "createdBefore": "Tasks created before",
        "createdAfter": "Tasks created after"
      }
    },
    "WorkflowHistoricProcessInstance": {
      "name": "Process name",
      "startTime": "Created on",
      "endTime": "Ends on",
      "startActivityId": "Started by activity",
      "deleteReason": "Reason for deletion",
      "processVariables": "Process variables",
      "superProcessInstanceId": "Parent process id",
      "processDefinitionKey": "Code of the process definition",
      "id": "Id",
      "applicant": "Applicant"
    },
    "WorkflowHistoricTaskInstance": {
      "name": "Task name",
      "startTime": "Creation date",
      "endTime": "Ends on",
      "assignee": "Assigned (resolved)",
      "deleteReason": "Completed",
      "id": "Id",
      "priority": "Priority",
      "createTime": "Created on",
      "completeTaskDecision": "Result",
      "completeTaskMessage": "Note from resolver",
      "candicateUsers": "Can solve"
    },
    "Notification": {
      "topic": "Topic",
      "created": "$t(entity.created)",
      "message": {
        "level": "Level",
        "subject": "Subject",
        "message": "Message",
        "textMessage": "Message (text)",
        "htmlMessage": "Message (html)",
        "renderedHtmlMessage": "Message (rendered html)",
        "model": "Message (model)"
      },
      "sender": "Sender",
      "recipients": "Recipients",
      "sent": "Sent",
      "sentLog": "Message from sender",
      "type": "Type",
      "template": "Template"
    },
    "NotificationTemplate": {
      "_type": "Notification Template",
      "name": "Name",
      "code": "Code",
      "sender": "Sender address",
      "subject": "Subject",
      "parameter": {
        "name": "Parameters",
        "help": "List of template parameters. Parameters separate by comma."
      },
      "unmodifiable": {
        "name": "System template",
        "help": "System templates is necessary for correct functioning application. System templates can't be removed or change their code."
      },
      "bodyHtml": {
        "name": "Message body (html)",
        "help": "For a list of available templates write character '$'"
      },
      "bodyText": "Message body (text)",
      "module": {
        "label": "Module",
        "help": "Template is defined or used in given module. Module is used for example for resolving the localization. 'core' module is used as default."
      }
    },
    "NotificationConfiguration": {
      "_type": "Configure notification",
      "topic": "$t(entity.Notification.topic)",
      "level": "Level",
      "notificationType": "Channel",
      "template": "Template",
      "description": "Description",
      "disabled": {
        "label": "$t(label.disabled)",
        "help": "Notifications will not be sent."
      },
      "redirect": {
        "label": "Redirect",
        "help": "Notification will be redirected to configured recipients. Notification to original recipient will be not sent."
      },
      "recipients": {
        "label": "Recipients",
        "help": "Additional notification will be sent to configured recipients. Recipients are required, if notification is redirected."
      }
    },
    "Email": {
      "topic": "$t(entity.Notification.topic)",
      "created": "$t(entity.Notification.created)",
      "message": {
        "subject": "$t(entity.Notification.message.subject)",
        "message": "$t(entity.Notification.message.message)",
        "textMessage": "$t(entity.Notification.message.textMessage)",
        "htmlMessage": "$t(entity.Notification.message.htmlMessage)",
        "model": "$t(entity.Notification.message.model)",
        "level": "$t(entity.Notification.message.level)"
      },
      "sender": "$t(entity.Notification.sender)",
      "recipients": "$t(entity.Notification.recipients)",
      "sent": "$t(entity.Notification.sent)",
      "sentLog": "$t(entity.Notification.sentLog)",
      "type": "$t(entity.Notification.type)"
    },
    "WebsocketLog": {
      "topic": "$t(entity.Notification.topic)",
      "created": "$t(entity.Notification.created)",
      "message": {
        "subject": "$t(entity.Notification.message.subject)",
        "message": "$t(entity.Notification.message.message)",
        "textMessage": "$t(entity.Notification.message.textMessage)",
        "htmlMessage": "$t(entity.Notification.message.htmlMessage)",
        "model": "$t(entity.Notification.message.model)",
        "level": "$t(entity.Notification.message.level)"
      },
      "sender": "$t(entity.Notification.sender)",
      "recipients": "$t(entity.Notification.recipients)",
      "sent": "$t(entity.Notification.sent)",
      "sentLog": "$t(entity.Notification.sentLog)",
      "type": "$t(entity.Notification.type)"
    },
    "SmsLog": {
      "topic": "$t(entity.Notification.topic)",
      "created": "$t(entity.Notification.created)",
      "message": {
        "subject": "$t(entity.Notification.message.subject)",
        "message": "$t(entity.Notification.message.message)",
        "textMessage": "$t(entity.Notification.message.textMessage)",
        "htmlMessage": "$t(entity.Notification.message.htmlMessage)",
        "model": "$t(entity.Notification.message.model)",
        "level": "$t(entity.Notification.message.level)"
      },
      "sender": "$t(entity.Notification.sender)",
      "recipients": "$t(entity.Notification.recipients)",
      "sent": "$t(entity.Notification.sent)",
      "sentLog": "$t(entity.Notification.sentLog)",
      "type": "$t(entity.Notification.type)"
    },
    "Configuration": {
      "_type": "Configuration item",
      "name": "Key",
      "value": "Value",
      "secured": "System",
      "public": "Public",
      "confidential": "Confidential"
    },
    "IdmMonitoringType": {
      "_type": "Monitoring",
      "name": "Name",
      "value": "Value",
      "module": "Module",
      "level": "State",
      "threshold": "Threshold value"
    },
    "Audit": {
      "label": "Audit",
      "id": "Revision ID",
      "modification": "Actions",
      "modifier": "Executed by",
      "revisionDate": "Date of revision",
      "changedAttributes": {
        "label": "Changed attributes",
        "placeholder": "Own group search by changed attributes. $t(entity.Audit.changedAttributes.tooltip)",
        "tooltip": "Enter individual values of your group changed attributes."
      },
      "type": "Entity type",
      "key": "Attribute",
      "value": "Value",
      "entityId": "Entity ID",
      "entity": "Entity (IdM)",
      "ownerId": "Owner id",
      "ownerType": "Owner type",
      "ownerCode": "Owner code",
      "subOwnerId": "Sub owner id",
      "subOwnerType": "Sub owner type",
      "subOwnerCode": "Sub owner code"
    },
    "LoggingEvent": {
      "id": "ID",
      "timestmp": "Date",
      "formattedMessage": "Formatted message",
      "loggerName": "Name of logger",
      "levelString": "Type",
      "threadName": "Thread",
      "arg0": "Argument 0",
      "arg1": "Argument 1",
      "arg2": "Argument 2",
      "arg3": "Argument 3",
      "callerFilename": "From file",
      "callerClass": "From class",
      "callerMethod": "From method",
      "callerLine": "Line",
      "text": "Logging event content"
    },
    "LoggingEventException": {
      "id": "Row",
      "traceLine": "Record"
    },
    "PasswordPolicy": {
      "type": {
        "label": "Type"
      },
      "name": {
        "label": "Name"
      },
      "basic": {
        "label": "Basic information"
      },
      "bases": {
        "label": "Characters",
        "help": "Character set allowed for password generation. Forbidden characters are excluded from sets."
      },
      "generateType": {
        "label": "Generation type"
      },
      "disabled": {
        "label": "$t(label.disabled)"
      },
      "description": {
        "label": "Description"
      },
      "defaultPolicy": {
        "label": "Default policy",
        "help": "Default policy is used for CzechIdM and all systems without set policy."
      },
      "passwordLengthRequired": {
        "label": "Password length requirement"
      },
      "minPasswordLength": {
        "label": "Minimum length"
      },
      "maxPasswordLength": {
        "label": "Maximum length"
      },
      "upperCharRequired": {
        "label": "Uppercase letters requirement"
      },
      "minUpperChar": {
        "label": "Minimum number of uppercase letters"
      },
      "lowerCharRequired": {
        "label": "Lowercase letters requirement"
      },
      "minLowerChar": {
        "label": "Minimum number of lowercase letters"
      },
      "numberRequired": {
        "label": "Digits requirement"
      },
      "minNumber": {
        "label": "Minimum number of digits"
      },
      "specialCharRequired": {
        "label": "Special characters requirement"
      },
      "minSpecialChar": {
        "label": "Minimum number of special characters"
      },
      "prohibitedCharacters": {
        "label": "Forbidden characters",
        "help": "Listed characters are not allowed for generating and validating passwords. Enter characters without spaces, e.g. 1LliIo0!"
      },
      "prohibitedBeginCharacters": {
        "label": "Forbidden characters at the beginning",
        "help": "Listed characters are not allowed to be used as the first character of passwords. Enter characters without spaces, e.g. 1LliIo0!"
      },
      "prohibitedEndCharacters": {
        "label": "Forbidden characters at the end",
        "help": "Listed characters are not allowed to be used as the last character of passwords. Enter characters without spaces, e.g. 1LliIo0!"
      },
      "weakPassRequired": {
        "label": "Required weak passwords"
      },
      "weakPass": {
        "label": "Weak passwords"
      },
      "passphraseWords": {
        "label": "Number of words in passphrase",
        "help": "Select number of words passphrase contains."
      },
      "maxPasswordAge": {
        "label":"Maximum password age",
        "help": "Maximum number of days for password validity."
      },
      "minPasswordAge": {
        "label": "Minimum number of days",
        "help": "Minimum number of days, after expiration of which the password can be changed again."
      },
      "enchancedControl": {
        "label": "Enhanced control",
        "help": "Enhanced control makes passwords more secure by comparing new passwords with previous ones and user attributes. It is possible to select which rules are required."
      },
      "minRulesToFulfill": {
        "label": "Minimum number of additional rules for policy",
        "help": "Minimum number of the requirements which password must match to be valid."
      },
      "maxHistorySimilar": {
        "label": "Number of old passwords checked for match",
        "help": "Number of retroactively checked passwords, which cannot be same as new."
      },
      "blockLoginTime": {
        "label": "Login blocking time (seconds)",
        "help": "After exceeding the limit of unsuccessful login attempts, the user will be blocked from signing in for this period of time. If the user repeatedly login unsuccessfully, the time will be multiplied with blocks of unsuccessful attempts."
      },
      "maxUnsuccessfulAttempts": {
        "label": "Maximum number of unsuccessful login attempts",
        "help": "Number of unsuccessful login attempts. Upon overrun, the user will be blocked from logging into the application."
      },
      "lowerCharBase": {
        "label": "Lowercase letters"
      },
      "upperCharBase": {
        "label": "Uppercase letters"
      },
      "numberBase": {
        "label": "Digits"
      },
      "specialCharBase": {
        "label": "Special characters"
      },
      "identityAttributeCheck": {
        "label": "User attributes not allowed in password",
        "help": "Password may not contain any listed attributes or variations thereof."
      },
      "prefix": {
        "label": "Prefix",
        "help": "The prefix will be automatically added to the beginning of the generated part. To skip the prefix, leave the field blank."
      },
      "suffix": {
        "label": "Suffix",
        "help": "Suffix will be automatically added to the end of the generated part. To skip the suffix, leave the field blank."
      }
    },
    "Module": {
      "id": "ID",
      "name": "Module name",
      "vendor": "Provider",
      "version": "Version",
      "description": "Description",
      "disabled": "$t(label.disabled)",
      "documentation": "Documentation",
      "build": "Build",
      "buildNumber": "Revision",
      "buildTimestamp": "Build date"
    },
    "Cache": {
      "name": "Name",
      "description": "Description",
      "size": "Number of values",
      "module": "Module"
    },
    "EntityEventProcessor": {
      "id": "ID",
      "name": "Name",
      "module": "Module",
      "description": "Description",
      "entityType": "Entity type",
      "eventType": "Event type",
      "eventTypes": "Event types",
      "order": "Order",
      "disabled": "$t(label.disabled)",
      "disableable": "Cannot be inactivated",
      "closeable": "Closes processing"
    },
    "FilterBuilder": {
      "name": {
        "label": "Property name",
        "title": "Property used in url for apply filter."
      },
      "module": {
        "label": "Module"
      },
      "description": {
        "label": "Description"
      },
      "entityClass": {
        "label": "Entity type"
      },
      "filterClass": {
        "title": "Filter type"
      },
      "filterBuilderClass": {
        "label": "Filter type"
      }
    },
    "BulkAction": {
      "name": {
        "label": "Name"
      },
      "module": {
        "label": "Module"
      },
      "description": {
        "label": "Description"
      },
      "entityClass": {
        "label": "Entity type"
      },
      "order": {
        "label": "Order"
      },
      "disabled": {
        "label": "$t(label.disabled)"
      },
      "level": {
        "label": "Level"
      },
      "deleteAction": {
        "label": "Delete action",
        "title": "Action deletes records",
        "help": "Action deletes records. Action will be in bottom menu section, is action is included in menu."
      },
      "icon": {
        "label": "Icon",
        "title": "Icon on frontend",
        "help": "Icon on frontend. Icon libraries can be used: component:, fa:, glyph:."
      },
      "quickButton": {
        "label": "Button",
        "title": "Render action as button",
        "help": "Render action as quick button.The first available actions are rendered as buttons, if icon is defined. This configuration enforces rendering action as quick button (order is ignored)."
      }
    },
    "AvailableServices": {
      "methodName": {
        "label": "Method name",
        "title": "Method name."
      },
      "returnType": {
        "label": "Return type"
      },
      "arguments": {
        "label": "Method parameters"
      }
    },
    "LongRunningTask": {
      "_type": "Long running task",
      "taskId": "Task ID",
      "taskType": "Task type (class)",
      "taskDescription": "Description",
      "count": "Count",
      "counter": "Processed",
      "successItemCount": {
        "help": "Item count - success"
      },
      "warningItemCount": {
        "help": "Item count - warning"
      },
      "failedItemCount": {
        "help": "Item count - failed"
      },
      "started": "Started",
      "notstarted": "Not started yet",
      "result": {
        "state": "State",
        "code": "Code"
      },
      "instanceId": {
        "label": "Instance",
        "help": "Task will be executed on server (instance identifier)"
      },
      "duration": "Task duration",
      "taskProperties": {
        "label": "Parameters",
        "core-instanceid": {
          "label": "$t(entity.LongRunningTask.instanceId.label)"
        }
      },
      "dryRun": {
        "label": "Dry run",
        "help": "Task was executed in dryRun mode."
      }
    },
    "LongRunningTaskItem": {
      "referencedEntityId": {
        "label": "Entity",
        "placeholder": "Entity identifier"
      },
      "referencedEntityType": {
        "label": "Entity type",
        "placeholder": "Entity type"
      },
      "result": {
        "state": "State"
      },
      "referencedDtoType": "Entity type"
    },
    "SchedulerTask": {
      "_type": "Scheduled task",
      "id": "Identificator",
      "taskType": "Task type",
      "instanceId": {
        "label": "$t(entity.LongRunningTask.instanceId.label)",
        "help": "Execute on server (instance identifier)"
      },
      "description": "Description",
      "dryRun" : "Dry run",
      "triggers": "Scheduled starts",
      "trigger": {
        "_type": {
          "label": "Type",
          "help": "Scheduled start type"
        },
        "fireTime": "Fire time",
        "executeDate": {
          "label": "Valid from",
          "help": "First fire time will be related to given date."
        },
        "repeat": {
          "repeatEvery": "Repeat every",
          "at": "at",
          "every_1": "on",
          "every_2": "on",
          "every_3": "on",
          "monthly": "Monthly",
          "day": "day",
          "cronExpression": "Result cron expression:",
          "warning": "Task will run only if current month contains requested day"
        },
        "cron": {
          "label": "Cron expression",
          "help": "Quartz cron",
          "link": {
            "href": "http://www.quartz-scheduler.org/documentation/quartz-2.2.2/tutorials/crontrigger.html",
            "text": "expression"
          }
        },
        "dependent": {
          "initiatorTaskId": {
            "label": "Other task",
            "help": "Triggered, when other scheduled task successful end."
          }
        }
      },
      "parameters": {
        "label": "Parameters"
      }
    },
    "RoleRequest": {
      "_type": "Request for change roles",
      "systemState": "State on systems",
      "applicant": "Requested for",
      "implementer": "Applicant",
      "state": "State in IdM",
      "states": "State in IdM / systems",
      "executeImmediately": {
        "label": "Without approval",
        "help": "Approval workflow will be skipped (workflow notifications will not be send)."
      },
      "log": "Log",
      "description": {
        "label" : "Description",
        "placeholder": "Verbal description of a request to change assinged roles"
      },
      "created": "Created",
      "modified": "Modified",
      "candicateUsers": "Can solve",
      "currentActivity": "Approval state",
      "originalRequest": "Original request",
      "wfProcessId": "WF identifier",
      "systemStateLog": "Error log from a systems"
    },
    "ConceptRoleRequest": {
      "identityContract": "Employment relationship",
      "operation": "Operation",
      "role": "Role",
      "validFrom": "From",
      "validTill": "Till",
      "wfProcessId": "Id WF process",
      "state": "State of request",
      "created": "Created",
      "modified": "Modified"
    },
    "ContractGuarantee": {
      "_type": "Contracted position guarantee",
      "identityContractId": "Contracted position",
      "guarantee": {
        "label": "Guarantee",
        "help": "Guarantee assigned to contracted position"
      }
    },
    "ContractPosition": {
      "_type": "Other contracted positon",
      "identityContract": {
        "label": "Contracted position"
      },
      "workPosition": {
        "label": "Position"
      },
      "position": {
        "label": "Name of the position"
      }
    },
    "ContractSliceGuarantee": {
      "contractSliceId": "Time slice of contract position",
      "guarantee": {
        "label": "Guarantee",
        "help": "Guarantee assigned to slice of contract position"
      }
    },
    "AutomaticRoleRequest": {
      "role": "Requested for role",
      "implementer": "Applicant",
      "automaticAttributeRole": "Automatic role (by attribute)",
      "automaticTreeRole": "Automatic role (by tree)",
      "requestType": "Type of automatic role",
      "operation": "Requested change",
      "state": "State",
      "name": "Name of automatic role",
      "executeImmediately": "Without approval",
      "description": {
        "label" : "Description",
        "placeholder": "Verbal description of a request"
      },
      "created": "Created",
      "modified": "Modified",
      "candicateUsers": "Approvers",
      "currentActivity": "Approval state",
      "wfProcessId": "WF identifier"
    },
    "Request": {
      "requestType": "Request for",
      "state": "State",
      "name": "Name",
      "executeImmediately": "Without approval",
      "description": {
        "label" : "Description",
        "placeholder": "Verbal description of a request"
      },
      "created": "Created",
      "modified": "Modified",
      "candicateUsers": "Approvers",
      "currentActivity": "Approval state",
      "wfProcessId": "WF identifier",
      "result": "Result",
      "implementer": "Implementer",
      "entity": "Request for"
    },
    "RequestItem": {
      "state": "State",
      "created": "Created",
      "modified": "Modified",
      "ownerType": "Object type",
      "operation": "Requested change",
      "ownerId":"Target object",
      "candicateUsers": "Approvers",
      "currentActivity": "Approval state",
      "wfProcessId": "WF identifier",
      "data": "Data",
      "result": "Result"
    },
    "AutomaticRoleAttributeRuleRequest": {
      "type": {
        "label": "$t(entity.AutomaticRole.attribute.type.label)",
        "help": "$t(entity.AutomaticRole.attribute.type.help)"
      },
      "concept": {
        "label": "$t(entity.AutomaticRole.attribute.concept.label)",
        "info": "$t(entity.AutomaticRole.attribute.concept.info)",
        "help": "$t(entity.AutomaticRole.attribute.type.help)"
      },
      "attributeName": "$t(entity.AutomaticRole.attribute.attributeName)",
      "comparison": "$t(entity.AutomaticRole.attribute.comparison)",
      "formAttribute": "$t(entity.AutomaticRole.attribute.formAttribute)",
      "value": {
          "label": "$t(entity.AutomaticRole.attribute.value.label)",
          "help": "$t(entity.AutomaticRole.attribute.value.help)"
        }
    },
    "EntityEvent": {
      "_type": "Event",
      "created": {
        "label": "$t(entity.created)"
      },
      "eventStarted": {
        "label": "Started"
      },
      "eventEnded": {
        "label": "Ended"
      },
      "duration": {
        "label": "Event duration"
      },
      "superOwnerId": {
        "label": "Super owner"
      },
      "owner": {
        "label": "Entity"
      },
      "ownerType": {
        "label": "Entity type"
      },
      "ownerId": {
        "label": "Entity identifier"
      },
      "result": {
        "label": "Result"
      },
      "eventType": {
        "label": "$t(entity.EntityEventProcessor.eventType)",
        "title": "Event type"
      },
      "rootId": {
        "label": "Root event"
      },
      "parent": {
        "label": "Parent event"
      },
      "instanceId": {
        "label": "$t(entity.LongRunningTask.instanceId.label)",
        "help": "$t(entity.LongRunningTask.instanceId.help)"
      },
      "processedOrder": {
        "label": "Processed order"
      },
      "executeDate": {
        "label": "Execute date",
        "help": "Event will be processed in given time."
      },
      "priority": {
        "label": "Priority",
        "help": "Event with the higher priority will be executed earlier."
      }
    },
    "EntityState": {
      "_type": "Entity state",
      "created": {
        "label": "Date"
      },
      "operationState": {
        "label": "Result"
      },
      "resultCode": {
        "label": "Code"
      },
      "owner": {
        "label": "Entity identifier"
      },
      "ownerType": {
        "label": "Entity type"
      },
      "ownerId": {
        "label": "Entity"
      },
      "result": {
        "label": "Result"
      },
      "event": {
        "label": "Event",
        "title": "Event identifier"
      },
      "instanceId": {
        "label": "$t(entity.LongRunningTask.instanceId.label)",
        "help": "$t(entity.LongRunningTask.instanceId.help)"
      },
      "processorModule": {
        "label": "Module"
      },
      "processorId": {
        "label": "Processor"
      },
      "processorName": {
        "label": "Processor"
      },
      "processedOrder": {
        "label": "Processed order"
      }
    },
    "GenerateValue": {
      "dtoType": {
        "label": "Entity type",
        "placeholder": "Select type of entity",
        "help": "Generation is done for a specific type of entity. Based on the selected entities will be shown generators"
      },
      "generatorType": {
        "label": "Generator type",
        "placeholder": "Select type of generator"
      },
      "seq": {
        "label": "Order",
        "placeholder": "Setup order",
        "help": "Generators are handled in order from the smallest to the largest. If two generators generate values for the same attribute, the resulting value will be generated and used from the last generator."
      },
      "description": {
        "label": "Description"
      },
      "disabled": {
        "label": "Disabled",
        "help": "Disabled generators are ignored"
      },
      "regenerateValue": {
        "label": "Regenerate value",
        "help": "If will be checkbox checked, the value from user will be regenerated by the generator. If will be checkbox unchecked, the generator will not change value."
      },
      "unmodifiable": {
        "label": "System generator",
        "help": "System generator cannot be deleted. Some of its configurations are not editable."
      }
    },
    "CodeList": {
      "_type": "Code list",
      "code": {
        "label": "$t(entity.code.label)"
      },
      "name": {
        "label": "$t(entity.name.label)"
      },
      "description": {
        "label": "$t(entity.description.label)"
      }
    },
    "CodeListItem": {
      "_type": "HCode list value",
      "codeList": {
        "label": "$t(entity.CodeList._type)",
        "help": "Value belongs to code list."
      },
      "code": {
        "label": "$t(entity.code.label)",
        "help": "System value. Unigue in code list scope."
      },
      "name": {
        "label": "Name",
        "help": "User friendly code list name (value ). Visible in select boxes."
      },
      "description": {
        "label": "$t(entity.description.label)"
      },
      "level": {
        "label": "Level"
      }
    },
    "RoleFormAttribute": {
      "_type": "Role attribute",
      "role": {
        "label": "Role"
      },
      "formAttribute": {
        "label": "Attribute definition"
      },
      "defaultValue": {
        "label": "Default value"
      }
    },
    "Token": {
      "_type": "Token",
      "disabled": {
        "label": "Invalid",
        "title": "Invalid token",
        "help": "Invalid token. Token is disabled, when user is logged out for example."
      },
      "issuedAt": {
        "label": "Issued at",
        "title": "Token created date",
        "help": "Token created date."
      },
      "expiration": {
        "label": "Valid till",
        "title": "Token expiration",
        "help": "Token expiration."
      },
      "owner": {
        "label": "Owner",
        "title": "Token owner",
        "help": "Token owner. Token will grant the same authorities and permissions as token owner."
      },
      "tokenType": {
        "label": "Type",
        "title": "Token type",
        "help": "Token type."
      },
      "moduleId": {
        "label": "Module",
        "help": "Token was created by given module. Token can be created by custom authentication method (filter)."
      },
      "secretVerified": {
        "label": "Verified token",
        "help": "Token was verified, if two-factor authentication was enabled. Verified token is valid only and can be used. If two-factor authentication is not enabled, then token is verified automatically."
      },
      "token": {
        "label": "Token hash",
        "help": "Token hash. SHA256 algorithm is used."
      }
    }
  },
  "wf": {
    "approve-identity-change-permissions" : {
      "name": "Change of assigned roles for user '{{0}}'",
      "task": {
        "approveByHelpDesk": {
          "name": "Approval by 'Helpdesk'",
          "description":"Approving a change of assigned roles for '{{0}}' (Helpdesk)"
        },
        "returnedRequestFromHelpdesk": {
          "name": "The request was returned from 'Helpdesk'",
          "description":"Returned change-of-roles request for '{{0}}'"
        },
        "approveByManager": {
          "name": "Approval by manager",
          "description":"Approving a change of assigned roles by manager for '{{0}}'"
        },
        "returnedRequestFromManager": {
          "name": "The request was returned from manager",
          "description":"Returned change-of-roles request for '{{0}}'"
        },
        "approveByUserManager": {
          "name": "Approval by user manager",
          "description":"Approving a change of assigned roles by user manager for '{{0}}'"
        },
        "returnedRequestFromUserManager": {
          "name": "The request was returned from user manager",
          "description":"Returned change-of-roles request for '{{0}}'"
        },
        "approveIncompatibilities": {
          "name": "Approval of incompatible roles",
          "description":"Approval of incompatible roles for user '{{0}}'"
        },
        "approvedBySecurity": {
          "name": "Approval by security department",
          "description":"Approving a change of assigned roles by security department for '{{0}}'"
        }
      }
    },
    "change-role-without-approve" : {
      "name": "Change assignment of the role (add / remove / change) '{{0}}' for user '{{1}}'"
    },
    "approve-role-by-manager" : {
      "name": "Approval change of assignmented role '{{0}}' for user '{{1}}'",
      "task": {
        "approveAssignByManager": {
          "name": "Approval of assignment role by the manager",
          "description":"Approval of assignment role '{{0}}' by the manager for the user '{{1}}'"
        },
        "approveChangeByManager": {
          "name": "Approval of validity change of the role by the manager",
          "description":"Approval of validity change of the role '{{0}}' by the manager for the user '{{1}}'"
        }
      }
    },
    "approve-remove-role-by-manager" : {
      "name": "Approval remove of assignmented role '{{0}}' for user '{{1}}'",
      "task": {
        "approveByManager": {
          "name": "Approval remove of assignmented role by user's manager",
          "description":"Approval remove of assignmented role '{{0}}' by user's manager for the user '{{1}}'"
        }
      }
    },
    "approve-role-by-guarantee" : {
      "name": "Approval change of assignmented role '{{0}}' for user '{{1}}'",
      "name_automaticRole": "Approve change in automatic role assignment '{{0}}' by his guarantee",
      "task": {
        "approveAssign": {
          "name": "Approval the role assignment by the guarantee",
          "description":"Approval the role '{{0}}' assignment by the guarantee for user '{{1}}'"
        },
        "approveChange": {
          "name": "Approval of validity change of the role by the guarantee",
          "description":"Approval of validity change of role '{{0}}' by the guarantee for user '{{1}}'"
        },
        "approveAutomaticRole": {
          "name": "Approval create/change/remove of automatic role by the guarantee",
          "description":"Approval create/change/remove of automatic role '{{0}}' by the guarantee"
        }
      }
    },
    "approve-role-by-guarantee-security" : {
      "name": "Approval change of assignmented role '{{0}}' by the guarantee and security department for user '{{1}}'",
      "name_automaticRole": "Approve change in automatic role assignment '{{0}}' by his guarantee and security department",
      "task": {
        "approveAssignByGuarantee": {
          "name": "Approval the role assignment by the guarantee",
          "description":"Approval the role '{{0}}' assignment by the guarantee for user '{{1}}'"
        },
        "approveChangeByGuarantee": {
          "name": "Approval of validity change of the role by the guarantee",
          "description":"Approval of validity change of role '{{0}}' by the guarantee for user '{{1}}'"
        },
        "approveAssignBySecurity": {
          "name": "Approval the role assignment by security department",
          "description":"Approval the role '{{0}}' assignment by security department for user '{{1}}'"
        },
        "approveChangeBySecurity": {
          "name": "Approval of validity change of the role by security department",
          "description":"Approval of validity change of role '{{0}}' by security department for user '{{1}}'"
        },
        "approveAutomaticRole": {
          "name": "Approval create/change/remove of automatic role",
          "description":"Approval create/change/remove of automatic role '{{0}}'"
        },
        "approveAutomaticRoleBySecurity": {
          "name": "Approval create/change/remove of automatic role",
          "description":"Approval create/change/remove of automatic role '{{0}}'"
        }
      }
    },
    "request-idm-role" : {
      "name": "Request for change/create/remove role with name '{{0}}'",
      "task": {
        "approveAutomaticRole": {
          "name": "Approve role changes by guarantee",
          "description":"Request for change/create/remove role with name '{{0}}'"
        }
      }
    },
    "request-idm-role-composition" : {
      "name": "Approving request change of business role",
      "task": {
        "approveAddBusinessRole": {
          "name": "Approve adding the new business role",
          "description":"Approval of adding business role with name '{{0}}' as '{{1}}' to role '{{2}}'"
        },
        "approveRemoveBusinessRole": {
          "name": "Approve removing the business role",
          "description":"Approve removal of the business role ({{0}}) with name '{{1}}' from role '{{2}}'."
        }
      }
    },
    "COMMENT":"If you can not find a translation for a specific WF definition, then we'll try to locate the translation in global tasks (by task key only):",
    "task": {
      "approveByManager": {
        "name": "Approving by manager",
        "description":"Approving by manager"
      }
    },
    "decision" : {
      "approve": {
        "label" : "Accept",
        "tooltip": "Executes approval of the task.",
        "warning": "Do you want to approve the request?",
        "resultLabel": "Approved"
      },
      "disapprove": {
        "label" : "Reject",
        "tooltip": "Reject task.",
        "warning": "Do you want to reject the request?",
        "resultLabel": "Rejected"
      },
      "backToApplicant": {
        "label" : "Return to applicant",
        "tooltip": "Returns request to requester.",
        "warning": "Do you want to return the request?",
        "resultLabel": "Returned to requester."
      },
      "createRequest": {
        "label" : "Submit request",
        "tooltip": "Submit request.",
        "warning": "Do you want to submit the request?",
        "resultLabel": "Request submitted."
      },
      "cancelRequest": {
        "label" : "Delete request",
        "tooltip": "Delete this request.",
        "warning": "Do you want to delete the request?",
        "resultLabel": "Request canceled."
      },
      "repairedRequest": {
        "label" : "Request repaired",
        "tooltip": "Request was repaired by comments.",
        "warning": "Do you want return request to approve?",
        "resultLabel": "Request repaired."
      }
    },
    "formData" : {
      "applicantDescription": {
        "name" : "Requester's note",
        "tooltip": "Requester's note in submitted request",
        "placeholder": "Requester's note in submitted request"
      },
      "managerDescriptionForApplicant": {
        "name" : "Note for requester",
        "tooltip": "Note for requester in returned request",
        "placeholder": "Note for requester in returned request"
      },
      "managerDescription": {
        "name" : "Authorizer's note",
        "tooltip": "Note from authorizer.",
        "placeholder": "Note from authorizer."
      },
      "description": {
        "name" : "Note",
        "tooltip": "",
        "placeholder": ""
      },
      "roleName": {
        "name" : "Role name",
        "tooltip": "",
        "placeholder": ""
      },
      "validFrom": {
        "name" : "$t(entity.validFrom)",
        "tooltip": "",
        "placeholder": ""
      },
      "validTill": {
        "name" : "$t(entity.validTill)",
        "tooltip": "",
        "placeholder": ""
      },
      "validFromDateOld": {
        "name" : "$t(entity.validFrom) (old)",
        "tooltip": "",
        "placeholder": ""
      },
      "validTillDateOld": {
        "name" : "$t(entity.validTill) (old)",
        "tooltip": "",
        "placeholder": ""
      },
      "validFromDateNew": {
        "name" : "$t(entity.validFrom) (new)",
        "tooltip": "",
        "placeholder": ""
      },
      "validTillDateNew": {
        "name" : "$t(entity.validTill) (new)",
        "tooltip": "",
        "placeholder": ""
      },
      "history": {
        "name": "Previous tasks",
        "taskName": "Name",
        "completeDate": "Complete date",
        "assignee": "Task resolver",
        "message": "Note from resolver"
      },
      "taskCompleteMessage": {
        "name": "Note",
        "placeholder": "",
        "tooltip": ""
      }
    }
  },
  "eav": {
    "attributes": {
      "core-topic-report-generate-success": {
        "label": "Notication",
        "help": "Send notification to given topic (by notification configuration) after report is successfuly created. Notification is sent to report creator by default. If report is scheduled, recipient has to be configured in notification configuration (report creator is system)."
      }
    },
    "form-attribute-renderer": {
      "tree-node-select": {
        "attributes": {
          "tree-type": {
            "label": "Structure type",
            "placeholder": "All structure types or select ...",
            "help": "Select tree node from selected structure type only."
          }
        }
      }
    },
    "bulk-action": {
      "identity-disable-bulk-action": {
        "label": "Deactivate - (manually)",
        "title": "Deactivate user manually",
        "icon": "fa:user-slash"
      },
      "identity-enable-bulk-action": {
        "label": "Activate - (manually)",
        "title": "Activate user manually",
        "icon": "fa:check-square-o"
      },
      "identity-delete-bulk-action": {
        "label": "$t(action.delete.action) users",
        "help": "$t(action.delete.action) selected users.",
        "icon": "$t(action.delete.icon)"
      },
      "role-request-delete-bulk-action": {
        "label": "$t(action.delete.action) role requests",
        "help": "$t(action.delete.action) role requests.",
        "icon": "$t(action.delete.icon)"
      },
      "identity-add-role-bulk-action": {
        "label": "Roles assignment",
        "icon": "component:identity-role-add",
        "attributes": {
          "role": {
            "label": "Roles",
            "help": ""
          },
          "approve": {
            "label": "Approve",
            "help": "After check, the role assignment will be approved"
          },
          "maincontract": {
            "label": "Assign to main contract only",
            "help": "Assigning new roles will only be done on the main contract. Otherwise role will be assigned to all valid and future valid contracts."
          },
          "validfrom": {
            "label": "Valid from",
            "help": "If valid from is not filled, then will be filled from contract automatically."
          },
          "validtill": {
            "label": "Valid till",
            "help": "If valid from is not filled, then will be not set (assigned role will be removed by contact validity)."
          }
        }
      },
      "identity-remove-role-bulk-action": {
        "label": "Role removing",
        "icon": "component:identity-role-remove",
        "attributes": {
          "role": {
            "label": "Roles",
            "help": ""
          },
          "approve": {
            "label": "Approve",
            "help": "After check, the role remove will be approved"
          },
          "maincontract": {
            "label": "Remove only from the main contract",
            "help": "Removing role/s will only be done from the main contract."
          }
        }
      },
      "identity-add-contract-guarantee-bulk-action": {
        "label": "Add contract guarantee",
        "icon": "component:contract-guarantee-add",
        "attributes": {
          "new-guarantee": {
            "label": "Guarantees to add",
            "help": "Selected guarantees will be set as new contract guarantees"
          }
        }
      },
      "identity-remove-contract-guarantee-bulk-action": {
        "label": "Remove contract guarantee",
        "icon": "component:contract-guarantee-remove",
        "attributes": {
          "old-guarantee": {
            "label": "Guarantees to remove",
            "help": "Selected guarantees will be removed from contract guarantees"
          }
        }
      },
      "identity-change-contract-guarantee-bulk-action": {
        "label": "Replace contract guarantee",
        "icon": "component:contract-guarantee-change",
        "attributes": {
          "old-guarantee": {
            "label": "Original guarantee",
            "help": "Selected guarantee will be replaced with the new one"
          },
          "new-guarantee": {
            "label": "New guarantee",
            "help": "Selected guarantee will replace the original one"
          }
        }
      },
      "identity-change-contract-tree-node-and-validity-bulk-action": {
        "label": "Change contract validity and position",
        "icon": "component:contract",
        "attributes": {
          "tree-node": {
            "label": "Tree node",
            "placeholder": "-- without change --",
            "help": "The new set work position. If not selected no change happens."
          },
          "valid-from": {
            "label": "Valid from",
            "placeholder": "-- without change --",
            "help": "The new set start of contract validity. If not selected no change happens."
          },
          "valid-till": {
            "label": "Valid till",
            "placeholder": "-- without change --",
            "help": "The new set end of contract validity. If not selected no change happens."
          }
        }
      },
      "core-identity-change-user-type-bulk-action": {
        "label": "Change user type",
        "icon": "component:identity-projection",
        "attributes": {
          "user-type": {
            "label": "User type",
            "help": "New user type."
          }
        }
      },
      "identity-save-bulk-action": {
        "label": "Re-save identity",
        "help": "Action does the same thing as click on the save button on the user's detail page.",
        "icon": "fa:save"
      },
      "role-delete-bulk-action": {
        "label": "$t(action.delete.action) roles",
        "help": "$t(action.delete.action) selected roles.",
        "icon": "$t(action.delete.icon)",
        "attributes": {
          "force-delete": {
            "label": "Force delete",
            "help": "Delete role and all related assigned roles to users, automatic roles, business roles and other related records."
          }
        }
      },
      "role-export-bulk-action": {
        "icon": "export",
        "label": "Export role",
        "title": "Role",
        "help": "Creates an export batch containing selected roles. The resulting export will be saved in the <strong>Export/Import</strong> agenda.",
        "attributes": {
          "name": {
              "label": "Description of export",
            "help": ""
          }
        }
      },
      "configuration-export-bulk-action": {
        "icon": "export",
        "label": "Export configuration",
        "title": "Configurations",
        "help": "Creates an export batch containing selected configuration items. The resulting export will be saved in the <strong>Export/Import</strong> agenda.",
        "attributes": {
          "name": {
              "label": "Description of export",
            "help": ""
          }
        }
      },
      "form-definition-export-bulk-action": {
        "icon": "export",
        "label": "Export form definition",
        "title": "Form definition",
        "help": "Creates an export batch containing selected form definitions. The export result will be saved in the <strong>Export/Import</strong> agenda.",
        "attributes": {
          "name": {
              "label": "Description of export",
            "help": ""
          }
        }
      },
      "form-definition-delete-bulk-action": {
        "label": "$t(action.delete.action) form definitions",
        "help": "$t(action.delete.action) selected form definitions.",
        "icon": "$t(action.delete.icon)"
      },
      "script-definition-delete-bulk-action": {
        "label": "$t(action.delete.action) script definitions",
        "help": "$t(action.delete.action) selected script definitions.",
        "icon": "$t(action.delete.icon)"
      },
      "script-definition-backup-bulk-action": {
        "label": "$t(action.backup.action) script definitions",
        "help": "$t(action.backup.action) selected script definitions.",
        "icon": "$t(action.backup.icon)"
      },
      "script-definition-redeploy-bulk-action": {
        "label": "Recover from disk script definitions (redeploy)",
        "help": "$t(action.redeploy.action) selected script definitions.",
        "icon": "$t(action.redeploy.icon)"
      },
      "core-duplicate-script-bulk-action": {
        "label": "Duplicate script",
        "help": "Creates the new duplicate of the selected script.",
        "icon": "fa:clone"
      },
      "notification-template-delete-bulk-action": {
        "label": "$t(action.delete.action) notification templates",
        "help": "$t(action.delete.action) selected notification templates.",
        "icon": "$t(action.delete.icon)"
      },
      "notification-template-backup-bulk-action": {
        "label": "$t(action.backup.action) notification templates",
        "help": "$t(action.backup.action) selected notification templates.",
        "icon": "$t(action.backup.icon)"
      },
      "notification-template-redeploy-bulk-action": {
        "label": "Recover from disk notification templates (redeploy)",
        "help": "$t(action.redeploy.action) selected notification templates.",
        "icon": "$t(action.redeploy.icon)"
      },
      "configuration-delete-bulk-action": {
        "label": "$t(action.delete.action) configuration items",
        "help": "$t(action.delete.action) selected configuration items.",
        "icon": "$t(action.delete.icon)"
      },
      "core-configuration-switch-instance-bulk-action": {
        "label": "Change server for asynchronous processing",
        "help": "Change server (instance) for scheduled tasks, asynchronous long running tasks and asynchronous events.",
        "icon": "component:setting",
        "attributes": {
          "previous-instance-id": {
            "label": "Previous instance",
            "help": "Previous instance, which processed asynchronous tasks and events."
          },
          "new-instance-id": {
            "label": "New instance",
            "help": "New instance for asynchronous processing."
          }
        }
      },
      "core-entity-event-delete-bulk-action": {
        "label": "$t(action.delete.action) events",
        "help": "$t(action.delete.action) selected events.",
        "icon": "$t(action.delete.icon)"
      },
      "core-entity-state-delete-bulk-action": {
        "label": "$t(action.delete.action) states",
        "help": "$t(action.delete.action) selected states.",
        "icon": "$t(action.delete.icon)"
      },
      "core-code-list-delete-bulk-action": {
        "label": "$t(action.delete.action) code lists",
        "help": "$t(action.delete.action) selected code lists.",
        "icon": "$t(action.delete.icon)"
      },
      "core-code-list-item-delete-bulk-action": {
        "label": "$t(action.delete.action) code list items",
        "help": "Remove selected code list items.",
        "icon": "$t(action.delete.icon)"
      },
      "core-identity-role-by-identity-deduplication-bulk-action": {
        "label": "Role deduplication",
        "help": "Removes duplicate assigned roles. Removes only manually assigned roles, duplicates with business, automatic, or other manually assigned role.",
        "icon": "fa:clone",
        "attributes": {
          "checksubdefinition": {
            "label": "Check role attributes",
            "help": "Check role attributes and their values. The role will be removed if attributes except values is equals as another another role."
          },
          "approve": {
            "label": "Approve",
            "help": "After check, the role remove will be approved."
          }
        }
      },
      "core-duplicate-role-bulk-action": {
        "label": "Duplicate role",
        "help": "Action creates new (or updates) role with the same code on the selected environment. On the target role will be created (updated) automatic role definitions and business role compositions. ",
        "icon": "fa:clone",
        "attributes": {
          "environment": {
            "label": "Environment",
            "help": "Target environment. Role will be duplicated in the same environment by default (with the same name and base code with suffix)."
          },
          "include-automatic-role": {
            "label": "Duplicate automatic roles",
            "help": "Creates (or updates) configured automatic roles."
          },
          "include-role-composition": {
            "label": "Duplicate sub roles",
            "help": "Creates (or updates) sub roles by business role definition (recursively)."
          },
          "include-role-form-attribute": {
            "label": "Duplicate role attributes",
            "help": "Creates (or updates) configured role attributes."
          },
          "include-role-authorization-policy": {
            "label": "Duplicate permissions",
            "help": "Creates (or updates) configured authorization policies."
          }
        }
      },
      "core-identity-contract-delete-bulk-action": {
        "label": "$t(action.delete.action) contracted positions",
        "help": "$t(action.delete.action) selected contracted positions.",
        "icon": "$t(action.delete.icon)"
      },
      "core-form-value-delete-bulk-action": {
        "label": "$t(action.delete.action) values",
        "help": "$t(action.delete.action) selected values. Notify event will be published for value's owner (e.g. automatic roles or provisioning will be processed).",
        "icon": "$t(action.delete.icon)"
      },
      "core-long-running-task-delete-bulk-action": {
        "label": "$t(action.delete.action) tasks",
        "help": "$t(action.delete.action) selected tasks.",
        "icon": "$t(action.delete.icon)"
      },
      "core-long-running-task-run-bulk-action": {
        "label": "Run tasks",
        "help": "Run selected tasks. Newly created tasks will be executed only.",
        "icon": "play"
      },
      "core-long-running-task-cancel-bulk-action": {
        "label": "Cancel tasks",
        "help": "Cancel selected tasks. Newly created or running tasks will be canceled only.",
        "icon": "remove"
      },
      "core-form-projection-delete-bulk-action": {
        "label": "$t(action.delete.action) projections",
        "help": "$t(action.delete.action) selected projections. Users with deleted projection will be switched to default projection.",
        "icon": "$t(action.delete.icon)"
      },
      "core-delegation-definition-delete-bulk-action": {
        "label": "$t(action.delete.action) definitions of delegations",
        "help": "$t(action.delete.action) selected definitions.",
        "icon": "$t(action.delete.icon)"
      },
      "core-manual-wf-task-delegation-bulk-action": {
        "label": "Manual task delegation",
        "icon": "fa:dolly",
        "attributes": {
          "delegate": {
            "label": "Delegate",
            "help": "To whom should tasks be assigned."
          },
          "candidateorassigned": {
            "label": "Delegator",
            "help": "From whom tasks should be assigned."
          }
        }
      },
      "core-identity-evaluate-state-bulk-action": {
        "label": "Recalculate identity state",
        "help": "Recalculate identity state (according to its current contracts).",
        "icon": "fa:user-cog"
      },
      "core-authorization-policy-delete-bulk-action": {
        "label": "$t(action.delete.action) permissions",
        "help": "$t(action.delete.action) selected permissions.",
        "icon": "$t(action.delete.icon)"
      },
      "core-authorization-policy-disable-bulk-action": {
        "label": "Deactivate permissions",
        "help": "Deactivate selected permissions",
        "icon": "fa:ban"
      },
      "core-authorization-policy-enable-bulk-action": {
        "label": "Activate permissions",
        "help": "Activate selected permissions.",
        "icon": "fa:check-square-o"
      },
      "core-password-policy-delete-bulk-action": {
        "label": "$t(action.delete.action) password policies",
        "help": "$t(action.delete.action) selected password policies.",
        "icon": "$t(action.delete.icon)"
      },
      "core-form-attribute-delete-bulk-action": {
        "label": "$t(action.delete.action) attributes",
        "help": "$t(action.delete.action) selected attributes.",
        "icon": "$t(action.delete.icon)"
      },
      "core-token-delete-bulk-action": {
        "label": "$t(action.delete.action) tokens",
        "help": "$t(action.delete.action) selected tokens.",
        "icon": "$t(action.delete.icon)"
      },
      "core-token-disable-bulk-action": {
        "label": "Disable tokens",
        "help": "Disable selected tokens.",
        "icon": "fa:ban"
      }
    },
    "authorization-evaluator": {
      "identity-form-value-evaluator": {
        "help": "Permissions to identity form attribute values. By definition (main if not specified) and attrinute codes (all if not specified).",
        "attributes": {
          "form-definition": {
            "label": "Form definition",
            "help": "Select definition, which contains attributes. Main definition will be used as default.",
            "placeholder": "Main definition for identities or select ..."
          },
          "attributes": {
            "label": "Attributes",
            "help": "Add permission to attributes. All attributes from selected form definition will be used as default.",
            "placeholder": "All attributes or attribute codes (use comma as separator)"
          },
          "self-only": {
            "label": "Logged user only",
            "help": "Add permission to currently logged user only. Logged user doesn't get permissions to other users attributes."
          },
          "owner-update": {
            "label": "By permission to update user",
            "help": "Add permission to attributes of users, which can be updated by the logged user (for example, when logged user can update identity, then he can update attributes too)."
          },
          "owner-read": {
            "label": "By permission to read user",
            "help": "Add permission to attributes of users, which can be read by the logged user (for example, when logged user can read identity, then he can update attributes)."
          }
        }
      },
      "core-identity-contract-form-value-evaluator": {
        "help": "Permissions to contract form attribute values. By definition (main if not specified) and attrinute codes (all if not specified).",
        "attributes": {
          "form-definition": {
            "label": "Form definition",
            "help": "Select definition, which contains attributes. Main definition will be used as default.",
            "placeholder": "Main definition for identities or select ..."
          },
          "attributes": {
            "label": "Attributes",
            "help": "Add permission to attributes. All attributes from selected form definition will be used as default.",
            "placeholder": "All attributes or attribute codes (use comma as separator)"
          },
          "owner-update": {
            "label": "By permission to update contract",
            "help": "Add permission to attributes of users, which can be updated by the logged user (for example, when logged user can update contract, then he can update attributes too)."
          },
          "owner-read": {
            "label": "By permission to read contract",
            "help": "Add permission to attributes of contracts, which can be read by the logged user (for example, when logged user can read contract, then he can update attributes)."
          }
        }
      },
      "form-definition-uuid-evaluator": {
        "help": "Permissions for form definition.",
        "attributes": {
          "uuid": {
            "label": "Form definition",
            "help": "",
            "placeholder": "Select form definition ..."
          }
        }
      },
      "core-profile-by-identity-evaluator": {
        "help": "Permissions to identity profile (picture)",
        "attributes": {
          "identity-read": {
            "label": "By permission to read user",
            "help": "Add permission to profile of users, which can be read by the logged user (for example, when logged user can read identity, then he can update her profile)."
          }
        }
      },
      "core-identity-role-by-role-evaluator": {
        "help": "Permissions to assigned roles by role definition. If i can read role definition, then i can read all assigned roles.",
        "attributes": {
          "can-be-requested-only": {
            "label": "Can be requested only",
            "help": "Add permission for role requests only (can be requested). Usable, when assigned roles need to be copied from another user."
          }
        }
      },
      "core-codelist-item-by-code-evaluator": {
        "help": "Permissions to codelist items. By code list and item codes (all if not specified).",
        "attributes": {
          "codelist": {
            "label": "Code list",
            "help": "Select code list, which contains items.",
            "placeholder": "Select code list ..."
          },
          "item-codes": {
            "label": "Items",
            "help": "Add permission to code list items. All items from selected code list will be used as default.",
              "placeholder": "All items or items codes (use comma as separator)"
          }
        }
      },
      "core-identity-by-form-projection-evaluator": {
        "help": "Permissions to user by type. Add permisson by selected user type or by default type (user without type is specified).",
        "attributes": {
          "form-projection": {
            "label": "User type",
            "help": "Add permission to selected user type or to default type (user without type is specified).",
            "placeholder": "Default (empty) user type or select ..."
          }
        }
      },
      "core-identity-by-tree-node-evaluator": {
        "help": "Permissions for identtiy that have one or more relationships on a selected organizational structure.",
        "attributes": {
          "tree-node": {
            "label": "Organizational structure element",
            "help": "Select the element to which the selected rights will apply. The rights will also apply to all elements with a downward spread.",
            "placeholder": "Organizational structure element ..."
          }
        }
      },
      "core-contract-by-identity-evaluator": {
        "help": "Permissions to contracts by pemissions to user.",
        "attributes": {
          "include-permissions": {
            "label": "Use permissions",
            "help": "Select permission, which will be used from permissions to user.",
            "placeholder": "Same permissions as to user or select ..."
          }
        }
      },
      "core-role-by-role-catalogue-evaluator": {
        "help": "Permissions for roles that are in the selected catalog.",
        "attributes": {
          "role-catalogue": {
            "label": "catalogue",
            "help": "Select the catalogue that contains the roles to which will be apply given permissions. The rights will also apply to all roles with a downward spread.",
            "placeholder": "Catalogue ..."
          }
        }
      },
      "core-self-contract-evaluator": {
        "help": "Currently logged user - self contract permissions."
      }
    },
    "value-generator": {
      "core-identity-username-value-generator": {
        "label": "Standard username generator",
        "help": "The generator generates the user name based on the 'first name' and 'surname'. Generator deletes the diacritic, cuts first name and surname to a defined number of characters, and connects them with connection character.",
        "attributes": {
          "connectioncharacter": {
            "label": "Connection character",
            "help": "The character(s) to be used to connect the first name and surname. The value does not need to be filled in. In this case, the first name and surname will be connected without any coupling character."
          },
          "firstnamecharactercount": {
            "label": "Count of characters from the first name",
            "help": "The maximum count of characters to use from the first name."
          },
          "lastnamecharactercount": {
            "label": "Count of characters from the surname",
            "help": "The maximum count of characters to use from the surname."
          },
          "searchuniqueusername": {
            "label": "Verify unique username",
            "help": "The newly generated username will be searched. If such username already exists, numeric suffix will be added. Suffix may be incremented."
          },
          "firstnamefirst": {
            "label": "As first value use first name",
            "help": "When generating, the first name of the user will be added first. If you uncheck this, the order will be the opposite."
          },
          "replacewhitespacescharacter": {
            "label": "Character/s for filling white spaces",
            "help": "Character/s will be used to replace white spaces, even outside the username. If you leave this blank, all spaces will be removed."
          }
        }
      },
      "core-identity-anonymous-username-value-generator": {
        "label": "Anonymous username generator",
        "help": "Generator creates an anonymous username consisting of the prefix part which is common for all generated usernames and the random numeric part with defined length.",
        "attributes": {
          "usernameprefix": {
            "label": "Common prefix",
            "help": "All created usernames start with this common prefix. The value may be empty. If so, the created username will consist of the generated numeric part only."
          },
          "generatednumberlength": {
            "label": "Number of characters of the numeric part",
            "help": "Generated numeric part will be always of this length. Allowed values are in ranger from 1 to 9."
          }
        }
      },
      "core-identity-email-value-generator": {
        "label": "Standard email generator",
        "help": "The generator generates the email adress based on the username. Adds a defined suffix to the username. Beware, the result value must match the correct email address format.",
        "attributes": {
          "emailsuffix": {
            "label": "Email suffix",
            "help": "The Suffix will be added to the username and together they must create an email address."
          },
          "connectioncharacter": {
            "label": "Connection character",
            "help": "The character(s) to be used to connect the first name and surname. The value does not need to be filled in. In this case, the first name and surname will be connected without any coupling character."
          },
          "firstnamecharactercount": {
            "label": "Count of characters from the first name",
            "help": "The maximum count of characters to use from the first name."
          },
          "lastnamecharactercount": {
            "label": "Count of characters from the surname",
            "help": "The maximum count of characters to use from the surname."
          },
          "generatefromusername": {
            "label": "Generate based on username",
            "help": "Email will be based on existing username. The username must exist at the moment of generation."
          },
          "firstnamefirst": {
            "label": "As first value use first name",
            "help": "When generating, the first name of the user will be added first. If you uncheck this, the order will be the opposite."
          },
          "replacewhitespacescharacter": {
            "label": "Character/s for filling white spaces",
            "help": "Character/s will be used to replace white spaces, outside the username and email suffix. If you leave this blank, all spaces will be removed."
          },
          "unique-email": {
            "label": "Verify unique email adress",
            "help": "The newly generated email adress will be searched. If such email adress already exists, numeric suffix will be added. Suffix may be incremented."
          }
        }
      },
      "core-identity-script-value-generator": {
        "label": "Scripted Generator",
        "help": "The generator executes the defined script. At the script input are these attributes 'entity' and 'valueGenerator'. Beware functionality 'value regenerate' must implement the script itself. The script must be from the system category.",
        "attributes": {
          "scriptcode": {
            "label": "Script code",
            "help": "Script code to run."
          }
        }
      },
      "core-identity-form-default-value-generator": {
        "label": "Addition default values for the forms with next informations",
        "help": "Generator add default values for all attributes.",
        "attributes": {
          "formdefinitionuuid": {
            "label": "Form",
            "help": "Form must be for given entity type (IdmIdentity). If you leave form empty, the values will be added to all form definition."
          },
          "regexmultiplevalues": {
            "label": "Separator",
            "help": "If the attribute is multi-valued and the default value contains multiple values, write character(s) that seperate values. If left blank, a default character will be used ','."
          }
        }
      },
      "core-concept-role-request-form-default-value-generator": {
        "label": "Addition default values for the role parameters in role request",
        "help": "Generator add default values for role parameters attributes. For the generator, can not be set feature 'Regenerate value'.",
        "attributes": {
          "regexmultiplevalues": {
            "label": "Separator",
            "help": "If the attribute is multi-valued and the default value contains multiple values, write character(s) that seperate values. If left blank, a default character will be used ','."
          }
        }
      },
      "core-identity-role-form-default-value-generator": {
        "label": "Addition default values for the assigned role extended attributes",
        "help": "Generator add default values for assigned role extended attributes. For the generator, can not be set feature 'Regenerate value'.",
        "attributes": {
          "regexmultiplevalues": {
            "label": "Separator",
            "help": "If the attribute is multi-valued and the default value contains multiple values, write character(s) that seperate values. If left blank, a default character will be used ','."
          }
        }
      },
      "core-tree-node-code-value-generator": {
        "label": "Generating standard code using element name",
        "help": "Generates the element code. The element code will be generated from a name that will be converted to small characters, all white spaces and diacritics will be removed."
      }
    },
    "long-running-task": {
      "core-test-long-running-task": {
        "label": "Test task",
        "help": "Counts to given count, waits 300ms for every iteration.",
        "attributes": {
          "count": {
            "label": "Count",
            "help": "Counts to given count, waits 300ms for every iteration."
          }
        }
      },
      "core-remove-old-logs-long-running-task": {
        "label": "Delete logging events",
        "help": "Delete logging events (persisted in database by logger configuration) older than given number of days.",
        "icon": "$t(action.delete.icon)",
        "attributes": {
          "removerecordolderthan": {
            "label": "Number of days",
            "help": "Delete logging events older than given number of days."
          }
        }
      },
      "core-delete-executed-event-long-running-task": {
        "label": "Delete executed entity events",
        "help": "Delete sucessfully executed entity events (in the state 'EXECUTED') older than given number of days.",
        "icon": "$t(action.delete.icon)",
        "attributes": {
          "numberofdays": {
            "label": "Number of days",
            "help": "Delete events older than given number of days."
          }
        }
      },
      "core-delete-long-running-task": {
        "label": "Delete long running tasks",
        "help": "Delete long running tasks older than given number of days.",
        "icon": "$t(action.delete.icon)",
        "attributes": {
          "numberofdays": {
            "label": "Number of days",
            "help": "Delete long running tasks older than given number of days."
          },
          "operationstate": {
            "label": "Operation state",
            "placeholder": "All states or ...",
            "help": "Delete long running tasks in given state only."
          }
        }
      },
      "core-delete-notification-long-running-task": {
        "label": "Delete notifications",
        "help": "Delete notifications older than given number of days.",
        "icon": "$t(action.delete.icon)",
        "attributes": {
          "numberofdays": {
            "label": "Number of days",
            "help": "Delete notifications older than given number of days."
          },
          "sentonly": {
            "label": "Sent only",
            "help": "Delete sent notifications only. All notifications older than given number of days will be deleted otherwise."
          }
        }
      },
      "core-delete-workflow-historic-instance-long-running-task": {
        "label": "Delete historic workflow processes",
        "help": "Delete historic workflow processes older than given number of days and with the given workflow definition.",
        "icon": "$t(action.delete.icon)",
        "attributes": {
          "numberofdays": {
            "label": "Number of days",
            "help": "Delete historic workflow processes older than given number of days."
          },
          "processdefinitionkey": {
            "label": "Workflow definition",
            "help": "Delete historic workflow processes with this definition only."
          }
        }
      },
      "core-process-automatic-role-tree-long-running-task": {
        "label": "Recalculate automatic role by tree structure for contracts and positions",
        "help": "Recalculate roles for identities with contract or other position match selected automatic role by tree structure. Can be executed repetitively to assign role to unprocessed identities, after process was stopped or interrupted (e.g. by server restart).",
        "icon": "component:automatic-role",
        "attributes": {
          "roletreenode": {
            "label": "Automatic role",
            "help": "Automatic role by tree structure."
          }
        }
      },
      "core-process-all-automatic-role-attribute-long-running-task": {
        "label": "Recalculate all automatic roles by attribute",
        "help": "Recalculate all automatic roles by attribute. Creates new request with concepts.",
        "icon": "component:automatic-role"
      },
      "core-process-all-automatic-role-tree-long-running-task": {
        "label": "Recalculate all automatic roles by tree structure for contracts and positions",
        "help": "Recalculate all roles for identities with contract or other position assigned by automatic role by tree structure. Can be executed repetitively to assign role to unprocessed identities, after process was stopped or interrupted (e.g. by server restart).",
        "icon": "component:automatic-role"
      },
      "core-process-automatic-role-attribute-long-running-task": {
        "label": "Recalculate automatic role by attribute",
        "help": "Recalculate roles for identities for selected automatic role by attribute.",
        "icon": "component:automatic-role",
        "attributes": {
          "roletreenode": {
            "label": "Automatic role",
            "help": "Automatic role by attribute."
          }
        }
      },
      "core-process-skipped-automatic-role-by-tree-long-running-task": {
        "label": "Recalculate skipped automatic role by tree structure",
        "help": "Recalculate automatic roles by tree structure, which were not processed (skipped) after tree structure was changed (e.g. from synchronization).",
        "icon": "component:automatic-role"
      },
      "core-process-skipped-automatic-role-by-tree-for-contract-long-running-task": {
        "label": "Recalculate skipped automatic role by tree structure for contracts and other positions",
        "help": "Recalculate automatic roles by tree structure for contracts and other positions, which were not processed (skipped) after work position was changed (e.g. from synchronization).",
        "icon": "component:automatic-role"
      },
      "core-remove-automatic-role-long-running-task": {
        "label": "Remove automatic role",
        "help": "Remove automatic role - removes all roles assigned by selected automatic role definition. $t(error.AUTOMATIC_ROLE_TASK_INVALID.message)",
        "icon": "component:automatic-role",
        "attributes": {
          "automaticroletree": {
            "label": "Automatic role by tree structure",
            "help": "Automatic role by tree structure."
          },
          "automaticroleattribute": {
            "label": "Or: Automatic role by attribute",
            "help": "Automatic role by attribute."
          }
        }
      },
      "core-password-expiration-warning-long-running-task": {
        "label": "Sends warning notification before password expires",
        "help": "Sends warning notification before password expires.",
        "attributes": {
          "days-before": {
            "label": "Days before",
            "help": "Number of days before password expires."
          }
        }
      },
      "core-password-expired-long-running-task": {
        "label": "Password expired notification and event publishing",
        "help": "Send notification for user after password expired and publish PASSWORD_EXPIRED event."
      },
      "core-identity-role-expiration-long-running-task": {
        "label": "Assigned roles - expiration",
        "help": "Task removes expired assigned roles from users.",
        "icon": "$t(action.delete.icon)"
      },
      "core-identity-contract-expiration-long-running-task": {
        "label": "Contracts expiration",
        "help": "Task removes expired assigned roles from users, which are assigned to expired contract.",
        "icon": "$t(action.delete.icon)"
      },
      "core-hr-contract-exclusion-long-running-task": {
        "label": "HR process - contract exclusion",
        "help": "Task proceses excluded contracts. It is started for contracts that are both valid (meant validFrom and validTill) and excluded.",
        "icon": "component:scheduled-task"
      },
      "core-hr-enable-contract-long-running-task": {
        "label": "HR process - enable contract",
        "help": "Task processes enabled contracts. It is started for contracts that are both valid (meant validFrom and validTill) and enabled.",
        "icon": "component:scheduled-task"
      },
      "core-hr-end-contract-long-running-task": {
        "label": "HR process - end of contract",
        "help": "Task processes ended contracts. It is started for contracts that are not valid (meant validFrom and validTill).",
        "icon": "component:scheduled-task"
      },
      "core-add-new-role-composition-long-running-task": {
        "label": "Recalculate business role",
        "help": "Task recalculates roles assigned to users according to the business role definition.",
        "icon": "component:scheduled-task",
        "attributes": {
          "role-composition-id": {
            "label": "Business role",
            "help": "Added business role UUID identifier."
          }
        }
      },
      "core-clear-dirty-state-contract-slice-long-running-task": {
        "label": "Process contract slices marked as invalid (dirty flag).",
        "help": "During synchronization the dirty flag is set for all processed slices. This task removes that flag.",
        "icon": "component:scheduled-task"
      },
      "core-execute-script-long-running-task": {
        "label": "Execute script",
        "help": "Task executing script code.",
        "icon": "component:scheduled-task",
        "attributes": {
          "scriptcode": {
            "label": "Script code",
            "help": "Script to execute. Script code is required."
          }
        }
      },
      "core-change-confidential-storage-key-long-running-task": {
        "label": "Change confidential storage key",
        "help": "Change the key of all encrypted values in confidential storage for a new one. This task has to be executed, when confidential storage key in application configuration was changed.",
        "icon": "component:scheduled-task",
        "attributes": {
          "oldcryptkey": {
            "label": "Old key",
            "help": "Old key used for confidential storage. Current values will be read by this key and stored using the new key."
          }
        }
      },
      "core-generate-confidential-storage-initialization-vectors-long-running-task": {
        "label": "Generate initialization vectors for the confidential storage",
        "help": "Generate initialization vectors for the values saved in the confidential storage. This task can be used for using stronger security after upgrading the application from versions older than 10.6.",
        "icon": "component:scheduled-task"
      },
      "core-identity-role-valid-request-long-running-task": {
        "label": "Assigned roles - start of validity",
        "help": "Creates accounts for new assigned valid roles in target system.",
        "icon": "component:scheduled-task"
      },
      "core-model-mapper-checker-long-running-task": {
        "label": "Model mapper checker",
        "help": "Checks model mapper whether it is properly initialized to prevent from dto mapping exceptions.",
        "icon": "component:scheduled-task"
      },
      "core-notify-identity-long-running-task": {
        "label": "Publish notify event for identities",
        "help": "Publish notify event for identities.",
        "icon": "component:scheduled-task"
      },
      "core-rebuild-role-catalogue-index-long-running-task": {
        "label": "Rebuild role catalogue index",
        "help": "Rebuild role catalogue forest index.",
        "icon": "component:scheduled-task"
      },
      "core-rebuild-tree-node-index-long-running-task": {
        "label": "Rebuild tree node index",
        "help": "Rebuild tree node forest index.",
        "icon": "component:scheduled-task",
        "attributes": {
          "tree-type-code": {
            "label": "Tree type",
            "help": "Forest index will be rebuild for selected tree type."
          }
        }
      },
      "core-remove-role-composition-long-running-task": {
        "label": "Delete business role",
        "help": "Task deletes business role and all sub-roles assigned to identities defined by this composition.",
        "icon": "$t(action.delete.icon)",
        "attributes": {
          "role-composition-id": {
            "label": "Business role",
            "help": "Deleted business role UUID identifier."
          }
        }
      },
      "core-select-current-contract-slice-long-running-task": {
        "label": "Recalculate currently used contract time slices",
        "help": "Task finds all contract time slices which are to be set as current. These slices are written through to the related contract.",
        "icon": "component:scheduled-task"
      }
    },
    "form-projection": {
      "identity-externe": {
        "label": "Externe user",
        "help": "Create externe user",
        "icon": "fa:walking",
        "level": "primary"
      },
      "identity-internal": {
        "label": "Internal employee",
        "help": "Create internal user",
        "icon": "fa:user",
        "level": "success"
      }
    },
    "form-projection-route": {
      "form-identity": {
        "help": "Default product projection (form). Not configurable product projection - redirect to default user detail only."
      },
      "form-identity-projection": {
        "help": "Configurable product projection.",
        "attributes": {
          "prime-contract": {
            "label": "Show prime contract",
            "help": "Show (and update) prime user contract only."
          },
          "all-contracts": {
            "label": "Show all user contracts",
            "help": "Show (and update) all user contracts. Code list <strong>contract-position</strong> s required - available contract types are controlled by organization types."
          },
          "other-position": {
            "label": "Show other contract position",
            "help": "Show (and update) one other contract position."
          },
          "assigned-roles": {
            "label": "Show assigned roles",
            "help": "Add assigned roles for newly created user and show assigned roles updated user."
          },
          "load-assigned-roles": {
            "label": "Load assigned roles into projection",
            "help": "Load all assigned roles - will be available in projection directly. Enable this feature, if projection supports to assign role directly without role requests. Is not supported in product provided projection and could be disabled."
          },
          "set-contract-guarantee": {
            "label": "Set direct guarantee for new contract",
            "help": "Set currently logged user as direct guarantee for newly created contract."
          }
        }
      }
    }
  },
  "error": {
    "AUTH_FAILED": {
      "title": "Login failed",
      "message": "Invalid login or password."
    },
    "AUTH_BLOCKED": {
      "title": "Login is blocked",
      "message": "Login for user [{{username}}] is blocked due [{{date}}]. Remaining seconds to unblock: [{{seconds}}]."
    },
    "AUTHORITIES_CHANGED": {
      "title": "Your application permissions have been modified",
      "message": "Your application permissions have been modified, please log-in again."
    },
    "FORBIDDEN": {
      "title": "Insufficient permissions",
      "message": "You do not have sufficient permissions for selected action."
    },
    "FORBIDDEN_ENTITY": {
      "title": "Insufficient permissions",
      "message": "You do not have insufficient permission [{{permission}}] for selected record [{{entity}}] [type: {{type}}]."
    },
    "FORBIDDEN_CODEABLE_ENTITY": {
      "title": "Insufficient permissions",
      "message": "You do not have insufficient permission [{{permission}}] for selected record [{{code}}] [typ: {{type}}]."
    },
    "PASSWORD_CHANGE_NO_SYSTEM": {
      "title": "Password change failed",
      "message": "Please, select at least one system, where password will be changed."
    },
    "PASSWORD_CHANGE_CURRENT_FAILED_IDM": {
      "title": "Password change failed",
      "message": "Invalid login or original password."
    },
    "LOG_IN": {
      "title": "Session timeout",
      "message": "Please log-in again."
    },
    "XSRF": {
      "title": "Session timeout",
      "message": "Your login token timed out. Please log-in again."
    },
    "MUST_CHANGE_IDM_PASSWORD": {
      "title": "Password change required",
      "message": "It is required to change your password for CzechIdM."
    },
    "PASSWORD_CHANGE_FAILED": {
      "title": "Password change wasn't completed",
      "message": "{{0}}"
    },
    "PASSWORD_CHANGE_DISABLED": {
      "title": "Password change wasn't completed",
      "message": "Password change is disabled."
    },
    "PASSWORD_CHANGE_ALL_ONLY": {
      "title": "Password change wasn't completed",
      "message": "Password change is possible for all accounts together only."
    },
    "PASSWORD_DOES_NOT_MEET_POLICY": {
      "title": "New password doesn't meet password policy",
      "message": "{{0}}"
    },
    "PASSWORD_CANNOT_CHANGE": {
      "title": "Password wasn't changed",
      "message": "Try it again after {{date}}."
    },
    "PASSWORD_POLICY_MAX_LENGTH_LOWER": {
      "title": "Password policy wasn't saved",
      "message": "Maximum length must be greater than minimum length."
    },
    "PASSWORD_POLICY_ALL_MIN_REQUEST_ARE_HIGHER": {
      "title": "Password policy wasn't saved",
      "message": "Count of all minimum lengths is bigger than maximum password length."
    },
    "PASSWORD_POLICY_MAX_AGE_LOWER": {
      "title": "Password policy wasn't saved",
      "message": "Maximum period for password change cannot be shorter than minimum period."
    },
    "PASSWORD_POLICY_DEFAULT_TYPE": {
      "title": "Password policy wasn't saved",
      "message": "Default password policy already exists."
    },
    "PASSWORD_POLICY_DEFAULT_TYPE_NOT_EXIST": {
      "title": "Password policy wasn't saved",
      "message": "Default password policy doesn't exists."
    },
    "PASSWORD_POLICY_BAD_TYPE": {
      "title": "Password policy wasn't saved",
      "message": "Policy has incorrect type. Use validating policies for validation and generating policies for generating."
    },
    "PASSWORD_POLICY_NEGATIVE_VALUE": {
      "title": "Password values can not have negative values",
      "message": "Attribute [{{attribute}}] is negative."
    },
    "PASSWORD_POLICY_VALIDATION": {
      "title": "Password policy wasn't saved",
      "message": "Problem with validation of password policy."
    },
    "PASSWORD_POLICY_MAX_RULE": {
      "title": "Exceeded the number of rules",
      "message": "Minimum number of additional rules for policy must be same or lower than count of required rules."
    },
    "TASK_SAME_DELEGATE_AS_CURRENT_IDENTITY": {
      "title": "Saving of delegation failed",
      "message": "You cannot set delegation on yourself [user: {{identity}}]."
    },
    "ENDPOINT_NOT_FOUND": {
      "title": "Endpoint not found",
      "message": "Application points out to non-existent path [{{path}}]."
    },
    "BAD_REQUEST": {
      "title": "Bad request"
    },
    "BAD_VALUE": {
      "title": "Bad value"
    },
    "BAD_UUID": {
      "title": "Unexpected identifier",
      "message": "Identifier [{{uuid}}] is not valid. Expecting uuid."
    },
    "ROLE_CATALOGUE_BAD_PARENT": {
      "title": "Superior folder cannot be set.",
      "message": "Invalid superior folder. Please, select another."
    },
    "IDMROLE_NAME_DUPLICATE": {
      "title": "Role already exists",
      "message": "Role with this name already exists"
    },
    "CONFLICT": {
      "title": "Record is on collision with another unique record",
      "message": ""
    },
    "NAME_CONFLICT": {
      "title": "Conflict with name",
      "message": "Record with given name already exists."
    },
    "CODE_CONFLICT": {
      "title": "Conflict with code",
      "message": "Record with given code already exists."
    },
    "ENTITY_NOT_FOUND": {
      "title": "Not found",
      "message": "Entity not found."
    },
    "IDENTITY_NOT_FOUND": {
      "title": "Not found",
      "message": "Identity [{{identity}}] does not exist."
    },
    "NOT_FOUND": {
      "title": "Not found",
      "message": "Record [{{entity}}] not found."
    },
    "MODULE_NOT_DISABLEABLE": {
      "title": "Module [{{module}}] cannot be disabled",
      "message": "Module functions are essential for application."
    },
    "MODULE_DISABLED": {
      "title": "The module is deactivated",
      "message": "Module [{{module}}] is deactivated or isn't installed."
    },
    "CONFIGURATION_DISABLED": {
      "title": "Function is deactivated",
      "message": "Application function directed by configuration item [{{property}}] is deactivated."
    },
    "CONFIGURATION_SWITCH_INSTANCE_NOT_CHANGED": {
      "title": "Instance not changed",
      "message": "Previous instance is the same as newly used for asynchronous processing [{{instanceId}}]. Instance will not be changed."
    },
    "CONFIGURATION_SWITCH_INSTANCE_SUCCESS": {
      "title": "Instance changed",
      "message": "Instance for asynchronous processing changed from [{{previousInstanceId}}] to [{{newInstanceId}}]. Updated [{{scheduledTaskCount}}] scheduled tasks, [{{longRunningTaskcount}}] created long runnung tasks and [{{eventCount}}] created events."
    },
    "CONFIGURATION_SWITCH_INSTANCE_MORE_PREVIOUS_FOUND": {
      "title": "More instances found",
      "message": "Found more previously used instances for asynchronous processing [{{previousInstanceIds}}]."
    },
    "TREE_TYPE_DELETE_FAILED_HAS_CHILDREN": {
      "title": "Structure cannot be removed",
      "message": "Structure type [{{treeType}}] has sub elements. Remove all sub elements first."
    },
    "TREE_TYPE_DELETE_FAILED_HAS_CONTRACTS": {
      "title": "Structure cannot be removed",
      "message": "Structure type [{{treeType}}] is used in contracted positions. Edit all used contracted positions before removing."
    },
    "TREE_NODE_DELETE_FAILED_HAS_CHILDREN": {
      "title": "Structure element cannot be removed",
      "message": "Structure element [{{treeNode}}] has sub elements. Remove all sub elements first."
    },
    "TREE_NODE_DELETE_FAILED_HAS_CONTRACTS": {
      "title": "Structure element cannot be removed",
      "message": "Structure element [{{treeNode}}] is used in contracted positions. Edit all used contracted positions before removing."
    },
    "TREE_NODE_DELETE_FAILED_HAS_CONTRACT_POSITIONS": {
      "title": "Structure element cannot be removed",
      "message": "Structure element [{{treeNode}}] is used in other contracted positions. Edit all used other contracted positions before removing."
    },
    "TREE_NODE_DELETE_FAILED_HAS_CONTRACT_SLICES": {
      "title": "Structure element cannot be removed",
      "message": "Structure element [{{treeNode}}] is used in contract slice positions. Edit all used contract slice positions before removing."
    },
    "TREE_NODE_BAD_TYPE": {
      "title": "Wrong element type",
      "message": "Please select different element type."
    },
    "TREE_NODE_BAD_PARENT": {
      "title": "Superior element cannot be set",
      "message": "Invalid superior element, please select another."
    },
    "TREE_NODE_BAD_NICE_NAME" : {
      "title": "Duplicate name for user",
      "message": "This level already contains this tree node name for user: [{{name}}]."
    },
    "GROOVY_SCRIPT_VALIDATION": {
      "title": "Groovy script contains compile errors",
      "message": "Groovy script contains compile errors"
    },
    "GROOVY_SCRIPT_SYNTAX_VALIDATION": {
      "title": "Groovy script contains syntax errors",
      "message": "Error message: {{message}} at line {{line}}."
    },
    "GROOVY_SCRIPT_SECURITY_VALIDATION": {
      "title": "Groovy script did not past safety check!",
      "message": "Reason: {{message}}"
    },
    "ROLE_CATALOGUE_DELETE_FAILED_HAS_CHILDREN": {
      "title": "Role catalog cannot be removed",
      "message": "Role catalog [{{roleCatalogue}}] contains child catalog. Remove all child catalogs first."
    },
    "ROLE_CATALOGUE_BAD_NICE_NAME" : {
      "title": "Duplicate name for user",
      "message": "This level already contains this catalog name for user: [{{name}}]."
    },
    "AUDIT_REVISION_NOT_SAME": {
      "title": "Revisions aren't comparable",
      "message": "Revisions must be the same type and from the same entity."
    },
    "AUDIT_ENTITY_CLASS_NOT_FOUND": {
      "title": "Class not found",
      "message": "Class [{{class}}] not found."
    },
    "AUDIT_ENTITY_CLASS_IS_NOT_FILLED": {
      "title": "Class not filled",
      "message": "Class for searching not filled."
    },
    "BAD_FILTER": {
      "title": "Filter isn't valid",
      "message": "Please check filled values."
    },
    "LONG_RUNNING_TASK_FAILED": {
      "title": "Task run failed",
      "message": "Task run [{{taskType}}] on instance [{{instanceId}}] failed."
    },
    "LONG_RUNNING_TASK_ITEM_FAILED": {
      "title": "Processing task item failed",
      "message": "Processing task item for candidate [{{referencedEntityId}}] ended with exception."
    },
    "SCHEDULER_INVALID_CRON_EXPRESSION": {
      "title": "Invalid cron expression",
      "message": "Setted cron expression [{{cron}}] is invalid."
    },
    "LONG_RUNNING_TASK_INTERRUPT": {
      "title": "Task run was canceled",
      "message": "Task run [{{taskType}}] on instance [{{instanceId}}] was interrupted by end of thread."
    },
    "LONG_RUNNING_TASK_CANCELED_BY_RESTART": {
      "title": "Task run was canceled",
      "message": "Task run [{{taskType}}] on instance [{{instanceId}}] was interrupted - instance was canceled during processing."
    },
    "LONG_RUNNING_TASK_NOT_RUNNING": {
      "title": "The task is already running",
      "message": "Task on instance [{{instanceId}}] already finished."
    },
    "LONG_RUNNING_TASK_INIT_FAILED": {
      "title": "Task has invalid configuration",
      "message": "Task [{{taskType}}] has invalid configuration."
    },
    "LONG_RUNNING_TASK_IS_PROCESSED": {
      "title": "Task is already processed",
      "message": "Task [{{taskId}}] is already processed - can not be started twice."
    },
    "LONG_RUNNING_TASK_IS_RUNNING": {
      "title": "Task is already running",
      "message": "Task [{{taskId}}] is already running - can not be started twice."
    },
    "LONG_RUNNING_TASK_ACCEPTED": {
      "title": "Concurrent task is already running",
      "message": "Task will be started asynchronously after concurrent task ends."
    },
    "LONG_RUNNING_TASK_DELETE_FAILED_IS_RUNNING": {
      "title": "Task is already running",
      "message": "Task is already running - can not be deleted. Wait for task completion or cancel task."
    },
    "LONG_RUNNING_TASK_NOT_RECOVERABLE": {
      "title": "Task cannot be executed",
      "message": "Task [{{taskType}}] cannot be executed again. Task does not support this feature."
    },
    "FOREST_INDEX_DISABLED": {
      "title": "Index is inactive",
      "message": "Tree structure indexing is inactive. Enable configuration property {{property}}."
    },
    "FOREST_INDEX_RUNNING": {
      "title": "Reindex already running",
      "message": "Reindex for tree structure {{type}} already running."
    },
    "NOTIFICATION_SYSTEM_TEMPLATE_DELETE_FAILED": {
      "title": "System template cant be deleted",
      "message": "[{{template}}] is system template, it can't be deleted."
    },
    "NOTIFICATION_TOPIC_AND_LEVEL_EXISTS": {
      "title": "Configuration can not be saved",
      "message": "Topic [{{topic}}] and null level exists!."
    },
    "NOTIFICATION_CONFIGURATION_RECIPIENT_NOT_FOUND": {
      "title": "Configuration can not be saved",
      "message": "Recipients are required for redirected notifications with topic [{{topic}}]."
    },
    "NOTIFICATION_TEMPLATE_DELETE_FAILED_USED_CONFIGURATION": {
      "title": "Template cannot be deleted.",
      "message": "Notification template [{{template}}] has to be removed from [{{usage}}] notification configuration(s) first."
    },
    "NOTIFICATION_TEMPLATE_DELETE_FAILED_USED_NOTIFICATION": {
      "title": "Template cannot be deleted.",
      "message": "Notification template [{{template}}] has to be removed from [{{usage}}] notification(s) first."
    },
    "FORM_DEFINITION_DELETE_FAILED_SYSTEM_DEFINITION": {
      "title": "Form definition can not be deleted",
      "message": "Definition [{{name}}] can't be deleted, because it is flagged as system."
    },
    "FORM_ATTRIBUTE_DELETE_FAILED_SYSTEM_ATTRIBUTE": {
      "title": "Attribute definition can not be deleted",
      "message": "Attribute [{{name}}] it can't be deleted, because is flagged as system."
    },
    "FORM_DEFINITION_DELETE_FAILED_MAIN_FORM": {
      "title": "Form definition can not be deleted",
      "message": "Definition [{{code}}] can't be deleted, because it is flagged as main. Flag another definition as main before its deletion."
    },
    "FORM_ATTRIBUTE_DELETE_FAILED_HAS_VALUES": {
      "title": "Form attribute can not be deleted",
      "message": "Form attribute cannot be deleted - some form values already using this attribute."
    },
    "FORM_ATTRIBUTE_CHANGE_PERSISTENT_TYPE_FAILED_HAS_VALUES": {
      "title": "Form attribute can not be changed",
      "message": "Type of the form attribute [{{attributeCode}}] cannot be changed - some form values already using this attribute."
    },
    "FORM_ATTRIBUTE_CHANGE_CONFIDENTIAL_FAILED_HAS_VALUES": {
      "title": "Form attribute can not be changed",
      "message": "Confidential flag of the form attribute [{{attributeCode}}] cannot be changed - some form values already using this attribute."
    },
    "FORM_INVALID": {
      "title": "Form is not valid.",
      "message": "Filled form contains invalid values."
    },
    "FORM_VALIDATION_NOT_SUPPORTED": {
      "title": "Validation is not supported",
      "message": "Form validation type [{{validationType}}] is not supported for persistent type [{{persistentType}}] for attribute [{{attributeCode}}]."
    },
    "FORM_ATTRIBUTE_INVALID_REGEX": {
      "title": "Regular expression is not valid",
      "message": "Regular expression [{{regex}}] is not valid."
    },
    "FORM_VALUE_DELETE_FAILED_IS_REQUIRED": {
      "title": "Values cannot be deleted",
      "message": "Values [count: <strong class=\"highlight\">{{count}}</strong>] of attribute [<strong class=\"highlight\">{{attribute}}</strong>] cannot be deleted, attribute is defined as required. Change form attribute definition if values are needed to be removed."
    },
    "FORM_PROJECTION_WRONG_VALIDATION_CONFIGURATION": {
      "title": "Projection has wrong configuration",
      "message": "Form projection [{{formProjection}}] is wrongly configured. Fix configured form validations."
    },
    "ACCEPTED": {
      "title": "Request added",
      "message": "Request will be processed / approved."
    },
    "ROLE_REQUEST_EXECUTED_CANNOT_DELETE": {
      "title": "Request for change roles cannot be deleted",
      "message": "Request for change roles in state 'Executed' cannot be delete!"
    },
    "ROLE_REQUEST_APPLICANTS_NOT_SAME": {
      "title": "Request for change roles have not same applicants",
      "message": "Some concepts have not same applicant [{{applicant}}]!"
    },
    "ROLE_REQUEST_NO_EXECUTE_IMMEDIATELY_RIGHT": {
      "title": "You do not have permission to start request for change roles without approval.",
      "message": "You do not have permission (EXECUTE IMMEDIATELY) to start request for change roles without approval!"
    },
    "CRYPT_DEMO_KEY_NOT_FOUND": {
      "title": "Demo key was not found",
      "message": "Encryption and decryption into the local repository is not possible."
    },
    "CRYPT_INITIALIZATION_PROBLEM": {
      "title": "Error in initializing an encryption tool",
      "message": "Encryption and decryption into the local repository is not possible."
    },
    "UNMODIFIABLE_ATTRIBUTE_CHANGE": {
      "title": "Attribute {{name}} can't change",
      "message": "Attribute {{name}} in entity {{class}} can't change."
    },
    "UNMODIFIABLE_DELETE_FAILED": {
      "title": "Record cannot be deleted",
      "message": "Unmodifiable record [{{record}}] cannot be deleted."
    },
    "PASSWORD_EXPIRATION_TASK_DAYS_BEFORE": {
      "title": "Task has invalid configuration",
      "message": "Attribute 'days before' is required and has to be number greater than zero, given [{{daysBefore}}]."
    },
    "PASSWORD_EXPIRED": {
      "title": "Password expired",
      "message": "Password couldn't be used for login."
    },
    "PASSWORD_EXPIRATION_TODAY_INFO": {
      "title": "Password is valid till today.",
      "message": "Password is valid till today. Password will expire tomorow."
    },
    "RECAPTCHA_SECRETKEY_MISSING": {
      "title": "Application configuration",
      "message": "Configuration property for recaptcha [{{property}}] is missing. Add please configuration item."
    },
    "RECAPTCHA_CHECK_FAILED": {
      "title": "Recaptcha check",
      "message": "Recaptcha failed: [{{errors}}]."
    },
    "RECAPTCHA_SERVICE_UNAVAILABLE": {
      "title": "Recaptcha check",
      "message": "Recaptcha service is unavailable."
    },
    "BACKUP_FOLDER_FOUND": {
      "title": "Backup folder",
      "message": "Configured backup folder: [{{backupFolder}}]."
    },
    "BACKUP_FOLDER_NOT_FOUND": {
      "title": "Backup folder doesn't exist",
      "message": "Please specify this property: [{{property}}] in configuration properties."
    },
    "ROLE_DELETE_FAILED_HAS_TREE_NODE": {
      "title": "Role cannot be deleted",
      "message": "Role [{{role}}] has assigned automatic roles. Remove automatic roles at first."
    },
    "TREE_NODE_DELETE_FAILED_HAS_ROLE": {
      "title": "Tree node cannot be deleted",
      "message": "Node [{{treeNode}}] has assigned automatic roles. Remove automatic roles at first."
    },
    "ROLE_TREE_NODE_TYPE_EXISTS": {
      "title": "A similar definition of an automatic role already exists",
      "message": "For this role, the tree structure element and recursion type already exists element."
    },
    "IDENTITY_ALREADY_DISABLED_MANUALLY": {
      "title": "User is already deactivated",
      "message": "User [{{username}}] is already deactivated manually. Cannot be deactivated twice."
    },
    "IDENTITY_UNABLE_GENERATE_UNIQUE_USERNAME": {
      "title": "Unable to generate username",
      "message": "Anonymous generator is not able to generate username. All numbers from allowed range have been used. Increase the allowed number range in the generator setting."
    },
    "IDENTITY_NOT_DISABLED_MANUALLY": {
      "title": "User is not deactivated manually",
      "message": "User [{{username}}] cannot be activated manually. Only manually deactivated user can be activated."
    },
    "DRY_RUN": {
      "title": "Dry run",
      "message": "Demo process."
    },
    "FORM_ATTRIBUTE_DELETE_FAILED_AUTOMATIC_ROLE_RULE_ASSIGNED": {
      "title": "Form attribute can not be deleted",
      "message": "Attribute [{{formAttribute}}] can not be deleted, because is used in the rule/rules by automatic role based on attribute."
    },
    "ROLE_DELETE_FAILED_AUTOMATIC_ROLE_ASSIGNED": {
      "title": "Role nelze smazat",
      "message": "Role [{{role}}] can not be deleted, because is used in the rule/rules by automatic role based on attribute."
    },
    "SCHEDULER_DRY_RUN_NOT_SUPPORTED": {
      "title": "Dry run is not supported",
      "message": "Dry run (demo process) is not supported for task type [{{taskType}}]."
    },
    "AUTOMATIC_ROLE_RULE_PERSISTENT_TYPE_TEXT": {
      "title": "Attribute type 'TEXT' is not supported",
      "message": "Extended attribute type 'TEXT' is not supported."
    },
    "AUTOMATIC_ROLE_REQUEST_START_WITHOUT_RULE": {
      "title": "Request for automatic role must have at least one rule!",
      "message": "Request for automatic role [{{request}}] must have at least one rule!"
    },
    "EVENT_CANCELED_BY_RESTART": {
      "title": "Event was canceled",
      "message": "Event [{{eventType}}] on instance [{{instanceId}}] was interrupted - instance was canceled during processing."
    },
    "EVENT_DUPLICATE_CANCELED": {
      "title": "Event was not executed",
      "message": "Event was not executed - duplicate event for the same owner, type and with the same properties was found."
    },
    "EVENT_ALREADY_CLOSED": {
      "title": "Event is already closed",
      "message": "Event is already closed, will be saved only (log)."
    },
    "EVENT_ACCEPTED": {
      "title": "Tasks started",
      "message": "Tasks will be processed on background:"
    },
    "EVENT_EXECUTE_FAILED": {
      "title": "Event failed",
      "message": "Event execution failed."
    },
    "EVENT_EXECUTE_PROCESSOR_FAILED": {
      "title": "Event failed",
      "message": "Event execution failed in processor [{{processor}}]."
    },
    "EVENT_CONTENT_DELETED": {
      "title": "Event content was deleted",
      "message": "Event content was deleted, event cannot be executed anymore."
    },
    "EVENT_NOT_FOUND": {
      "title": "Not found",
      "message": "Event does not exist, processed events are deleted automatically."
    },
    "CONTENT_DELETED": {
      "title": "Content was deleted",
      "message": "Operation content was deleted, operation cannot be executed anymore and will be canceled."
    },
    "IDENTITYIMAGE_WRONG_FORMAT": {
      "title": "Wrong format",
      "message": "File has got image suffix but It's not an image. File should contains image in one of this formats: jpg, jpeg, png, gif."
    },
    "BULK_ACTION_REQUIRED_PROPERTY": {
      "title": "Required property wasn't filled",
      "message": "Property [{{attributeCode}}] wasn't filled."
    },
    "BULK_ACTION_ROLE_NOT_FOUND": {
      "title": "Roles not found",
      "message": "Roles for remove not found for identity: [{{identity}}]."
    },
    "BULK_ACTION_IDENTITY_REMOVE_ROLE_FAILED": {
      "title": "Roles not removed",
      "message": "Roles for identity [{{identity}}] not removed. Roles not found or cannot be removed (its automatic role, business role or for insufficient permissions)."
    },
    "BULK_ACTION_NOT_AUTHORIZED_CONTRACT_GUARANTEE": {
      "title": "Insufficient permissions for contract guarantee change",
      "message": "User is not authorized to perform [{{permission}}] operation with contract guarantee for contract [{{contractId}}] and identity of guarantee [{{guaranteeId}}]."
    },
    "BULK_ACTION_NOT_AUTHORIZED_MODIFY_CONTRACT": {
      "title": "Insufficient permissions for contract change",
      "message": "User is not authorized to perform changes of contract [{{contractId}}]."
    },
    "BULK_ACTION_CONTRACT_NOT_FOUND": {
      "title": "Contract not found",
      "message": "Contract for identity: [{{identity}}] not found."
    },
    "BULK_ACTION_ONLY_ONE_FILTER_CAN_BE_APPLIED": {
      "title": "Bulk action can not be started",
      "message": "Only one filtering option can be applied."
    },
    "BULK_ACTION_MODULE_DISABLED": {
      "title": "Bulk action can not be started",
      "message": "Action [{{action}}] can't be processed. Module [{{module}}] is disabled."
    },
      "BULK_ACTION_ENTITIES_ARE_NOT_SPECIFIED": {
      "title": "Bulk action can not be started",
      "message": "Bulk action hasn't specified entities or filter."
    },
    "BULK_ACTION_BAD_FILTER": {
      "title": "Bulk action can not be started",
      "message": "Filter must be instance of [{{filter}}], given instance [{{givenFilter}}]."
    },
    "CONTRACT_IS_CONTROLLED_CANNOT_BE_MODIFIED": {
      "title": "Contract cannot be modified!",
      "message": "Contract cannot be modified, because it is controlled by time slices! Contract can be modified through the modification of the valid slice. (Contract identifier [{{contractId}}])"
    },
    "CONTRACT_IS_CONTROLLED_CANNOT_BE_DELETED": {
      "title": "Contract cannot be deleted!",
      "message": "Contract {{contractId}} cannot be deleted, because is controlled by time slices! Contract will be removed, when last of slice will be deleted. (Contract identifier [{{contractId}}])"
    },
    "CONTRACT_IS_CONTROLLED_GUARANTEE_CANNOT_BE_MODIFIED": {
      "title": "Contract guarantee cannot be modified!",
      "message": "Contract guarantees of {{contractId}} cannot be modified, because the contract is controlled by time slices! Contract guarantees can be modified via valid contract slice."
    },
    "CONTRACT_IS_CONTROLLED_GUARANTEE_CANNOT_BE_DELETED": {
      "title": "Contract guarantee cannot be deleted!",
      "message": "Contract guarantees of {{contractId}} cannot be deleted, because the contract is controlled by time slices! Contract guarantees can be deleted via valid contract slice."
    },
    "PASSWORD_POLICY_BLOCK_TIME_IS_REQUIRED": {
      "title": "The [{{definition}}] policy does not have a user lockout timeout defined!",
      "message": "The [[{definition}}] policy defines the maximum number of logon attempts but does not have a user lockout timeout defined!"
    },
    "PASSWORD_POLICY_INVALID_SETTING": {
      "title": "Invalid setting of password policy.",
      "message": "It is impossible to generate password which meets this password policy setting!"
    },
    "PASSWORD_CHANGE_ACCOUNT_SUCCESS": {
      "title": "Password was changed",
      "message": "Password change for account [{{account}}] was successful."
    },
    "OK": {
      "title": "Operation was successful",
      "message": "Request was successfully completed."
    },
    "DELETED": {
      "title": "Record deleted",
      "message": "Record will be deleted."
    },
    "AUTHORIZATION_POLICY_GROUP_AUTHORIZATION_TYPE": {
      "title": "Missing attribute 'groupPermission'",
      "message": "When authorization type is filled, then attribute 'groupPermission' must be filled to."
    },
    "AUTOMATIC_ROLE_ASSIGN_NOT_COMPLETE": {
      "title": "Role wasn't assigned",
      "message": "Role [{{role}}] wasn't assigned by automatic role [{{roleTreeNode}}] for some identities. More information can be found in task item detail."
    },
    "AUTOMATIC_ROLE_ASSIGN_TASK_NOT_COMPLETE": {
      "title": "Role wasn't assigned",
      "message": "Role [{{role}}] wasn't assigned by automatic role [{{roleTreeNode}}] for identity [{{identity}}]. More information can be found in task item detail."
    },
    "AUTOMATIC_ROLE_ALREADY_ASSIGNED": {
      "title": "Role is already assigned",
      "message": "Role [{{role}}] was already assigned by automatic role [{{roleTreeNode}}] for identity [{{identity}}]."
    },
    "AUTOMATIC_ROLE_ALREADY_ASSIGNED_TO_CONTRACT": {
      "title": "Role is already assigned",
      "message": "Role [{{role}}] was already assigned by automatic role [{{roleTreeNode}}] for contract [{{contract}}] and position [{{position}}]."
    },
    "AUTOMATIC_ROLE_ASSIGN_TASK_ROLE_ASSIGNED": {
      "title": "Role is assigned",
      "message": "Role [{{role}}] is assigned by automatic role [{{roleTreeNode}}] for identity [{{identity}}]."
    },
    "AUTOMATIC_ROLE_ASSIGN_TASK_ROLE_REMOVED": {
      "title": "Assigned role is removed",
      "message": "Assigned Role [{{role}}] is removed by automatic role [{{roleTreeNode}}] for identity [{{identity}}]."
    },
    "AUTOMATIC_ROLE_CONTRACT_IS_NOT_VALID": {
      "title": "Role cannot be assigned",
      "message": "Role [{{role}}] cannot be assigned by automatic role [{{roleTreeNode}}] for identity [{{identity}}]. Identity doesn't have a valid contract."
    },
    "AUTOMATIC_ROLE_TASK_RUNNING": {
      "title": "Role is used by concurrent task",
      "message": "Automatic role is processed by concurrent task [{{taskId}}], wait for task completion."
    },
    "AUTOMATIC_ROLE_REMOVE_TASK_ADD_RUNNING": {
      "title": "Role is used by concurrent task",
      "message": "Automatic role [{{roleTreeNode}}] is used by concurrent task [{{taskId}}], wait for task completion."
    },
    "AUTOMATIC_ROLE_REMOVE_TASK_NOT_COMPLETE": {
      "title": "Role wasn't removed",
      "message": "Role [{{role}}] wasn't removed by automatic role [{{roleTreeNode}}] for identity [{{identity}}], Check role request agenda for reason."
    },
    "AUTOMATIC_ROLE_REMOVE_HAS_ASSIGNED_ROLES": {
      "title": "Automatic role cannot be deleted",
      "message": "Currenty deleted automatic role [{{automaticRoleId}}] was newly assigned to [{{assignedRoles}}] users. Cancel role assignment and delete business role again."
    },
    "AUTOMATIC_ROLE_RULE_INVALID_COMPARSION_WITH_MULTIPLE_ATTIBUTE": {
      "title": "Invalid comparison and attribute type",
      "message": "The selected comparison cannot be used with a multivalued attribute."
    },
    "AUTOMATIC_ROLE_RULE_COMPARSION_IS_ONLY_FOR_NUMERIC_ATTRIBUTE": {
      "title": "Invalid comparison and attribute type",
      "message": "The selected comparison can be used only with a numeric type attribute."
    },
    "AUTOMATIC_ROLE_RULE_INVALID_COMPARSION_BOOLEAN": {
      "title": "Invalid comparison and attribute type",
      "message": "The selected comparison cannot be used with a boolean type attribute."
    },
    "AUTOMATIC_ROLE_REMOVE_TASK_RUN_CONCURRENTLY": {
      "title": "Role is used by concurrent task",
      "message": "Automatic role [{{roleTreeNode}}] is used by concurrent task [{{taskId}}]."
    },
    "AUTOMATIC_ROLE_RULE_ATTRIBUTE_EMPTY": {
      "title": "Some attributes are missing",
      "message": "Rule for automatic role didn't fill all necessary attributes: [{{attrs}}]."
    },
    "AUTOMATIC_ROLE_TASK_EMPTY": {
      "title": "Missing 'id' of automatic role",
      "message": "Id of automatic role is required."
    },
    "AUTOMATIC_ROLE_TASK_INVALID": {
      "title": "",
      "message": "Select only one of automatic role - by tree structure or by attribute."
    },
    "AUTOMATIC_ROLE_TREE_TASK_INVALID": {
      "title": "",
      "message": "Set at least one of automatic role by tree structure."
    },
    "AUTOMATIC_ROLE_SKIPPED": {
      "title": "Recount of automatic roles was skipped",
      "message": "Automatic roles by tree structure were not processed, when record was saved."
    },
    "AUTOMATIC_ROLE_SKIPPED_INVALID_CONTRACT": {
      "title": "Recount of automatic roles was skipped",
      "message": "Automatic roles were not removed, when invalid contract was saved."
    },
    "BACKUP_FAIL": {
      "title": "Backup failed",
      "message": "Backup for selected record failed."
    },
    "DEPLOY_ERROR": {
      "title": "Deployment of entity failed",
      "message": "Deploying entity from path [{{path}}] failed."
    },
    "DEPLOY_SCRIPT_FOLDER_FOUND": {
      "title": "Recovery folder",
      "message": "Configured recovery folder: [{{redeployFolder}}]."
    },
    "DEPLOY_TEMPLATE_FOLDER_FOUND": {
      "title": "Recovery folder",
      "message": "Configured recovery folder: [{{redeployFolder}}]."
    },
    "FORM_VALUE_WRONG_TYPE": {
      "title": "Wrong format of attributes",
      "message": "Value [{{value}}] of attribute [{{formAttribute}}] must be type of [{{persistentType}}] instead of [{{valueType}}]."
    },
    "GROOVY_SCRIPT_EXCEPTION": {
      "title": "Error in script",
      "message": "Script contains following errors: [{{message}}]."
    },
    "GROOVY_SCRIPT_INVALID_CATEGORY": {
      "title": "Wrong category for script",
      "message": "Script is using script from wrong category [{{category}}]."
    },
    "GROOVY_SCRIPT_NOT_ACCESSIBLE_CLASS": {
      "title": "Class is not accessible",
      "message": "Class [{{class}}] is not accessible!"
    },
    "GROOVY_SCRIPT_NOT_ACCESSIBLE_SERVICE": {
      "title": "Service is not accessible",
      "message": "Service [{{service}}] is not accessible!"
    },
    "LONG_RUNNING_TASK_DIFFERENT_INSTANCE": {
      "title": "Task has multiple instances",
      "message": "Task [{{task}}] has other instance {{instance}}], because of it, it's not accessible from this one{{thisInstance}}]."
    },
    "LONG_RUNNING_TASK_NOT_FOUND": {
      "title": "Can not create instance",
      "message": "Can not create instance for task type [{{taskType}}]."
    },
    "NOTIFICATION_TEMPLATE_ERROR_XML_SCHEMA": {
      "title": "Can not load template",
      "message": "Can not load template [{{template}}], Error in XML schema."
    },
    "NULL_ATTRIBUTE": {
      "title": "Attribute is NULL",
      "message": "Attribute 'null' is NULL."
    },
    "ROLE_REQUEST_AUTOMATICALLY_NOT_ALLOWED": {
      "title": "Wrong value",
      "message": "Attribute 'requested by' in request [{{request}}] can not have value 'AUTOMATICALLY' via REST API."
    },
    "ROLE_REQUEST_EXECUTE_WRONG_STATE": {
      "title": "Wrong state of request",
      "message": "Request is in state [{{state}}], Allowed states, which can be executed are APPROVED a CONCEPT."
    },
    "SCHEDULER_UNSUPPORTED_TASK_TRIGGER": {
      "title": "Unsupported trigger",
      "message": "Task trigger [{{trigger}}] is not supported."
    },
    "TREE_NODE_BAD_CHILDREN": {
      "title": "Wrong node children",
      "message": "Tree node [{{node}}] has bad children."
    },
    "SEARCH_ERROR": {
      "title": "Search error",
      "message": "Error during searching entities. Error: [{{error}}]."
    },
    "WF_WARNING": {
      "title": "Workflow execution warning",
      "message": "Warning occurred during workflow execution. Warning: [{{warning}}]."
    },
    "XML_JAXB_INIT_ERROR": {
      "title": "Init JAXB instance failed",
      "message": "Can not perform init of JAXB instance."
    },
    "AUTH_EXPIRED": {
      "title": "Authorization expired",
      "message": "Authorization expired."
    },
    "ATTACHMENT_DATA_NOT_FOUND": {
      "title": "Data for attachment not found",
      "message": "Binary data for attachment: [{{one}}:{{two}}] - [{{three}}] not found."
    },
    "ATTACHMENT_SIZE_LIMIT_EXCEEDED": {
      "title": "Attachment size limit exceeded",
      "message": "Attachment size limit is [{{actualSize}}]."
    },
    "NOTIFICATION_TEMPLATE_XML_FILE_NOT_FOUND": {
      "title": "Template not found",
      "message": "XML file for template [{{template}}] not found."
    },
    "SCRIPT_XML_FILE_NOT_FOUND": {
      "title": "File not found",
      "message": "XML file for script [{{script}}] not found."
    },
    "METHOD_NOT_ALLOWED": {
      "title": "Method not allowed",
      "message": "This method is not allowed!"
    },
    "FILTER_IMPLEMENTATION_NOT_FOUND": {
      "title": "Filter not found",
      "message": "Filter [{{implementation}}] for attribute [{{propertyName}}] not found. Fix configuration property [{{configurationProperty}}]."
    },
    "FILTER_PROPERTY_NOT_SUPPORTED": {
      "title": "Filter not found",
      "message": "Filter for attribute [{{propertyName}}] not found."
    },
    "FILTER_SIZE_EXCEEDED": {
      "title": "The number of filter items exceeded the maximum",
      "message": "Count of filter values exceeded limit [{{maximum}}], given [{{currentSize}}]. Remove some filter values to fit limit."
    },
    "FORM_DEFINITION_INCOMPATIBLE_CHANGE": {
      "title": "Can not update form definition",
      "message": "Form definition [{{form}}][{{form1}}] can not be updated. Can not automatically update property [{{property}}] of attribute [{{attr}}]. Provide change script for updating form definition or define new form definition."
    },
    "NOTIFICATION_SENDER_IMPLEMENTATION_NOT_FOUND": {
      "title": "Sender not found",
      "message": "Sender [{{sender}}] for type [{{type}}] not found. Fix configuration property [{{repairProperty}}]."
    },
    "NOTIFICATION_TEMPLATE_MORE_CODE_FOUND": {
      "title": "More then one template was found",
      "message": "More then one template was found for code: [{{code}}]."
    },
    "NOTIFICATION_NOT_SENT": {
      "title": "Notification not sent",
      "message": "Notification configuration for topic [{{topic}}] not found or is disabled."
    },
    "PASSWORD_CHANGE_ACCOUNT_FAILED": {
      "title": "Password change failed",
      "message": "Can not change password in these accounts: [{{accounts}}]."
    },
    "ROLE_DELETE_FAILED_IDENTITY_ASSIGNED": {
      "title": "Role can not be deleted",
      "message": "Can not delete role [{{role}}], because is assigned to some identities."
    },
    "SCRIPT_MORE_CODE_FOUND": {
      "title": "More then one script was found",
      "message": "More then one script was found for code: [{{code}}]."
    },
    "UNMODIFIABLE_LOCKED": {
      "title": "Can not change entity",
      "message": "Entity [{{entity}}] can not be changed, because it's locked."
    },
    "ATTACHMENT_CREATE_FAILED": {
      "title": "Creation of attachment failed",
      "message": "Creation of attachment [{{attachment}}] with owner [{{owner}}][{{owner1}}] failed."
    },
    "ATTACHMENT_CREATE_TEMP_FILE_FAILED": {
      "title": "Creation of temp file failed",
      "message": "Creation of temp file [{{file}}] in temp dir [{{folder}}] failed."
    },
    "ATTACHMENT_INIT_DEFAULT_STORAGE_FAILED": {
      "title": "Can not create default storage",
      "message": "Creation of folder for default storage [{{storage}}] in temp dir failed."
    },
    "ATTACHMENT_INIT_DEFAULT_TEMP_FAILED": {
      "title": "Can no create default temp storage",
      "message": "Creation of folder for temp default storage [{{storage}}] in temp dir failed."
    },
    "ATTACHMENT_UPDATE_FAILED": {
      "title": "Update of attachment failed",
      "message": "Update of attachment [{{attachment}}] with owner [{{owner}}][{{owner1}}] failed."
    },
    "INTERNAL_SERVER_ERROR": {
      "title": "Server error",
      "message": "Some error occurred on server."
    },
    "NOT_IMPLEMENTED": {
      "title": "Not implemented",
      "message": "Function [{{function}}] not implemented."
    },
    "NOT_SUPPORTED": {
      "title": "Not supported",
      "message": "Function [{{function}}] not supported."
    },
    "RECAPTCHA_SECRET_KEY_MISSING": {
      "title": "Wrong Recaptcha configuration",
      "message": "Recaptcha has wrong configuration. Please set missing attribute [{{attr}}]."
    },
    "SCHEDULER_CREATE_TASK_FAILED": {
      "title": "Task creation failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_CREATE_TRIGGER_FAILED": {
      "title": "Trigger creation failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_DELETE_TASK_FAILED": {
      "title": "Task deleting failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_DELETE_TRIGGER_FAILED": {
      "title": "Trigger deleting failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_INTERRUPT_TASK_FAILED": {
      "title": "Task interruption failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_PAUSE_TRIGGER_FAILED": {
      "title": "Task pause failed",
      "message": "[{{error}}]."
    },
    "SCHEDULER_RESUME_TRIGGER_FAILED": {
      "title": "Task resume failed",
      "message": "[{{error}}]."
    },
    "WF_ERROR": {
      "title": "Error during workflow execution",
      "message": "During workflow execution, error occurred: [{{error}}]."
    },
    "WRONG_PROXY_CONFIG": {
      "title": "Wrong proxy configuration",
      "message": "Wrong configuration of http proxy. The required format is'[IP]:[PORT]'. For example: '153.25.16.8:1234'."
    },
    "ENTITY_TYPE_NOT_EXTERNAL_IDENTIFIABLE": {
      "title": "Entity type is not external identifiable",
      "message": "Entity type [{{entityType}}] is not external identifiable."
    },
    "ENTITY_TYPE_NOT_EXTERNAL_CODEABLE": {
      "title": "Entity type is not external codeable",
      "message": "Entity type [{{entityType}}] is not external codeable."
    },
    "DUPLICATE_EXTERNAL_ID": {
      "title": "Record already exists",
      "message": "Record with external identifier [{{externalId}}] already exists."
    },
    "DUPLICATE_EXTERNAL_CODE": {
      "title": "Record already exists",
      "message": "Record with personal number [{{externalCode}}] already exists."
    },
    "CORRELATION_PROPERTY_NOT_FOUND": {
      "title": "Correlation filter doesn't work",
      "message": "Correlation filter doesn't work, because the property [{{property}}] not exists!"
    },
    "CORRELATION_PROPERTY_WRONG_TYPE": {
      "title": "Correlation filter doesn't work",
      "message": "Correlation filter doesn't work, because the property [{{property}}] is not String!"
    },
    "TOKEN_NOT_FOUND": {
      "title": "Token not found",
      "message": "Authenticate token not found!"
    },
    "TOKEN_READ_FAILED": {
      "title": "Wrong token given.",
      "message": "Given token cannot be read."
    },
    "TWO_FACTOR_INIT_FAILED": {
      "title": "Two factor authentication is not available.",
      "message": "Initialization of two factor authentication failed."
    },
    "TWO_FACTOR_AUTH_REQIURED": {
      "title": "Two factor authentication",
      "message": "Two factor authentication is required for login."
    },
    "TWO_FACTOR_VERIFICATION_CODE_FAILED": {
      "title": "Two factor authentication",
      "message": "Verification code validation failed. Enter a valid verification code."
    },
    "TWO_FACTOR_GENERATE_CODE_FAILED": {
      "title": "Two factor authentication",
      "message": "Generate verification code failed."
    },
    "ROLE_DELETE_BULK_ACTION_NUMBER_OF_IDENTITIES": {
      "title": "",
      "message": "Role <strong>{{role}}</strong> contains user relationships [<strong class=\"highlight\">{{count}}</strong>]. <strong>Remove user relationships before role deletion.</strong>"
    },
    "ROLE_FORCE_DELETE_BULK_ACTION_NUMBER_OF_IDENTITIES": {
      "title": "",
      "message": "Role <strong>{{role}}</strong> contains user relationships [<strong class=\"highlight\">{{count}}</strong>]. Remove user relationships before role deletion or use force delete bellow."
    },
    "ROLE_DELETE_BULK_ACTION_CONCEPTS_TO_MODIFY": {
      "title": "",
      "message": "Deleted role needs to be removed from <strong class=\"highlight\">{{conceptCount}}</strong> request concepts. It may take some time."
    },
    "ROLE_COMPOSITION_ASSIGN_ROLE_FAILED": {
      "title": "Role wasn't assigned",
      "message": "Role [{{role}}] wasn't assigned."
    },
    "ROLE_COMPOSITION_ASSIGNED_ROLE_REMOVAL_FAILED": {
      "title": "Role wasn't removed",
      "message": "Assigned role [{{identityRole}}] wasn't removed."
    },
    "ROLE_DELETE_FAILED_HAS_COMPOSITION": {
      "title": "Role nelze smazat",
      "message": "Role [{{role}}] can not be deleted, because is used in the business role definition. Remove business role difinition at first."
    },
    "ROLE_COMPOSITION_REMOVE_TASK_ADD_RUNNING": {
      "title": "Business role is used by concurrent task",
      "message": "Business role [{{roleCompositionId}}] is used by concurrent task [{{taskId}}], wait for task completion."
    },
    "ROLE_COMPOSITION_RUN_CONCURRENTLY": {
      "title": "Business roles are processed",
      "message": "Business role will be processed asynchronously on background."
    },
    "ROLE_COMPOSITION_REMOVE_TASK_RUN_CONCURRENTLY": {
      "title": "Role is removed by concurrent task",
      "message": "Business role [{{roleCompositionId}}] is removed by concurrent task [{{taskId}}]."
    },
    "ROLE_COMPOSITION_REMOVE_HAS_ASSIGNED_ROLES": {
      "title": "Business role cannot be deleted",
      "message": "Currenty deleted business role [{{roleCompositionId}}] was newly assigned to [{{assignedRoles}}] users. Cancel role assignment and delete business role again."
    },
    "GENERATOR_SCRIPT_RETURN_NULL_OR_BAD_DTO_TYPE": {
      "title": "Script for generated values returns an error state",
      "message": "Script [{{scriptCode}}] returned null, or wrong type of entity. Return value: [{{returnedValue}}]."
    },
    "GENERATOR_FORM_ATTRIBUTE_NOT_FOUND": {
      "title": "Form attribute for definition not found",
      "message": "Form attribute for definition [{{formDefinitionCode}}] with code [{{formAttributeCode}}] not found."
    },
    "GENERATOR_FORM_DEFINITION_BAD_TYPE": {
      "title": "Form definition has wrong type",
      "message": "Form definition configured in value generator, has wrong type. Correct type: [{{entityType}}]. Configure default value generator properly."
    },
    "IDMIDENTITY_USERNAME_NOTEMPTY": {
      "title": "Login cannot be empty",
      "message": "Login has not been filled. Please fill the login or enable the login generator."
    },
    "DTO_CANNOT_BE_CONVERT_TO_JSON": {
      "title": "DTO cannot be convert to the JSON!",
      "message": "DTO [{{dto}}] cannot be convert to the JSON!"
    },
    "JSON_CANNOT_BE_CONVERT_TO_DTO": {
      "title": "JSON cannot be convert to the DTO!",
      "message": "JSON [{{json}}] cannot be convert to the DTO!"
    },
    "REQUEST_CUD_OPERATIONS_NOT_ALLOWED": {
      "title": "CUD operations are not allowed on that REST controller [{{controller}}]!",
      "message": "CUD operations are not allowed on that REST controller [{{controller}}]! Use request REST endpoint."
    },
    "REQUEST_NO_EXECUTE_IMMEDIATELY_RIGHT": {
      "title": "You do not have right for immidiately execute request!",
      "message": "You do not have right (REQUEST_ADMIN) for immidiately execute request [{{request}}]!"
    },
    "REQUEST_ITEM_IS_NOT_VALID": {
      "title": "DTO [{{dto}}] in the request item is not valid!",
      "message": "DTO [{{dto}}] in the request item [{{item}}] is not valid!"
    },
    "REQUEST_NO_WF_DEF_FOUND": {
      "title": "No approval workflow definition found!",
      "message": "No approval workflow definition found for entity type [{{entityType}}]!"
    },
    "REQUEST_OWNER_WAS_DELETED": {
      "title": "Owner was deleted!",
      "message": "Owner [{{owner}}] was deleted!"
    },
    "REQUEST_OWNER_FROM_OTHER_REQUEST_WAS_DELETED": {
      "title": "Owner from other request was deleted!",
      "message": "Owner [{{owner}}] from other request [{{otherRequest}}] was deleted!"
    },
    "REQUEST_CANNOT_BE_EXECUTED_NONE_ITEMS": {
      "title": "Request cannot be executed. Has no request items!",
      "message": "Request [{{request}}] cannot be executed. Has no request items!"
    },
    "REQUEST_ITEM_CANNOT_BE_EXECUTED": {
      "title": "Request item [{{item}}] cannot be executed!",
      "message": "Request item [{{item}}] cannot be executed. Must be in state APPROVED or CONCEPT, but is in state [{{state}}]!"
    },
    "REQUEST_ITEM_CANNOT_BE_CREATED": {
      "title": "Request item cannot be created/changed for object [{{dto}}]!",
      "message": "Request item cannot be created/changed for object [{{dto}}]. Parent request must be in state INPROGRESS or CONCEPT or EXCEPTION, but is in state [{{state}}]!"
    },
    "REQUEST_ITEM_NOT_EXECUTED_PARENT_CANCELED": {
      "title": "Request item [{{item}}] could not be executed!",
      "message": "Request item [{{item}}] could not be executed, because is using DTO from terminated item [{{terminatedItem}}]!"
    },
    "REQUEST_EXECUTED_CANNOT_DELETE": {
      "title": "Request for change roles cannot be deleted",
      "message": "Request for change roles in state 'Executed' cannot be delete!"
    },
    "SYNTAX_ERROR": {
      "title": "Server communication failed",
      "message": "Server communication failed, try to execute operation again. If the issue persists, please contact your application administrator."
    },
    "ROLE_CODE_ENVIRONMENT_CONFLICT": {
      "title": "Role code colide with environment",
      "message": "Role code {{code}} cannot be combined with environment {{environment}}. Use base code with environment instead."
    },
    "ROLE_CODE_REQUIRED":  {
      "title": "Role code is required",
      "message": "Fill role code or base code."
    },
    "LONG_RUNNING_TASK_PARTITIAL_DOWNLOAD": {
      "title": "Task completed successfully. The result can be downloaded.",
      "message": "The long task has been successfully completed. Result is ready to download."
    },
    "ROLE_REQUEST_UNVALID_CONCEPT_ATTRIBUTE": {
      "title": "Request is invalid!",
      "message": "Concept for role [{{roleCode}}], has invalid attribute [{{attributeCode}}]! Invalidate concepts will be highlighted in the reqeust."
    },
    "IDENTITY_ROLE_UNVALID_ATTRIBUTE": {
      "title": "User role is invalid!",
      "message": "User role [{{roleCode}}], has invalid attribute [{{attributeCode}}]!"
    },
    "FORM_DEFINITION_DELETE_FAILED_ROLE": {
      "title": "Form definition cannot be deleted!",
      "message": "Form definition [{{definition}}]  cannot be deleted, because is using in the role [{{role}}]!"
    },
    "ROLE_FORM_ATTRIBUTE_CHANGE_DEF_NOT_ALLOWED": {
      "title": "It is not possible to change the definition of role attributes!",
      "message": "It is not possible to change the definition of role [{{role}}] attributes, because it has at least one attribute set (for the original definition). First, you must remove all sets role attributes!"
    },
    "FORM_ATTRIBUTE_DELETE_FAILED_ROLE_ATTRIBUTE": {
      "title": "Attribute definition cannot be deleted!",
      "message": "Attribute definition [{{definition}}]  cannot be deleted, because is using in the role [{{role}}]!"
    },
    "PASSWORD_CANNOT_BE_CREATED": {
      "title": "Password cannot be created",
      "message": "Password for users can be create only by internal IdM process."
    },
    "TREE_NODE_EMPTY_CODE": {
      "title": "Code cannot be empty",
      "message": "Code of node has not been filled. Please fill the code or enable the code generator."
    },
    "OPTIMISTIC_LOCK_ERROR": {
      "title": "Record was modified",
      "message": "Record was modified by other process or logged user. Try to reload the record and then retry the operation."
    },
    "ROLE_REQUEST_SYSTEM_STATE_CANCELED": {
      "title": "Role request's system state was canceled!",
      "message": "System state was canceled from the state [{{state}}]."
    },
    "MODEL_MAPPER_SERVICE_INIT_FAILED": {
      "title": "Model mapper initialization failed",
      "message": "Model mapper is wrongly initialized for service [{{service}}]. Try to restart application."
    },
    "LOGGER_LEVEL_NOT_FOUND": {
      "title": "Logger level does not exist",
      "message": "Given logger level [{{level}}] does not exist. Available logger levels [TRACE, DEBUG, INFO, WARN, ERROR]."
    },
    "IMPORT_EXECUTED_AS_DRYRUN": {
      "title": "Import was executed in demo mode.",
      "message": "No changes were made!"
    },
    "IMPORT_CAN_EXECUTE_ONLY_ADMIN": {
      "title": "Only administrator can start import!",
      "message": "Import cannot be started because you do not have administrator privileges!"
    },
    "IMPORT_DTO_SKIPPED": {
      "title": "Imported DTO was skipped.",
      "message": "The relation to this object was not found, but this type is marked as 'optional', so the imported DTO was skipped."
    },
    "IMPORT_ADVANCED_PARING_FAILED_NOT_FOUND": {
      "title": "Object with code [{{code}}] was not found!",
      "message": "Advanced pairing failed for [{{field}}] in DTO [{{dto}}]. Object [{{notFoundDto}}] not found in target IdM!"
    },
    "IMPORT_ADVANCED_PARING_NOT_FOUND_OPTIONAL": {
      "title": "Object with code [{{code}}] was not found!",
      "message": "Advanced pairing failed for [{{field}}] in DTO [{{dto}}]. Object [{{notFoundDto}}] not found in target IdM, but its import was skipped."
    },
    "IMPORT_DTO_SKIPPED_DRY_RUN": {
      "title": "Imported DTO was skipped.",
      "message": "The relation to this object was not found, but this import is runing in demo mode, so the imported DTO was skipped."
    },
    "IMPORT_IS_ALREADY_RUNNING": {
      "title": "This import is already running!",
      "message": "The same import task cannot be run twice!"
    },
    "EXPORT_ZIP_FAILED": {
      "title": "Export failed!",
      "message": "Exporting ZIP file failed!"
    },
    "IMPORT_ZIP_EXTRACTION_FAILED": {
      "title": "Import failed!",
      "message": "Import ZIP souboru selhal!"
    },
    "IMPORT_VALIDATION_FAILED_NO_MANIFEST": {
      "title": "Import failed!",
      "message": "The imported batch does not contain the [{{manifest}}] manifest!"
    },
    "IMPORT_FIELD_MUST_CONTAINS_UUID": {
      "title": "Import failed!",
      "message": "The imported item must have a UUID data type but have [{{type}}]!"
    },
    "IMPORT_CONVERT_TO_DTO_FAILED": {
      "title": "Import failed!",
      "message": "Failed to transform file [{{file}}] into object [{{dto}}]!!"
    },
    "IMPORT_FIELD_EMBEDDED_ANNOTATION_MISSING": {
      "title": "Import failed!",
      "message": "Embedded annotation for [{{field}}] was not found!"
    },
    "IMPORT_FAILED_ROOT_NOT_FOUND": {
      "title": "Import failed!",
      "message": "Root for object [{{dto}}] was not found!"
    },
    "EXPORT_GENERATE_JSON_FAILED": {
      "title": "Export selhal!",
      "message": "Generating JSON file for DTO [{{dto}}] failed!"
    },
    "EXPORT_IMPORT_IO_FAILED": {
      "title": "Export/Import failed!",
      "message": "An IO error has occurred!"
    },
    "EXPORT_IMPORT_REFLECTION_FAILED": {
      "title": "Export/Import failed!",
      "message": "An unexpected error has occurred!"
    },
    "EXPORT_IMPORT_FILTER_PARENT_FIELD_MUST_BE_UUID": {
      "title": "Export/Import failed!",
      "message": "Parent field [{{field}}] must have a UUID data type!"
    },
    "DELEGATION_UNSUPPORTED_TYPE": {
      "title": "Delegation type is not supported!",
      "message": "Delegation type [{{type}}] is not supported!"
    },
    "DELEGATION_DEFINITION_CANNOT_BE_UPDATED": {
      "title": "The delegation cannot be modified!",
      "message": "The definition of delegation cannot be modified. You can try delete the existing one and create a new one."
    },
    "DELEGATION_DEFINITION_DELEGATOR_AND_DELEGATE_ARE_SAME": {
      "title": "The delegator and the delegate cannot be the same!",
      "message": "Delegator and delegate cannot be the same within the same delegation!"
    },
    "MANUAL_TASK_DELEGATION_DELEGATOR_MISSING": {
      "title": "It is not specified who the tasks are to be delegated to!",
      "message": "To specify a delegator, you can use the filter (Assigned) above the agenda of all tasks or select a delegator below. The task will be delegated only if one of the solvers is the selected delegator."
    },
    "MANUAL_TASK_DELEGATION_DELEGATOR_IS_NOT_CANDIDATE": {
      "title": "The delegator is not the task approver!",
      "message": "The delegator [{{delegator}}] is not the approver of the task [{{task}}]."
    },
    "WF_TASK_FILTER_INVOLVED_ONLY": {
      "title": "Tasks use the wrong filter!",
      "message": "It is not allowed to set the task filter 'onlyInvolved' to a value other than TRUE!"
    },
    "IDENTITY_UNIFORM_PASSWORD": {
      "title": "Uniform password.",
      "message": "Uniform password for [{{entity}}]."
    }
  },
  "validationError": {
    "invalid": {
      "base": "Field is not valid",
      "regex": "Field is not valid by regular expression [{{regex}}].",
      "unique": "Field value has to be unique. Value [{{unique}}] is already used."
    },
    "string": {
      "min" : "Enter at least one character!",
      "min_plural" : "Enter at least {{count}} characters!",
      "base" : "Required field!",
      "email": "format of e-mail is not valid!",
      "max" : "Enter the maximum {{count}} character!",
      "max_plural" : "Enter the maximum {{count}} characters!",
      "guid": "Enter a valid uuid identifier",
      "isTrimmable": "Contains some whitespace characters at the beginning or the end of the text!"
    },
    "number": {
      "min" : "Min value is: {{count}}!",
      "base" : "Value must be number!",
      "max" : "Max value is: {{count}}!",
      "integer": "Integer number"
    },
    "boolean": {
      "base": "$t(validationError.string.base)"
    },
    "any": {
      "allowOnly": "Required field!",
      "empty" : "$t(validationError.string.base)",
      "required": "$t(validationError.any.allowOnly)"
    },
    "object" : {
      "base" : "$t(validationError.string.base)"
    },
    "array" : {
      "base" : "$t(validationError.string.base)",
      "min" : "Enter at least one item!",
      "min_plural" : "Enter at least {{count}} items!"
    },
    "date" : {
      "unvalid" : "Invalid date!",
      "min": "Date cannot be less than {{count}}!",
      "max": "Date cannot be greater than {{count}}!"
    },
    "passwords_not_same": "Passwords must be the same!",
    "configurationSecured": "You don't have permissions to edit system configuration"
  },
  "security": {
    "access": {
      "denied": "Insufficient permissions",
      "link": {
        "denied": "You don't have permissions to see record details"
      }
    },
    "record": {
      "notFound" : "Record not found or insufficient permissions to read selected record."
    }
  },
  "cache": {
    "configuration-cache": {
      "description": "Cache for storing CzechIdM's configuration properties. If the cache is evicted, then CzechIdM will load its value from database and cache it again."
    },
    "default-groovy-script-service-script-cache": {
      "description": "This cache stores compiled Groovy scripts. Evicting this cache will result in recompiling every script, when calling it. Recompiled script is then stored in this cache."
    },
    "authorization-policy-definition-cache": {
      "description": "Cache stores configured (available) authorization policies. Cache is evicted after an authorization policy is changed."
    },
    "authorization-policy-cache": {
      "description": "Cache stores active authorization policies of currently logged user. Cache is evicted after user log out. When authorization policies configuration is changed, then user is logged out and cache is evicted (after permissions removal only). Cache expiration is 2 hour, e.g. if user forgot to log out."
    },
    "permission-cache": {
      "description": "Cache stores permissions (for data) of currently logged user. Cache is evicted after user log out. Cache expiration is 1 minute - if data structure is changed, then permissions are actualized after this duration. When authorization policies configuration is changed, cache is evicted (completely)."
    },
    "form-definition-cache": {
      "description": "Cache stores form definitions (eav). Cache is evicted automatically after form definition or attribute is changed."
    },
    "token-cache": {
      "description": "Cache stores logged user tokens. Cache is evicted automatically after token is changed. Cache expiration is 1 minute  - token expiration id prolonged automatically in one minute window, when token used."
    },
    "all-sub-roles": {
      "description": "Cache for business role sub roles. Cache is evicted automatically, when business role definition is changed."
    },
    "transaction-event-cache": {
      "description": "Cache for running asynchronous events. Cache is evicted automatically, when asynchronous event ends."
    }
  }
}
