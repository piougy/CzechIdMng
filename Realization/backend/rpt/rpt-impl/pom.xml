<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>eu.bcvsolutions.idm</groupId>
		<artifactId>idm-rpt</artifactId>
		<version>11.0.1-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>idm-rpt-impl</artifactId>
	<packaging>jar</packaging>

	<name>CzechIdM Report Impl</name>
	<description>Provide abstract implementations for creating reports. Expose endpoints for generating and managing reports.</description>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>idm-rpt-api</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>idm-core-impl</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>idm-acc</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>idm-core-test-api</artifactId>
			<version>${project.version}</version>
			<scope>test</scope>
		</dependency>

		<!--
			Tests dependencies for create LDAP server.
			I tried another version than 1.5.4 but newer version doesn't work as I expect.
			Excluded version of shared and server dependencies is because in this version exists conflict between it.
		 -->
		<dependency>
			<groupId>org.apache.directory.server</groupId>
			<artifactId>apacheds-all</artifactId>
			<version>1.5.4</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.apache.directory.shared</groupId>
					<artifactId>shared-ldap-schema</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.directory.server</groupId>
			<artifactId>apacheds-server-integ</artifactId>
			<version>1.5.4</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.apache.directory.server</groupId>
					<artifactId>apacheds-bootstrap-partition</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.directory.server</groupId>
			<artifactId>apacheds-core-integ</artifactId>
			<version>1.5.4</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.apache.directory.server</groupId>
					<artifactId>apacheds-bootstrap-partition</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Build>${buildNumber}</Implementation-Build>
							<Specification-Title>${project.description}</Specification-Title>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<!-- First, use the swagger2markup plugin to generate asciidoc -->
					<plugin>
						<groupId>io.github.swagger2markup</groupId>
						<artifactId>swagger2markup-maven-plugin</artifactId>
						<version>${swagger2markup.version}</version>

						<configuration>
							<swaggerInput>${swagger.input}</swaggerInput>
							<outputDir>${generated.asciidoc.directory}</outputDir>
							<config>
								<swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
								<swagger2markup.outputLanguage>EN</swagger2markup.outputLanguage>
								<swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>
								<swagger2markup.generatedExamplesEnabled>false</swagger2markup.generatedExamplesEnabled>

								<swagger2markup.extensions.dynamicOverview.contentPath>${asciidoctor.input.extensions.directory}/overview</swagger2markup.extensions.dynamicOverview.contentPath>
								<swagger2markup.extensions.dynamicDefinitions.contentPath>${asciidoctor.input.extensions.directory}/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
								<swagger2markup.extensions.dynamicPaths.contentPath>${asciidoctor.input.extensions.directory}/paths</swagger2markup.extensions.dynamicPaths.contentPath>
								<swagger2markup.extensions.dynamicSecurity.contentPath>${asciidoctor.input.extensions.directory}/security/</swagger2markup.extensions.dynamicSecurity.contentPath>

								<swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}</swagger2markup.extensions.springRestDocs.snippetBaseUri>
								<swagger2markup.extensions.springRestDocs.defaultSnippets>true</swagger2markup.extensions.springRestDocs.defaultSnippets>
							</config>
						</configuration>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>convertSwagger2markup</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!--
						Run the generated asciidoc through Asciidoctor to generate other
						documentation types, such as PDFs or HTML5
					-->
					<plugin>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctor-maven-plugin</artifactId>
						<version>1.5.3</version>
						<!-- Configure generic document generation settings -->
						<configuration>
							<sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
							<sourceDocumentName>index.adoc</sourceDocumentName>
							<attributes>
								<doctype>book</doctype>
								<toc>left</toc>
								<toclevels>2</toclevels> <!-- Resources by tag names in menu only -->
								<numbered />
								<hardbreaks />
								<sectlinks />
								<sectanchors />
								<generated>${generated.asciidoc.directory}</generated>
							</attributes>
						</configuration>
						<!--
							Since each execution can only handle one backend, run separate
							executions for each desired output type
						-->
						<executions>
							<execution>
								<id>output-html</id>
								<phase>test</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<backend>html5</backend>
									<!-- static documentation will be available as webjars -->
									<!-- e.g. http://localhost:8080/idm/webjars/core/7.3.0-rc.4-SNAPSHOT/doc/index.html -->
									<outputDirectory>${asciidoctor.html.output.directory.prefix}/rpt/${project.version}/doc</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
